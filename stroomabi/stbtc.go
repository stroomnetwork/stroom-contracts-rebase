// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package stroomabi

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// StBTCMintInvoice is an auto generated low-level Go binding around an user-defined struct.
type StBTCMintInvoice struct {
	BtcDepositId [32]byte
	Recipient    common.Address
	Amount       *big.Int
}

// StBtcMetaData contains all meta data concerning the StBtc contract.
var StBtcMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"function\",\"name\":\"BECH32_ALPHABET_MAP\",\"inputs\":[{\"name\":\"char\",\"type\":\"bytes1\",\"internalType\":\"bytes1\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"BTC\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"DUST_LIMIT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MESSAGE_MINT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MESSAGE_UPDATE_TOTAL_SUPPLY\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"alphabetCheck\",\"inputs\":[{\"name\":\"BTCAddress\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"btcDepositIds\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"encodeInvoice\",\"inputs\":[{\"name\":\"invoice\",\"type\":\"tuple\",\"internalType\":\"structstBTC.MintInvoice\",\"components\":[{\"name\":\"btcDepositId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"recipient\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"encodeTotalSupplyUpdate\",\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"delta\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"equalBytes\",\"inputs\":[{\"name\":\"one\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"two\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"getMintInvoiceHash\",\"inputs\":[{\"name\":\"invoice\",\"type\":\"tuple\",\"internalType\":\"structstBTC.MintInvoice\",\"components\":[{\"name\":\"btcDepositId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"recipient\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPooledBTCByShares\",\"inputs\":[{\"name\":\"sharesAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getShares\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getSharesByPooledBTC\",\"inputs\":[{\"name\":\"btcAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTotalSupplyUpdateHash\",\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"delta\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_network\",\"type\":\"uint8\",\"internalType\":\"enumBitcoinNetworkEncoder.Network\"},{\"name\":\"_validatorRegistry\",\"type\":\"address\",\"internalType\":\"contractValidatorRegistry\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_validatorRegistry\",\"type\":\"address\",\"internalType\":\"contractValidatorRegistry\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"minWithdrawAmount\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"mint\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_recipient\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_btcDepositId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"mint\",\"inputs\":[{\"name\":\"invoice\",\"type\":\"tuple\",\"internalType\":\"structstBTC.MintInvoice\",\"components\":[{\"name\":\"btcDepositId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"recipient\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"mintRewards\",\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"delta\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"mintRewards\",\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"delta\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"network\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"enumBitcoinNetworkEncoder.Network\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"polymodStep\",\"inputs\":[{\"name\":\"pre\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"prefixChk\",\"inputs\":[{\"name\":\"prefix\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"redeem\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"BTCAddress\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"redeemCounter\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setMinWithdrawAmount\",\"inputs\":[{\"name\":\"_minWithdrawAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalShares\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalSupplyUpdateNonce\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unpause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"validateBase58Checksum\",\"inputs\":[{\"name\":\"btcAddress\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"validateBech32Checksum\",\"inputs\":[{\"name\":\"btcAddress\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"validateBitcoinAddress\",\"inputs\":[{\"name\":\"network\",\"type\":\"uint8\",\"internalType\":\"enumBitcoinNetworkEncoder.Network\"},{\"name\":\"BTCAddress\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"validatorRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractValidatorRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"verify\",\"inputs\":[{\"name\":\"px\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"rx\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"s\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"m\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"pure\"},{\"type\":\"event\",\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"spender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"MintBtcEvent\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"_btcDepositId\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RedeemBtcEvent\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"_BTCAddress\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TotalSupplyUpdatedEvent\",\"inputs\":[{\"name\":\"_nonce\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"_totalBTCSupply\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"_totalShares\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Transfer\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"ERC20InsufficientAllowance\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"allowance\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"needed\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ERC20InsufficientBalance\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"needed\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ERC20InvalidApprover\",\"inputs\":[{\"name\":\"approver\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC20InvalidReceiver\",\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC20InvalidSender\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC20InvalidSpender\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"EnforcedPause\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ExpectedPause\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidInitialization\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotInitializing\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OwnableInvalidOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OwnableUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]}]",
	Bin: "0x6080604052348015600f57600080fd5b50614a638061001f6000396000f3fe608060405234801561001057600080fd5b50600436106102d65760003560e01c80637b8d3cb411610182578063af7b8170116100e9578063dd62ed3e116100a2578063e737557f1161007c578063e737557f1461066b578063f04da65b146106a4578063f2fde38b146106cd578063f376ebbb146106e057600080fd5b8063dd62ed3e14610632578063e07fbd0014610645578063e0a046101461065857600080fd5b8063af7b8170146105ca578063af7f131f146105dd578063c4d66de8146105e6578063c87b7a23146105f9578063d354c65d1461060c578063d3b6d7f51461061f57600080fd5b8063943a21ab1161013b578063943a21ab1461056d57806395d89b41146105805780639647ea37146105885780639fd956871461059b578063a7ce4565146105ae578063a9059cbb146105b757600080fd5b80637b8d3cb4146104d557806380239a04146104e857806380cf79c8146104fb5780638456cb591461050e5780638c659bf2146105165780638da5cb5b1461052957600080fd5b80633f4ba83a116102415780635abdb0dc116101fa5780636739afca116101d45780636739afca1461048657806370a08231146104a7578063715018a6146104ba578063780f8df3146104c257600080fd5b80635abdb0dc146104295780635c975abb1461043c578063603c6a671461045457600080fd5b80633f4ba83a146103d657806342193473146103de578063457e1a49146103e75780634cac70ff146103f05780635187599d1461040357806355573c771461041657600080fd5b806321172f3b1161029357806321172f3b1461037357806323b872dd1461038857806324b76fd51461039b5780632792949d146103ae578063313ce567146103b95780633a98ef39146103ce57600080fd5b8063026034f0146102db57806306fdde0314610313578063095ea7b3146103285780630b2aeb6c1461033b5780630fde6e551461034e57806318160ddd14610361575b600080fd5b6102fe6102e9366004613fb6565b60066020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61031b6106f3565b60405161030a919061401f565b6102fe610336366004614047565b6107b6565b6102fe6103493660046140c3565b6107d0565b6102fe61035c366004614115565b610afd565b6004545b60405190815260200161030a565b610386610381366004614147565b610c65565b005b6102fe610396366004614199565b610eaa565b6103866103a93660046141da565b610ece565b6103656305f5e10081565b60085b60405160ff909116815260200161030a565b600554610365565b610386611024565b61036561022281565b61036560015481565b6102fe6103fe3660046142ba565b611036565b610386610411366004614321565b6110be565b610365610424366004613fb6565b611252565b610386610437366004613fb6565b61129d565b6000805160206149d48339815191525460ff166102fe565b61031b604051806040016040528060138152602001725354524f4f4d5f4d494e545f494e564f49434560681b81525081565b60005461049a90600160a01b900460ff1681565b60405161030a919061436e565b6103656104b5366004614396565b611322565b61038661135f565b6103866104d03660046143b3565b611371565b6103bc6104e33660046143da565b611391565b6103656104f6366004614404565b611776565b610365610509366004613fb6565b611825565b6103866118e5565b61031b610524366004614404565b6118f5565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03165b6040516001600160a01b03909116815260200161030a565b61038661057b366004614404565b61193a565b61031b611aa4565b6102fe610596366004614426565b611ae3565b6103866105a936600461447f565b612019565b61036560025481565b6102fe6105c5366004614047565b61210b565b6102fe6105d83660046144b9565b612119565b61036560035481565b6103866105f4366004614396565b612174565b610365610607366004613fb6565b6121a7565b6102fe61061a3660046144ed565b6121e8565b61036561062d3660046144b9565b612819565b610365610640366004614535565b612903565b610365610653366004614553565b61294d565b61031b610666366004614553565b6129f4565b61031b6040518060400160405280601a8152602001795354524f4f4d5f5550444154455f544f54414c5f535550504c5960301b81525081565b6103656106b2366004614396565b6001600160a01b031660009081526007602052604090205490565b6103866106db366004614396565b612a57565b600054610555906001600160a01b031681565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0380546060916000805160206149b4833981519152916107329061456f565b80601f016020809104026020016040519081016040528092919081815260200182805461075e9061456f565b80156107ab5780601f10610780576101008083540402835291602001916107ab565b820191906000526020600020905b81548152906001019060200180831161078e57829003601f168201915b505050505091505090565b6000336107c4818585612a95565b60019150505b92915050565b6000606061081584848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250611036915050565b15610824576000915050610af6565b610856604051806040016040528060118152602001700a7261772061646472657373206461746160781b815250612aa2565b61089584848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612ae592505050565b60006108a086612b28565b905060006108ad87612c46565b905060006108ba88612d20565b90506109096108cd60016000898b6145a3565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250611036915050565b806109b4575061095c61092060016000898b6145a3565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250611036915050565b80156109b4575080516109b290610976906000898b6145a3565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250611036915050565b155b15610a3657601a8610806109c85750602386115b80610a0f5750610a0d87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061211992505050565b155b15610a21576000945050505050610af6565b610a2b8787611ae3565b945050505050610af6565b8051610a4990610976906000898b6145a3565b15610aed576002886003811115610a6257610a62614358565b03610a8d57602b861080610a765750604086115b15610a88576000945050505050610af6565b610aae565b602a861080610a9c5750603e86115b15610aae576000945050505050610af6565b610a2b87878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506121e892505050565b60009450505050505b9392505050565b60006401000003d01985101580610b1a57506401000003d0198410155b80610b37575070014551231950b75fc4402da1732fc9bebe198310155b15610b4457506000610c5d565b600080610b5086612e04565b9150915080610b6457600092505050610c5d565b6000610b71878987612e5f565b9050600070014551231950b75fc4402da1732fc9bebe19898809610ba79070014551231950b75fc4402da1732fc9bebe196145f9565b9050600070014551231950b75fc4402da1732fc9bebe198a8409610bdd9070014551231950b75fc4402da1732fc9bebe196145f9565b60408051600080825260208201808452869052601b92820192909252606081018d9052608081018390529192509060019060a0016020604051602081039080840390855afa158015610c33573d6000803e3d6000fd5b505050602060405103519050856001600160a01b0316816001600160a01b03161496505050505050505b949350505050565b610c6d612f31565b6040518060400160405280601a8152602001795354524f4f4d5f5550444154455f544f54414c5f535550504c5960301b815250610caa85856118f5565b6000546040516311ee58a960e01b8152859185916001600160a01b03909116906311ee58a990610ce4908790879087908790600401614635565b602060405180830381865afa158015610d01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d25919061467a565b610d4a5760405162461bcd60e51b8152600401610d419061469c565b60405180910390fd5b6003548814610d6b5760405162461bcd60e51b8152600401610d41906146e7565b600160036000828254610d7e9190614728565b90915550506000879003610dc15760405162461bcd60e51b815260206004820152600a602482015269064656c746120697320360b41b6044820152606401610d41565b6000610dcd8989611776565b60008181526006602052604090205490915060ff1615610e2a5760405162461bcd60e51b815260206004820152601860248201527715541110551157d053149150511657d41493d0d154d4d15160421b6044820152606401610d41565b6000818152600660205260408120805460ff19166001179055600480548a9290610e55908490614728565b9091555050600454600554604080518c815260208101939093528201527f339ea31e567d96bc11133446c07d2afa7b1a67accc22bd1b6149fd58d1b934409060600160405180910390a1505050505050505050565b600033610eb8858285612f62565b610ec3858585612fc8565b506001949350505050565b610ed6612f31565b600154831015610f4e5760405162461bcd60e51b815260206004820152603e60248201527f5468652073656e742076616c7565206d7573742062652067726561746572206f60448201527f7220657175616c20746f206d696e20776974686472617720616d6f756e7400006064820152608401610d41565b600054610f6690600160a01b900460ff1683836107d0565b610fbc5760405162461bcd60e51b815260206004820152602160248201527f5468652073656e74204254432061646472657373206973206e6f742076616c696044820152601960fa1b6064820152608401610d41565b610fc63384613027565b600160026000828254610fd99190614728565b909155505060025460405133917f83c16822c691a011b471d2653b84faff158a050c4e117390a6c008ecdefcc14e916110179186918691899161473b565b60405180910390a2505050565b61102c613061565b6110346130bc565b565b60008151835114611049575060006107ca565b60005b83518110156110b45782818151811061106757611067614762565b602001015160f81c60f81b6001600160f81b03191684828151811061108e5761108e614762565b01602001516001600160f81b031916146110ac5760009150506107ca565b60010161104c565b5060019392505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156111035750825b90506000826001600160401b0316600114801561111f5750303b155b90508115801561112d575080155b1561114b5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561117557845460ff60401b1916600160401b1785555b6111c26040518060400160405280600e81526020016d29ba3937b7b6902134ba31b7b4b760911b81525060405180604001604052806005815260200164737442544360d81b81525061311c565b6111ca61312e565b6111d386612174565b611b586001556000805488919060ff60a01b1916600160a01b8360038111156111fe576111fe614358565b0217905550831561124957845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b60008060055411801561126757506000600454115b6112835760405162461bcd60e51b8152600401610d4190614778565b60055460045461129390846147c4565b6107ca91906147db565b6112a5613061565b61022281101561131d5760405162461bcd60e51b815260206004820152603c60248201527f4d696e20776974686472617720616d6f756e742073686f756c6420626520677260448201527f6561746572206f7220657175616c20746f2064757374206c696d6974000000006064820152608401610d41565b600155565b600060055460000361133657506000919050565b6005546004546001600160a01b03841660009081526007602052604090205461129391906147c4565b611367613061565b611034600061313e565b611379612f31565b611381613061565b61138c8383836131af565b505050565b6000600d60fc1b6001600160f81b03198316016113b05750600f919050565b606760f91b6001600160f81b03198316016113cd5750600a919050565b60cd60f81b6001600160f81b03198316016113ea57506011919050565b603360fa1b6001600160f81b031983160161140757506015919050565b60cb60f81b6001600160f81b031983160161142457506014919050565b606560f91b6001600160f81b03198316016114415750601a919050565b601960fb1b6001600160f81b031983160161145e57506007919050565b60c960f81b6001600160f81b031983160161147b5750601e919050565b60c760f81b6001600160f81b031983160161149857506005919050565b608f60f81b6001600160f81b03198316016114b557506000919050565b600960fc1b6001600160f81b03198316016114d257506001919050565b604360f91b6001600160f81b03198316016114ef57506002919050565b604760f91b6001600160f81b031983160161150c57506003919050565b608760f81b6001600160f81b031983160161152957506004919050565b601160fb1b6001600160f81b031983160161154657506006919050565b609960f81b6001600160f81b031983160161156357506008919050565b604d60f91b6001600160f81b031983160161158057506009919050565b602360fa1b6001600160f81b031983160161159d5750600b919050565b604560f91b6001600160f81b03198316016115ba5750600c919050565b602760fa1b6001600160f81b03198316016115d75750600d919050565b608960f81b6001600160f81b03198316016115f45750600e919050565b608d60f81b6001600160f81b031983160161161157506010919050565b604b60f91b6001600160f81b031983160161162e57506012919050565b604960f91b6001600160f81b031983160161164b57506013919050565b609560f81b6001600160f81b031983160161166857506016919050565b601360fb1b6001600160f81b031983160161168557506017919050565b609d60f81b6001600160f81b03198316016116a257506018919050565b609b60f81b6001600160f81b03198316016116bf57506019919050565b609360f81b6001600160f81b03198316016116dc5750601b919050565b608b60f81b6001600160f81b03198316016116f95750601c919050565b609f60f81b6001600160f81b03198316016117165750601d919050565b602560fa1b6001600160f81b03198316016117335750601f919050565b6117656040518060400160405280601181526020017024b73b30b634b21031b430b930b1ba32b960791b815250612aa2565b61176e8261335c565b5060ff919050565b6000805460408051808201909152601a8152795354524f4f4d5f5550444154455f544f54414c5f535550504c5960301b60208201526001600160a01b039091169063bca0ac06906117c786866118f5565b6040518363ffffffff1660e01b81526004016117e49291906147ef565b602060405180830381865afa158015611801573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af69190614814565b6000601982901c6001601d84901c811614611841576000611847565b632a1462b35b63ffffffff16600382901c600116600114611863576000611869565b633d4233dd5b63ffffffff16600283901c60011660011461188557600061188b565b631ea119fa5b63ffffffff16600184811c8116146118a45760006118aa565b6326508e6d5b63ffffffff166001808616146118c15760006118c7565b633b6a57b25b63ffffffff166005886301ffffff16901b1818181818915050919050565b6118ed613061565b6110346133a5565b604080516020810184905290810182905230606090811b6bffffffffffffffffffffffff19168183015290607401604051602081830303815290604052905092915050565b611942612f31565b61194a613061565b600354821461196b5760405162461bcd60e51b8152600401610d41906146e7565b60016003600082825461197e9190614728565b909155505060008190036119c15760405162461bcd60e51b815260206004820152600a602482015269064656c746120697320360b41b6044820152606401610d41565b60006119cd8383611776565b60008181526006602052604090205490915060ff1615611a2a5760405162461bcd60e51b815260206004820152601860248201527715541110551157d053149150511657d41493d0d154d4d15160421b6044820152606401610d41565b6000818152600660205260408120805460ff1916600117905560048054849290611a55908490614728565b90915550506004546005546040805186815260208101939093528201527f339ea31e567d96bc11133446c07d2afa7b1a67accc22bd1b6149fd58d1b934409060600160405180910390a1505050565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0480546060916000805160206149b4833981519152916107329061456f565b600080611b2584848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506133ee92505050565b9050611b5e6040518060400160405280601681526020017576616c6964617465426173653538436865636b73756d60501b815250612aa2565b611b86604051806040016040528060078152602001661c185e5b1bd85960ca1b815250612aa2565b611b8f81612ae5565b8051601914611ba25760009150506107ca565b60408051600180825281830190925260009160208201818036833701905050905081600081518110611bd657611bd6614762565b602001015160f81c60f81b81600081518110611bf457611bf4614762565b60200101906001600160f81b031916908160001a905350611c33604051806040016040528060078152602001663b32b939b4b7b760c91b815250612aa2565b611c3c81612ae5565b6000600460018451611c4e91906145f9565b611c5891906145f9565b6001600160401b03811115611c6f57611c6f61420c565b6040519080825280601f01601f191660200182016040528015611c99576020820181803683370190505b50905060005b600460018551611caf91906145f9565b611cb991906145f9565b811015611d185783611ccc826001614728565b81518110611cdc57611cdc614762565b602001015160f81c60f81b828281518110611cf957611cf9614762565b60200101906001600160f81b031916908160001a905350600101611c9f565b50611d41604051806040016040528060078152602001661c185e5b1bd85960ca1b815250612aa2565b611d4a81612ae5565b8051601414611d5f57600093505050506107ca565b60408051600480825281830190925260009160208201818036833701905050905060005b6004811015611df257848160048751611d9c91906145f9565b611da69190614728565b81518110611db657611db6614762565b602001015160f81c60f81b828281518110611dd357611dd3614762565b60200101906001600160f81b031916908160001a905350600101611d83565b50611e1c60405180604001604052806008815260200167636865636b73756d60c01b815250612aa2565b611e2581612ae5565b60006002808585604051602001611e3d92919061482d565b60408051601f1981840301815290829052611e579161485c565b602060405180830381855afa158015611e74573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611e979190614814565b604051602001611ea991815260200190565b60408051601f1981840301815290829052611ec39161485c565b602060405180830381855afa158015611ee0573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611f039190614814565b9050611f396040518060400160405280601381526020017263616c63756c6174656420636865636b73756d60681b815250612aa2565b611f42816133f9565b8060031a60f81b82600381518110611f5c57611f5c614762565b01602001516001600160f81b031916188160021a60f81b83600281518110611f8657611f86614762565b01602001516001600160f81b031916188260011a60f81b84600181518110611fb057611fb0614762565b01602001516001600160f81b031916188360001a60f81b85600081518110611fda57611fda614762565b602001015160f81c60f81b181717176001600160f81b031916600060f81b1461200b576000955050505050506107ca565b506001979650505050505050565b612021612f31565b604051806040016040528060138152602001725354524f4f4d5f4d494e545f494e564f49434560681b815250612056846129f4565b6000546040516311ee58a960e01b8152859185916001600160a01b03909116906311ee58a990612090908790879087908790600401614635565b602060405180830381865afa1580156120ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d1919061467a565b6120ed5760405162461bcd60e51b8152600401610d419061469c565b611249604088018035906121049060208b01614396565b89356131af565b6000336107c4818585612fc8565b6000805b825181101561216b57600083828151811061213a5761213a614762565b016020015160f81c9050600061214f8261343e565b90508061216157506000949350505050565b505060010161211d565b50600192915050565b61217c6134e7565b61218533613530565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806005541180156121bc57506000600454115b6121d85760405162461bcd60e51b8152600401610d4190614778565b60045460055461129390846147c4565b60006122286040518060400160405280601981526020017f0a76616c69646174652062656368333220636865636b73756d00000000000000815250612aa2565b612250604051806040016040528060078152602001666164647265737360c81b815250612aa2565b61225982612aa2565b81518290600811156122985761228f604051806040016040528060098152602001681d1bdbc81cda1bdc9d60ba1b815250612aa2565b50600092915050565b605a815111156122cb5761228f60405180604001604052806008815260200167746f6f206c6f6e6760c01b815250612aa2565b50816000805b8251811015612315578281815181106122ec576122ec614762565b01602001516001600160f81b031916603160f81b0361230d57809150612315565b6001016122d1565b50806000036123555761234b6040518060400160405280600c81526020016b37379039b2b830b930ba37b960a11b815250612aa2565b5060009392505050565b8060010361238c5761234b6040518060400160405280600e81526020016d0dad2e6e6d2dcce40e0e4caccd2f60931b815250612aa2565b6000816001600160401b038111156123a6576123a661420c565b6040519080825280601f01601f1916602001820160405280156123d0576020820181803683370190505b509050600060018385516123e491906145f9565b6123ee91906145f9565b6001600160401b038111156124055761240561420c565b6040519080825280601f01601f19166020018201604052801561242f576020820181803683370190505b50905060005b8381101561248b5784818151811061244f5761244f614762565b602001015160f81c60f81b83828151811061246c5761246c614762565b60200101906001600160f81b031916908160001a905350600101612435565b5060005b81518110156124fa57846124a38583614728565b6124ae906001614728565b815181106124be576124be614762565b602001015160f81c60f81b8282815181106124db576124db614762565b60200101906001600160f81b031916908160001a90535060010161248f565b50612522604051806040016040528060068152602001650e0e4caccd2f60d31b815250612aa2565b61252b82612ae5565b600681511015612570576125646040518060400160405280600e81526020016d19185d18481d1bdbc81cda1bdc9d60921b815250612aa2565b50600095945050505050565b600061257b83612819565b9050806000036125c1576125b46040518060400160405280600e81526020016d0d2dcecc2d8d2c840e0e4caccd2f60931b815250612aa2565b5060009695505050505050565b600082516001600160401b038111156125dc576125dc61420c565b6040519080825280601f01601f191660200182016040528015612606576020820181803683370190505b50905060005b835181101561275f57600084828151811061262957612629614762565b01602001516001600160f81b0319169050600061264582611391565b905060fe1960ff8216016126fd57612685604051806040016040528060118152602001703ab735b737bbb71031b430b930b1ba32b960791b815250612aa2565b61268e83613541565b6126978261335c565b6126ec6040518060400160405280600481526020016331b430b960e11b815250836040516020016126d891906001600160f81b031991909116815260010190565b604051602081830303815290604052613586565b5060009a9950505050505050505050565b8060ff1661270a86611825565b87519118955061271b846006614728565b10612727575050612757565b8060f81b84848151811061273d5761273d614762565b60200101906001600160f81b031916908160001a90535050505b60010161260c565b5061278660405180604001604052806005815260200164776f72647360d81b815250612aa2565b61278f81612ae5565b632bc830a382141580156127a4575081600114155b156127e9576127db6040518060400160405280601081526020016f696e76616c696420636865636b73756d60801b815250836135cb565b506000979650505050505050565b61200b6040518060400160405280600e81526020016d76616c696420636865636b73756d60901b815250836135cb565b60006001815b83518110156128ad57600084828151811061283c5761283c614762565b016020015160f81c905060218110806128555750607e81115b156128935760405162461bcd60e51b815260206004820152600e60248201526d092dcecc2d8d2c840e0e4caccd2f60931b6044820152606401610d41565b600581901c6128a184611825565b1892505060010161281f565b506128b781611825565b905060005b83518110156128fc5760008482815181106128d9576128d9614762565b016020015160f81c9050601f81166128f084611825565b189250506001016128bc565b5092915050565b6001600160a01b0391821660009081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace016020908152604080832093909416825291909152205490565b600080546040805180820190915260138152725354524f4f4d5f4d494e545f494e564f49434560681b60208201526001600160a01b039091169063bca0ac0690612996856129f4565b6040518363ffffffff1660e01b81526004016129b39291906147ef565b602060405180830381865afa1580156129d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ca9190614814565b6060612a066040830160208401614396565b604080516bffffffffffffffffffffffff19606093841b81166020830152918501356034820152843560548201523090921b1660748201526088016040516020818303038152906040529050919050565b612a5f613061565b6001600160a01b038116612a8957604051631e4fbdf760e01b815260006004820152602401610d41565b612a928161313e565b50565b61138c8383836001613610565b612a9281604051602401612ab6919061401f565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b1790526136f8565b612a9281604051602401612af9919061401f565b60408051601f198184030181529190526020810180516001600160e01b03166305f3bfab60e11b1790526136f8565b60606000826003811115612b3e57612b3e614358565b03612b605750506040805180820190915260018152603160f81b602082015290565b6002826003811115612b7457612b74614358565b03612b965750506040805180820190915260018152601960f91b602082015290565b6001826003811115612baa57612baa614358565b03612bcc5750506040805180820190915260018152601960f91b602082015290565b6003826003811115612be057612be0614358565b03612c025750506040805180820190915260018152605360f81b602082015290565b60405162461bcd60e51b8152602060048201526014602482015273556e6b6e6f776e206e6574776f726b207479706560601b6044820152606401610d41565b919050565b60606000826003811115612c5c57612c5c614358565b03612c7e5750506040805180820190915260018152603360f81b602082015290565b6002826003811115612c9257612c92614358565b03612cb45750506040805180820190915260018152606d60f81b602082015290565b6001826003811115612cc857612cc8614358565b03612cea5750506040805180820190915260018152606d60f81b602082015290565b6003826003811115612cfe57612cfe614358565b03612c025750506040805180820190915260018152607360f81b602082015290565b60606000826003811115612d3657612d36614358565b03612d5a57505060408051808201909152600381526262633160e81b602082015290565b6002826003811115612d6e57612d6e614358565b03612d94575050604080518082019091526005815264626372743160d81b602082015290565b6001826003811115612da857612da8614358565b03612dcc57505060408051808201909152600381526274623160e81b602082015290565b6003826003811115612de057612de0614358565b03612c0257505060408051808201909152600381526273623160e81b602082015290565b600080600080612e1385613701565b9150915080612e29575060009485945092505050565b50604080516020808201969096528082019290925280518083038201815260609092019052805193019290922092600192509050565b604080517f7bb52d7a9fef58323eb1bf7a407db382d2f3f2d81bb1224f49fe518f6d48d37c60208201819052918101829052606081018590526080810184905260a081018390526000919070014551231950b75fc4402da1732fc9bebe199060029060c00160408051601f1981840301815290829052612ede9161485c565b602060405180830381855afa158015612efb573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612f1e9190614814565b612f289190614878565b95945050505050565b6000805160206149d48339815191525460ff16156110345760405163d93c066560e01b815260040160405180910390fd5b6000612f6e8484612903565b90506000198114612fc25781811015612fb357604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610d41565b612fc284848484036000613610565b50505050565b6001600160a01b038316612ff257604051634b637e8f60e11b815260006004820152602401610d41565b6001600160a01b03821661301c5760405163ec442f0560e01b815260006004820152602401610d41565b61138c8383836137c6565b6001600160a01b03821661305157604051634b637e8f60e11b815260006004820152602401610d41565b61305d826000836137c6565b5050565b336130937f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146110345760405163118cdaa760e01b8152336004820152602401610d41565b6130c4613997565b6000805160206149d4833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b6131246134e7565b61305d82826139c7565b6131366134e7565b611034613a18565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b600083116131f25760405162461bcd60e51b815260206004820152601060248201526f4d494e545f414d4f554e545f5a45524f60801b6044820152606401610d41565b6132046305f5e1006301406f406147c4565b83106132485760405162461bcd60e51b81526020600482015260136024820152724d494e545f414d4f554e545f544f4f5f42494760681b6044820152606401610d41565b306001600160a01b038316036132a05760405162461bcd60e51b815260206004820152601c60248201527f4d494e545f544f5f5448455f434f4e54524143545f41444452455353000000006044820152606401610d41565b60008181526006602052604090205460ff16156132f85760405162461bcd60e51b81526020600482015260166024820152751352539517d053149150511657d41493d0d154d4d15160521b6044820152606401610d41565b6000818152600660205260409020805460ff1916600117905561331b8284613a39565b60408051848152602081018390526001600160a01b038416917fb73f3e96d1e157f064cb3a8d0abed06bcec05e5515bf7486364c027dab6aa4699101611017565b6040516001600160f81b031982166024820152612a929060440160408051601f198184030181529190526020810180516001600160e01b0316630dc3142560e31b1790526136f8565b6133ad612f31565b6000805160206149d4833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336130fe565b60606107ca82613a6f565b612a928160405160240161340f91815260200190565b60408051601f198184030181529190526020810180516001600160e01b03166327b7cf8560e01b1790526136f8565b60008160ff166049148061345557508160ff16604f145b8061346357508160ff16606c145b1561347057506000919050565b60318260ff1610158015613488575060398260ff1611155b1561349557506001919050565b60418260ff16101580156134ad5750605a8260ff1611155b156134ba57506001919050565b60618260ff16101580156134d25750607a8260ff1611155b156134df57506001919050565b506000919050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661103457604051631afcd79f60e31b815260040160405180910390fd5b6135386134e7565b612a9281613db9565b612a928160405160240161355791815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f82c50f160e01b1790526136f8565b61305d828260405160240161359c9291906147ef565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b1790526136f8565b61305d82826040516024016135e192919061488c565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b1790526136f8565b6000805160206149b48339815191526001600160a01b0385166136495760405163e602df0560e01b815260006004820152602401610d41565b6001600160a01b03841661367357604051634a1406b160e11b815260006004820152602401610d41565b6001600160a01b038086166000908152600183016020908152604080832093881683529290522083905581156136f157836001600160a01b0316856001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040516136e891815260200190565b60405180910390a35b5050505050565b612a9281613dc1565b6000806401000003d01981600782861061372357506000958695509350505050565b60008380613733576137336145cd565b8480613741576137416145cd565b838680613750576137506145cd565b868b09088580613762576137626145cd565b8680613770576137706145cd565b8a8b098a09089050613799816004613789876001614728565b61379391906147db565b86613de2565b9050600060018216156137b5576137b082866145f9565b6137b7565b815b98600198509650505050505050565b6001600160a01b038316613851576000600554600014806137e75750600454155b6137f9576137f4826121a7565b6137fb565b815b9050816004600082825461380f9190614728565b9250508190555080600560008282546138289190614728565b90915550506001600160a01b038316600090815260076020526040902080549091019055613945565b600061385c84611322565b9050818110156138a55760405162461bcd60e51b8152602060048201526014602482015273494e53554646494349454e545f42414c414e434560601b6044820152606401610d41565b60006138b0836121a7565b90506001600160a01b0384166139145782600460008282546138d291906145f9565b9250508190555080600560008282546138eb91906145f9565b90915550506001600160a01b038516600090815260076020526040902080548290039055613942565b6001600160a01b03808616600090815260076020526040808220805485900390559186168152208054820190555b50505b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161398a91815260200190565b60405180910390a3505050565b6000805160206149d48339815191525460ff1661103457604051638dfc202b60e01b815260040160405180910390fd5b6139cf6134e7565b6000805160206149b48339815191527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace03613a0984826148f5565b5060048101612fc283826148f5565b613a206134e7565b6000805160206149d4833981519152805460ff19169055565b6001600160a01b038216613a635760405163ec442f0560e01b815260006004820152602401610d41565b61305d600083836137c6565b80516060906031906000805b8281108015613aa2575083868281518110613a9857613a98614762565b016020015160f81c145b15613ab35760019182019101613a7b565b5060008080806117e361209f8702046001016002026001600160401b03811115613adf57613adf61420c565b6040519080825280601f01601f191660200182016040528015613b09576020820181803683370190505b5090506000600460038801046001600160401b03811115613b2c57613b2c61420c565b604051908082528060200260200182016040528015613b55578160200160208202803683370190505b50905060005b8a51811015613c775760008b8281518110613b7857613b78614762565b602001015160f81c60f81b9050613ba76040518060600160405280603a81526020016149f4603a913982613eab565b909650945084613bf05760405162461bcd60e51b81526020600482015260146024820152731a5b9d985b1a590818985cd94d4e08191a59da5d60621b6044820152606401610d41565b8251600019015b60008112613c6d5786848281518110613c1257613c12614762565b602002602001015163ffffffff16603a026001600160401b0316019750602088901c96508763ffffffff16848281518110613c4f57613c4f614762565b63ffffffff9092166020928302919091019091015260001901613bf7565b5050600101613b5b565b50600860038816026001600160401b038116600003613c94575060205b600719016000805b8351811015613d3e575b6020836001600160401b03161015613d3257826001600160401b0316848281518110613cd457613cd4614762565b602002602001015163ffffffff16901c60f81b858381518110613cf957613cf9614762565b60200101906001600160f81b031916908160001a90535060019091019060086001600160401b03841610613d3257600883039250613ca6565b60189250600101613c9c565b50875b8451811015613d9c57600060f81b858281518110613d6157613d61614762565b01602001516001600160f81b0319161115613d9457613d83858a830384613f0e565b9d9c50505050505050505050505050565b600101613d41565b50613da984600083613f0e565b9c9b505050505050505050505050565b612a5f6134e7565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b600081600003613e265760405162461bcd60e51b815260206004820152600f60248201526e4d6f64756c7573206973207a65726f60881b6044820152606401610d41565b83600003613e3657506000610af6565b82600003613e4657506001610af6565b6001600160ff1b5b8015613ea257838186161515870a85848509099150836002820486161515870a85848509099150836004820486161515870a85848509099150836008820486161515870a8584850909915060109004613e4e565b50949350505050565b60008060005b8451811015613efe57836001600160f81b031916858281518110613ed757613ed7614762565b01602001516001600160f81b03191603613ef657915060019050613f07565b600101613eb1565b50600080915091505b9250929050565b606060008383036001600160401b03811115613f2c57613f2c61420c565b6040519080825280601f01601f191660200182016040528015613f56576020820181803683370190505b50905060005b848403811015613ea2578585820181518110613f7a57613f7a614762565b602001015160f81c60f81b828281518110613f9757613f97614762565b60200101906001600160f81b031916908160001a905350600101613f5c565b600060208284031215613fc857600080fd5b5035919050565b60005b83811015613fea578181015183820152602001613fd2565b50506000910152565b6000815180845261400b816020860160208601613fcf565b601f01601f19169290920160200192915050565b602081526000610af66020830184613ff3565b6001600160a01b0381168114612a9257600080fd5b6000806040838503121561405a57600080fd5b823561406581614032565b946020939093013593505050565b803560048110612c4157600080fd5b60008083601f84011261409457600080fd5b5081356001600160401b038111156140ab57600080fd5b602083019150836020828501011115613f0757600080fd5b6000806000604084860312156140d857600080fd5b6140e184614073565b925060208401356001600160401b038111156140fc57600080fd5b61410886828701614082565b9497909650939450505050565b6000806000806080858703121561412b57600080fd5b5050823594602084013594506040840135936060013592509050565b6000806000806060858703121561415d57600080fd5b843593506020850135925060408501356001600160401b0381111561418157600080fd5b61418d87828801614082565b95989497509550505050565b6000806000606084860312156141ae57600080fd5b83356141b981614032565b925060208401356141c981614032565b929592945050506040919091013590565b6000806000604084860312156141ef57600080fd5b8335925060208401356001600160401b038111156140fc57600080fd5b634e487b7160e01b600052604160045260246000fd5b6000806001600160401b0384111561423c5761423c61420c565b50604051601f19601f85018116603f011681018181106001600160401b038211171561426a5761426a61420c565b60405283815290508082840185101561428257600080fd5b83836020830137600060208583010152509392505050565b600082601f8301126142ab57600080fd5b610af683833560208501614222565b600080604083850312156142cd57600080fd5b82356001600160401b038111156142e357600080fd5b6142ef8582860161429a565b92505060208301356001600160401b0381111561430b57600080fd5b6143178582860161429a565b9150509250929050565b6000806040838503121561433457600080fd5b61433d83614073565b9150602083013561434d81614032565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b602081016004831061439057634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082840312156143a857600080fd5b8135610af681614032565b6000806000606084860312156143c857600080fd5b8335925060208401356141c981614032565b6000602082840312156143ec57600080fd5b81356001600160f81b031981168114610af657600080fd5b6000806040838503121561441757600080fd5b50508035926020909101359150565b6000806020838503121561443957600080fd5b82356001600160401b0381111561444f57600080fd5b61445b85828601614082565b90969095509350505050565b60006060828403121561447957600080fd5b50919050565b60008060006080848603121561449457600080fd5b61449e8585614467565b925060608401356001600160401b038111156140fc57600080fd5b6000602082840312156144cb57600080fd5b81356001600160401b038111156144e157600080fd5b610c5d8482850161429a565b6000602082840312156144ff57600080fd5b81356001600160401b0381111561451557600080fd5b8201601f8101841361452657600080fd5b610c5d84823560208401614222565b6000806040838503121561454857600080fd5b823561433d81614032565b60006060828403121561456557600080fd5b610af68383614467565b600181811c9082168061458357607f821691505b60208210810361447957634e487b7160e01b600052602260045260246000fd5b600080858511156145b357600080fd5b838611156145c057600080fd5b5050820193919092039150565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156107ca576107ca6145e3565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6060815260006146486060830187613ff3565b828103602084015261465a8187613ff3565b9050828103604084015261466f81858761460c565b979650505050505050565b60006020828403121561468c57600080fd5b81518015158114610af657600080fd5b6020808252602b908201527f56616c696461746f724d65737361676552656365697665723a20494e56414c4960408201526a445f5349474e415455524560a81b606082015260800190565b60208082526021908201527f496e76616c69642075706461746520746f74616c20737570706c79206e6f6e636040820152606560f81b606082015260800190565b808201808211156107ca576107ca6145e3565b60608152600061474f60608301868861460c565b6020830194909452506040015292915050565b634e487b7160e01b600052603260045260246000fd5b6020808252602c908201527f73744254433a20496e76616c696420746f74616c536861726573206f7220746f60408201526b74616c506f6f6c656442544360a01b606082015260800190565b80820281158282048414176107ca576107ca6145e3565b6000826147ea576147ea6145cd565b500490565b6040815260006148026040830185613ff3565b8281036020840152612f288185613ff3565b60006020828403121561482657600080fd5b5051919050565b6000835161483f818460208801613fcf565b835190830190614853818360208801613fcf565b01949350505050565b6000825161486e818460208701613fcf565b9190910192915050565b600082614887576148876145cd565b500690565b60408152600061489f6040830185613ff3565b90508260208301529392505050565b601f82111561138c57806000526020600020601f840160051c810160208510156148d55750805b601f840160051c820191505b818110156136f157600081556001016148e1565b81516001600160401b0381111561490e5761490e61420c565b6149228161491c845461456f565b846148ae565b6020601f821160018114614956576000831561493e5750848201515b600019600385901b1c1916600184901b1784556136f1565b600084815260208120601f198516915b828110156149865787850151825560209485019460019092019101614966565b50848210156149a45786840151600019600387901b60f8161c191681555b50505050600190811b0190555056fe52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f0330031323334353637383941424344454647484a4b4c4d4e505152535455565758595a6162636465666768696a6b6d6e6f707172737475767778797aa2646970667358221220466e57a065681339a9e3c4bb3da4e4e160a3bb220dddd7cb9bd196466d518b1164736f6c634300081b0033",
}

// StBtcABI is the input ABI used to generate the binding from.
// Deprecated: Use StBtcMetaData.ABI instead.
var StBtcABI = StBtcMetaData.ABI

// StBtcBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StBtcMetaData.Bin instead.
var StBtcBin = StBtcMetaData.Bin

// DeployStBtc deploys a new Ethereum contract, binding an instance of StBtc to it.
func DeployStBtc(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StBtc, error) {
	parsed, err := StBtcMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StBtcBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StBtc{StBtcCaller: StBtcCaller{contract: contract}, StBtcTransactor: StBtcTransactor{contract: contract}, StBtcFilterer: StBtcFilterer{contract: contract}}, nil
}

// StBtc is an auto generated Go binding around an Ethereum contract.
type StBtc struct {
	StBtcCaller     // Read-only binding to the contract
	StBtcTransactor // Write-only binding to the contract
	StBtcFilterer   // Log filterer for contract events
}

// StBtcCaller is an auto generated read-only Go binding around an Ethereum contract.
type StBtcCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StBtcTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StBtcTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StBtcFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StBtcFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StBtcSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StBtcSession struct {
	Contract     *StBtc            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StBtcCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StBtcCallerSession struct {
	Contract *StBtcCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// StBtcTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StBtcTransactorSession struct {
	Contract     *StBtcTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StBtcRaw is an auto generated low-level Go binding around an Ethereum contract.
type StBtcRaw struct {
	Contract *StBtc // Generic contract binding to access the raw methods on
}

// StBtcCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StBtcCallerRaw struct {
	Contract *StBtcCaller // Generic read-only contract binding to access the raw methods on
}

// StBtcTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StBtcTransactorRaw struct {
	Contract *StBtcTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStBtc creates a new instance of StBtc, bound to a specific deployed contract.
func NewStBtc(address common.Address, backend bind.ContractBackend) (*StBtc, error) {
	contract, err := bindStBtc(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StBtc{StBtcCaller: StBtcCaller{contract: contract}, StBtcTransactor: StBtcTransactor{contract: contract}, StBtcFilterer: StBtcFilterer{contract: contract}}, nil
}

// NewStBtcCaller creates a new read-only instance of StBtc, bound to a specific deployed contract.
func NewStBtcCaller(address common.Address, caller bind.ContractCaller) (*StBtcCaller, error) {
	contract, err := bindStBtc(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StBtcCaller{contract: contract}, nil
}

// NewStBtcTransactor creates a new write-only instance of StBtc, bound to a specific deployed contract.
func NewStBtcTransactor(address common.Address, transactor bind.ContractTransactor) (*StBtcTransactor, error) {
	contract, err := bindStBtc(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StBtcTransactor{contract: contract}, nil
}

// NewStBtcFilterer creates a new log filterer instance of StBtc, bound to a specific deployed contract.
func NewStBtcFilterer(address common.Address, filterer bind.ContractFilterer) (*StBtcFilterer, error) {
	contract, err := bindStBtc(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StBtcFilterer{contract: contract}, nil
}

// bindStBtc binds a generic wrapper to an already deployed contract.
func bindStBtc(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := StBtcMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StBtc *StBtcRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StBtc.Contract.StBtcCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StBtc *StBtcRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StBtc.Contract.StBtcTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StBtc *StBtcRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StBtc.Contract.StBtcTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StBtc *StBtcCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StBtc.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StBtc *StBtcTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StBtc.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StBtc *StBtcTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StBtc.Contract.contract.Transact(opts, method, params...)
}

// BECH32ALPHABETMAP is a free data retrieval call binding the contract method 0x7b8d3cb4.
//
// Solidity: function BECH32_ALPHABET_MAP(bytes1 char) view returns(uint8)
func (_StBtc *StBtcCaller) BECH32ALPHABETMAP(opts *bind.CallOpts, char [1]byte) (uint8, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "BECH32_ALPHABET_MAP", char)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// BECH32ALPHABETMAP is a free data retrieval call binding the contract method 0x7b8d3cb4.
//
// Solidity: function BECH32_ALPHABET_MAP(bytes1 char) view returns(uint8)
func (_StBtc *StBtcSession) BECH32ALPHABETMAP(char [1]byte) (uint8, error) {
	return _StBtc.Contract.BECH32ALPHABETMAP(&_StBtc.CallOpts, char)
}

// BECH32ALPHABETMAP is a free data retrieval call binding the contract method 0x7b8d3cb4.
//
// Solidity: function BECH32_ALPHABET_MAP(bytes1 char) view returns(uint8)
func (_StBtc *StBtcCallerSession) BECH32ALPHABETMAP(char [1]byte) (uint8, error) {
	return _StBtc.Contract.BECH32ALPHABETMAP(&_StBtc.CallOpts, char)
}

// BTC is a free data retrieval call binding the contract method 0x2792949d.
//
// Solidity: function BTC() view returns(uint256)
func (_StBtc *StBtcCaller) BTC(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "BTC")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BTC is a free data retrieval call binding the contract method 0x2792949d.
//
// Solidity: function BTC() view returns(uint256)
func (_StBtc *StBtcSession) BTC() (*big.Int, error) {
	return _StBtc.Contract.BTC(&_StBtc.CallOpts)
}

// BTC is a free data retrieval call binding the contract method 0x2792949d.
//
// Solidity: function BTC() view returns(uint256)
func (_StBtc *StBtcCallerSession) BTC() (*big.Int, error) {
	return _StBtc.Contract.BTC(&_StBtc.CallOpts)
}

// DUSTLIMIT is a free data retrieval call binding the contract method 0x42193473.
//
// Solidity: function DUST_LIMIT() view returns(uint256)
func (_StBtc *StBtcCaller) DUSTLIMIT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "DUST_LIMIT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DUSTLIMIT is a free data retrieval call binding the contract method 0x42193473.
//
// Solidity: function DUST_LIMIT() view returns(uint256)
func (_StBtc *StBtcSession) DUSTLIMIT() (*big.Int, error) {
	return _StBtc.Contract.DUSTLIMIT(&_StBtc.CallOpts)
}

// DUSTLIMIT is a free data retrieval call binding the contract method 0x42193473.
//
// Solidity: function DUST_LIMIT() view returns(uint256)
func (_StBtc *StBtcCallerSession) DUSTLIMIT() (*big.Int, error) {
	return _StBtc.Contract.DUSTLIMIT(&_StBtc.CallOpts)
}

// MESSAGEMINT is a free data retrieval call binding the contract method 0x603c6a67.
//
// Solidity: function MESSAGE_MINT() view returns(bytes)
func (_StBtc *StBtcCaller) MESSAGEMINT(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "MESSAGE_MINT")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// MESSAGEMINT is a free data retrieval call binding the contract method 0x603c6a67.
//
// Solidity: function MESSAGE_MINT() view returns(bytes)
func (_StBtc *StBtcSession) MESSAGEMINT() ([]byte, error) {
	return _StBtc.Contract.MESSAGEMINT(&_StBtc.CallOpts)
}

// MESSAGEMINT is a free data retrieval call binding the contract method 0x603c6a67.
//
// Solidity: function MESSAGE_MINT() view returns(bytes)
func (_StBtc *StBtcCallerSession) MESSAGEMINT() ([]byte, error) {
	return _StBtc.Contract.MESSAGEMINT(&_StBtc.CallOpts)
}

// MESSAGEUPDATETOTALSUPPLY is a free data retrieval call binding the contract method 0xe737557f.
//
// Solidity: function MESSAGE_UPDATE_TOTAL_SUPPLY() view returns(bytes)
func (_StBtc *StBtcCaller) MESSAGEUPDATETOTALSUPPLY(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "MESSAGE_UPDATE_TOTAL_SUPPLY")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// MESSAGEUPDATETOTALSUPPLY is a free data retrieval call binding the contract method 0xe737557f.
//
// Solidity: function MESSAGE_UPDATE_TOTAL_SUPPLY() view returns(bytes)
func (_StBtc *StBtcSession) MESSAGEUPDATETOTALSUPPLY() ([]byte, error) {
	return _StBtc.Contract.MESSAGEUPDATETOTALSUPPLY(&_StBtc.CallOpts)
}

// MESSAGEUPDATETOTALSUPPLY is a free data retrieval call binding the contract method 0xe737557f.
//
// Solidity: function MESSAGE_UPDATE_TOTAL_SUPPLY() view returns(bytes)
func (_StBtc *StBtcCallerSession) MESSAGEUPDATETOTALSUPPLY() ([]byte, error) {
	return _StBtc.Contract.MESSAGEUPDATETOTALSUPPLY(&_StBtc.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_StBtc *StBtcCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_StBtc *StBtcSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _StBtc.Contract.Allowance(&_StBtc.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_StBtc *StBtcCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _StBtc.Contract.Allowance(&_StBtc.CallOpts, owner, spender)
}

// AlphabetCheck is a free data retrieval call binding the contract method 0xaf7b8170.
//
// Solidity: function alphabetCheck(bytes BTCAddress) pure returns(bool)
func (_StBtc *StBtcCaller) AlphabetCheck(opts *bind.CallOpts, BTCAddress []byte) (bool, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "alphabetCheck", BTCAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AlphabetCheck is a free data retrieval call binding the contract method 0xaf7b8170.
//
// Solidity: function alphabetCheck(bytes BTCAddress) pure returns(bool)
func (_StBtc *StBtcSession) AlphabetCheck(BTCAddress []byte) (bool, error) {
	return _StBtc.Contract.AlphabetCheck(&_StBtc.CallOpts, BTCAddress)
}

// AlphabetCheck is a free data retrieval call binding the contract method 0xaf7b8170.
//
// Solidity: function alphabetCheck(bytes BTCAddress) pure returns(bool)
func (_StBtc *StBtcCallerSession) AlphabetCheck(BTCAddress []byte) (bool, error) {
	return _StBtc.Contract.AlphabetCheck(&_StBtc.CallOpts, BTCAddress)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_StBtc *StBtcCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_StBtc *StBtcSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _StBtc.Contract.BalanceOf(&_StBtc.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_StBtc *StBtcCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _StBtc.Contract.BalanceOf(&_StBtc.CallOpts, account)
}

// BtcDepositIds is a free data retrieval call binding the contract method 0x026034f0.
//
// Solidity: function btcDepositIds(bytes32 ) view returns(bool)
func (_StBtc *StBtcCaller) BtcDepositIds(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "btcDepositIds", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// BtcDepositIds is a free data retrieval call binding the contract method 0x026034f0.
//
// Solidity: function btcDepositIds(bytes32 ) view returns(bool)
func (_StBtc *StBtcSession) BtcDepositIds(arg0 [32]byte) (bool, error) {
	return _StBtc.Contract.BtcDepositIds(&_StBtc.CallOpts, arg0)
}

// BtcDepositIds is a free data retrieval call binding the contract method 0x026034f0.
//
// Solidity: function btcDepositIds(bytes32 ) view returns(bool)
func (_StBtc *StBtcCallerSession) BtcDepositIds(arg0 [32]byte) (bool, error) {
	return _StBtc.Contract.BtcDepositIds(&_StBtc.CallOpts, arg0)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_StBtc *StBtcCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_StBtc *StBtcSession) Decimals() (uint8, error) {
	return _StBtc.Contract.Decimals(&_StBtc.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_StBtc *StBtcCallerSession) Decimals() (uint8, error) {
	return _StBtc.Contract.Decimals(&_StBtc.CallOpts)
}

// EncodeInvoice is a free data retrieval call binding the contract method 0xe0a04610.
//
// Solidity: function encodeInvoice((bytes32,address,uint256) invoice) view returns(bytes)
func (_StBtc *StBtcCaller) EncodeInvoice(opts *bind.CallOpts, invoice StBTCMintInvoice) ([]byte, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "encodeInvoice", invoice)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EncodeInvoice is a free data retrieval call binding the contract method 0xe0a04610.
//
// Solidity: function encodeInvoice((bytes32,address,uint256) invoice) view returns(bytes)
func (_StBtc *StBtcSession) EncodeInvoice(invoice StBTCMintInvoice) ([]byte, error) {
	return _StBtc.Contract.EncodeInvoice(&_StBtc.CallOpts, invoice)
}

// EncodeInvoice is a free data retrieval call binding the contract method 0xe0a04610.
//
// Solidity: function encodeInvoice((bytes32,address,uint256) invoice) view returns(bytes)
func (_StBtc *StBtcCallerSession) EncodeInvoice(invoice StBTCMintInvoice) ([]byte, error) {
	return _StBtc.Contract.EncodeInvoice(&_StBtc.CallOpts, invoice)
}

// EncodeTotalSupplyUpdate is a free data retrieval call binding the contract method 0x8c659bf2.
//
// Solidity: function encodeTotalSupplyUpdate(uint256 nonce, uint256 delta) view returns(bytes)
func (_StBtc *StBtcCaller) EncodeTotalSupplyUpdate(opts *bind.CallOpts, nonce *big.Int, delta *big.Int) ([]byte, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "encodeTotalSupplyUpdate", nonce, delta)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EncodeTotalSupplyUpdate is a free data retrieval call binding the contract method 0x8c659bf2.
//
// Solidity: function encodeTotalSupplyUpdate(uint256 nonce, uint256 delta) view returns(bytes)
func (_StBtc *StBtcSession) EncodeTotalSupplyUpdate(nonce *big.Int, delta *big.Int) ([]byte, error) {
	return _StBtc.Contract.EncodeTotalSupplyUpdate(&_StBtc.CallOpts, nonce, delta)
}

// EncodeTotalSupplyUpdate is a free data retrieval call binding the contract method 0x8c659bf2.
//
// Solidity: function encodeTotalSupplyUpdate(uint256 nonce, uint256 delta) view returns(bytes)
func (_StBtc *StBtcCallerSession) EncodeTotalSupplyUpdate(nonce *big.Int, delta *big.Int) ([]byte, error) {
	return _StBtc.Contract.EncodeTotalSupplyUpdate(&_StBtc.CallOpts, nonce, delta)
}

// EqualBytes is a free data retrieval call binding the contract method 0x4cac70ff.
//
// Solidity: function equalBytes(bytes one, bytes two) pure returns(bool)
func (_StBtc *StBtcCaller) EqualBytes(opts *bind.CallOpts, one []byte, two []byte) (bool, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "equalBytes", one, two)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// EqualBytes is a free data retrieval call binding the contract method 0x4cac70ff.
//
// Solidity: function equalBytes(bytes one, bytes two) pure returns(bool)
func (_StBtc *StBtcSession) EqualBytes(one []byte, two []byte) (bool, error) {
	return _StBtc.Contract.EqualBytes(&_StBtc.CallOpts, one, two)
}

// EqualBytes is a free data retrieval call binding the contract method 0x4cac70ff.
//
// Solidity: function equalBytes(bytes one, bytes two) pure returns(bool)
func (_StBtc *StBtcCallerSession) EqualBytes(one []byte, two []byte) (bool, error) {
	return _StBtc.Contract.EqualBytes(&_StBtc.CallOpts, one, two)
}

// GetMintInvoiceHash is a free data retrieval call binding the contract method 0xe07fbd00.
//
// Solidity: function getMintInvoiceHash((bytes32,address,uint256) invoice) view returns(bytes32)
func (_StBtc *StBtcCaller) GetMintInvoiceHash(opts *bind.CallOpts, invoice StBTCMintInvoice) ([32]byte, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "getMintInvoiceHash", invoice)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetMintInvoiceHash is a free data retrieval call binding the contract method 0xe07fbd00.
//
// Solidity: function getMintInvoiceHash((bytes32,address,uint256) invoice) view returns(bytes32)
func (_StBtc *StBtcSession) GetMintInvoiceHash(invoice StBTCMintInvoice) ([32]byte, error) {
	return _StBtc.Contract.GetMintInvoiceHash(&_StBtc.CallOpts, invoice)
}

// GetMintInvoiceHash is a free data retrieval call binding the contract method 0xe07fbd00.
//
// Solidity: function getMintInvoiceHash((bytes32,address,uint256) invoice) view returns(bytes32)
func (_StBtc *StBtcCallerSession) GetMintInvoiceHash(invoice StBTCMintInvoice) ([32]byte, error) {
	return _StBtc.Contract.GetMintInvoiceHash(&_StBtc.CallOpts, invoice)
}

// GetPooledBTCByShares is a free data retrieval call binding the contract method 0x55573c77.
//
// Solidity: function getPooledBTCByShares(uint256 sharesAmount) view returns(uint256)
func (_StBtc *StBtcCaller) GetPooledBTCByShares(opts *bind.CallOpts, sharesAmount *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "getPooledBTCByShares", sharesAmount)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPooledBTCByShares is a free data retrieval call binding the contract method 0x55573c77.
//
// Solidity: function getPooledBTCByShares(uint256 sharesAmount) view returns(uint256)
func (_StBtc *StBtcSession) GetPooledBTCByShares(sharesAmount *big.Int) (*big.Int, error) {
	return _StBtc.Contract.GetPooledBTCByShares(&_StBtc.CallOpts, sharesAmount)
}

// GetPooledBTCByShares is a free data retrieval call binding the contract method 0x55573c77.
//
// Solidity: function getPooledBTCByShares(uint256 sharesAmount) view returns(uint256)
func (_StBtc *StBtcCallerSession) GetPooledBTCByShares(sharesAmount *big.Int) (*big.Int, error) {
	return _StBtc.Contract.GetPooledBTCByShares(&_StBtc.CallOpts, sharesAmount)
}

// GetShares is a free data retrieval call binding the contract method 0xf04da65b.
//
// Solidity: function getShares(address account) view returns(uint256)
func (_StBtc *StBtcCaller) GetShares(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "getShares", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetShares is a free data retrieval call binding the contract method 0xf04da65b.
//
// Solidity: function getShares(address account) view returns(uint256)
func (_StBtc *StBtcSession) GetShares(account common.Address) (*big.Int, error) {
	return _StBtc.Contract.GetShares(&_StBtc.CallOpts, account)
}

// GetShares is a free data retrieval call binding the contract method 0xf04da65b.
//
// Solidity: function getShares(address account) view returns(uint256)
func (_StBtc *StBtcCallerSession) GetShares(account common.Address) (*big.Int, error) {
	return _StBtc.Contract.GetShares(&_StBtc.CallOpts, account)
}

// GetSharesByPooledBTC is a free data retrieval call binding the contract method 0xc87b7a23.
//
// Solidity: function getSharesByPooledBTC(uint256 btcAmount) view returns(uint256)
func (_StBtc *StBtcCaller) GetSharesByPooledBTC(opts *bind.CallOpts, btcAmount *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "getSharesByPooledBTC", btcAmount)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSharesByPooledBTC is a free data retrieval call binding the contract method 0xc87b7a23.
//
// Solidity: function getSharesByPooledBTC(uint256 btcAmount) view returns(uint256)
func (_StBtc *StBtcSession) GetSharesByPooledBTC(btcAmount *big.Int) (*big.Int, error) {
	return _StBtc.Contract.GetSharesByPooledBTC(&_StBtc.CallOpts, btcAmount)
}

// GetSharesByPooledBTC is a free data retrieval call binding the contract method 0xc87b7a23.
//
// Solidity: function getSharesByPooledBTC(uint256 btcAmount) view returns(uint256)
func (_StBtc *StBtcCallerSession) GetSharesByPooledBTC(btcAmount *big.Int) (*big.Int, error) {
	return _StBtc.Contract.GetSharesByPooledBTC(&_StBtc.CallOpts, btcAmount)
}

// GetTotalSupplyUpdateHash is a free data retrieval call binding the contract method 0x80239a04.
//
// Solidity: function getTotalSupplyUpdateHash(uint256 nonce, uint256 delta) view returns(bytes32)
func (_StBtc *StBtcCaller) GetTotalSupplyUpdateHash(opts *bind.CallOpts, nonce *big.Int, delta *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "getTotalSupplyUpdateHash", nonce, delta)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetTotalSupplyUpdateHash is a free data retrieval call binding the contract method 0x80239a04.
//
// Solidity: function getTotalSupplyUpdateHash(uint256 nonce, uint256 delta) view returns(bytes32)
func (_StBtc *StBtcSession) GetTotalSupplyUpdateHash(nonce *big.Int, delta *big.Int) ([32]byte, error) {
	return _StBtc.Contract.GetTotalSupplyUpdateHash(&_StBtc.CallOpts, nonce, delta)
}

// GetTotalSupplyUpdateHash is a free data retrieval call binding the contract method 0x80239a04.
//
// Solidity: function getTotalSupplyUpdateHash(uint256 nonce, uint256 delta) view returns(bytes32)
func (_StBtc *StBtcCallerSession) GetTotalSupplyUpdateHash(nonce *big.Int, delta *big.Int) ([32]byte, error) {
	return _StBtc.Contract.GetTotalSupplyUpdateHash(&_StBtc.CallOpts, nonce, delta)
}

// MinWithdrawAmount is a free data retrieval call binding the contract method 0x457e1a49.
//
// Solidity: function minWithdrawAmount() view returns(uint256)
func (_StBtc *StBtcCaller) MinWithdrawAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "minWithdrawAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinWithdrawAmount is a free data retrieval call binding the contract method 0x457e1a49.
//
// Solidity: function minWithdrawAmount() view returns(uint256)
func (_StBtc *StBtcSession) MinWithdrawAmount() (*big.Int, error) {
	return _StBtc.Contract.MinWithdrawAmount(&_StBtc.CallOpts)
}

// MinWithdrawAmount is a free data retrieval call binding the contract method 0x457e1a49.
//
// Solidity: function minWithdrawAmount() view returns(uint256)
func (_StBtc *StBtcCallerSession) MinWithdrawAmount() (*big.Int, error) {
	return _StBtc.Contract.MinWithdrawAmount(&_StBtc.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StBtc *StBtcCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StBtc *StBtcSession) Name() (string, error) {
	return _StBtc.Contract.Name(&_StBtc.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StBtc *StBtcCallerSession) Name() (string, error) {
	return _StBtc.Contract.Name(&_StBtc.CallOpts)
}

// Network is a free data retrieval call binding the contract method 0x6739afca.
//
// Solidity: function network() view returns(uint8)
func (_StBtc *StBtcCaller) Network(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "network")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Network is a free data retrieval call binding the contract method 0x6739afca.
//
// Solidity: function network() view returns(uint8)
func (_StBtc *StBtcSession) Network() (uint8, error) {
	return _StBtc.Contract.Network(&_StBtc.CallOpts)
}

// Network is a free data retrieval call binding the contract method 0x6739afca.
//
// Solidity: function network() view returns(uint8)
func (_StBtc *StBtcCallerSession) Network() (uint8, error) {
	return _StBtc.Contract.Network(&_StBtc.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StBtc *StBtcCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StBtc *StBtcSession) Owner() (common.Address, error) {
	return _StBtc.Contract.Owner(&_StBtc.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StBtc *StBtcCallerSession) Owner() (common.Address, error) {
	return _StBtc.Contract.Owner(&_StBtc.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_StBtc *StBtcCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_StBtc *StBtcSession) Paused() (bool, error) {
	return _StBtc.Contract.Paused(&_StBtc.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_StBtc *StBtcCallerSession) Paused() (bool, error) {
	return _StBtc.Contract.Paused(&_StBtc.CallOpts)
}

// PolymodStep is a free data retrieval call binding the contract method 0x80cf79c8.
//
// Solidity: function polymodStep(uint256 pre) pure returns(uint256)
func (_StBtc *StBtcCaller) PolymodStep(opts *bind.CallOpts, pre *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "polymodStep", pre)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PolymodStep is a free data retrieval call binding the contract method 0x80cf79c8.
//
// Solidity: function polymodStep(uint256 pre) pure returns(uint256)
func (_StBtc *StBtcSession) PolymodStep(pre *big.Int) (*big.Int, error) {
	return _StBtc.Contract.PolymodStep(&_StBtc.CallOpts, pre)
}

// PolymodStep is a free data retrieval call binding the contract method 0x80cf79c8.
//
// Solidity: function polymodStep(uint256 pre) pure returns(uint256)
func (_StBtc *StBtcCallerSession) PolymodStep(pre *big.Int) (*big.Int, error) {
	return _StBtc.Contract.PolymodStep(&_StBtc.CallOpts, pre)
}

// PrefixChk is a free data retrieval call binding the contract method 0xd3b6d7f5.
//
// Solidity: function prefixChk(bytes prefix) pure returns(uint256)
func (_StBtc *StBtcCaller) PrefixChk(opts *bind.CallOpts, prefix []byte) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "prefixChk", prefix)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PrefixChk is a free data retrieval call binding the contract method 0xd3b6d7f5.
//
// Solidity: function prefixChk(bytes prefix) pure returns(uint256)
func (_StBtc *StBtcSession) PrefixChk(prefix []byte) (*big.Int, error) {
	return _StBtc.Contract.PrefixChk(&_StBtc.CallOpts, prefix)
}

// PrefixChk is a free data retrieval call binding the contract method 0xd3b6d7f5.
//
// Solidity: function prefixChk(bytes prefix) pure returns(uint256)
func (_StBtc *StBtcCallerSession) PrefixChk(prefix []byte) (*big.Int, error) {
	return _StBtc.Contract.PrefixChk(&_StBtc.CallOpts, prefix)
}

// RedeemCounter is a free data retrieval call binding the contract method 0xa7ce4565.
//
// Solidity: function redeemCounter() view returns(uint256)
func (_StBtc *StBtcCaller) RedeemCounter(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "redeemCounter")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RedeemCounter is a free data retrieval call binding the contract method 0xa7ce4565.
//
// Solidity: function redeemCounter() view returns(uint256)
func (_StBtc *StBtcSession) RedeemCounter() (*big.Int, error) {
	return _StBtc.Contract.RedeemCounter(&_StBtc.CallOpts)
}

// RedeemCounter is a free data retrieval call binding the contract method 0xa7ce4565.
//
// Solidity: function redeemCounter() view returns(uint256)
func (_StBtc *StBtcCallerSession) RedeemCounter() (*big.Int, error) {
	return _StBtc.Contract.RedeemCounter(&_StBtc.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StBtc *StBtcCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StBtc *StBtcSession) Symbol() (string, error) {
	return _StBtc.Contract.Symbol(&_StBtc.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StBtc *StBtcCallerSession) Symbol() (string, error) {
	return _StBtc.Contract.Symbol(&_StBtc.CallOpts)
}

// TotalShares is a free data retrieval call binding the contract method 0x3a98ef39.
//
// Solidity: function totalShares() view returns(uint256)
func (_StBtc *StBtcCaller) TotalShares(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "totalShares")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalShares is a free data retrieval call binding the contract method 0x3a98ef39.
//
// Solidity: function totalShares() view returns(uint256)
func (_StBtc *StBtcSession) TotalShares() (*big.Int, error) {
	return _StBtc.Contract.TotalShares(&_StBtc.CallOpts)
}

// TotalShares is a free data retrieval call binding the contract method 0x3a98ef39.
//
// Solidity: function totalShares() view returns(uint256)
func (_StBtc *StBtcCallerSession) TotalShares() (*big.Int, error) {
	return _StBtc.Contract.TotalShares(&_StBtc.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_StBtc *StBtcCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_StBtc *StBtcSession) TotalSupply() (*big.Int, error) {
	return _StBtc.Contract.TotalSupply(&_StBtc.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_StBtc *StBtcCallerSession) TotalSupply() (*big.Int, error) {
	return _StBtc.Contract.TotalSupply(&_StBtc.CallOpts)
}

// TotalSupplyUpdateNonce is a free data retrieval call binding the contract method 0xaf7f131f.
//
// Solidity: function totalSupplyUpdateNonce() view returns(uint256)
func (_StBtc *StBtcCaller) TotalSupplyUpdateNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "totalSupplyUpdateNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupplyUpdateNonce is a free data retrieval call binding the contract method 0xaf7f131f.
//
// Solidity: function totalSupplyUpdateNonce() view returns(uint256)
func (_StBtc *StBtcSession) TotalSupplyUpdateNonce() (*big.Int, error) {
	return _StBtc.Contract.TotalSupplyUpdateNonce(&_StBtc.CallOpts)
}

// TotalSupplyUpdateNonce is a free data retrieval call binding the contract method 0xaf7f131f.
//
// Solidity: function totalSupplyUpdateNonce() view returns(uint256)
func (_StBtc *StBtcCallerSession) TotalSupplyUpdateNonce() (*big.Int, error) {
	return _StBtc.Contract.TotalSupplyUpdateNonce(&_StBtc.CallOpts)
}

// ValidateBase58Checksum is a free data retrieval call binding the contract method 0x9647ea37.
//
// Solidity: function validateBase58Checksum(string btcAddress) view returns(bool)
func (_StBtc *StBtcCaller) ValidateBase58Checksum(opts *bind.CallOpts, btcAddress string) (bool, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "validateBase58Checksum", btcAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidateBase58Checksum is a free data retrieval call binding the contract method 0x9647ea37.
//
// Solidity: function validateBase58Checksum(string btcAddress) view returns(bool)
func (_StBtc *StBtcSession) ValidateBase58Checksum(btcAddress string) (bool, error) {
	return _StBtc.Contract.ValidateBase58Checksum(&_StBtc.CallOpts, btcAddress)
}

// ValidateBase58Checksum is a free data retrieval call binding the contract method 0x9647ea37.
//
// Solidity: function validateBase58Checksum(string btcAddress) view returns(bool)
func (_StBtc *StBtcCallerSession) ValidateBase58Checksum(btcAddress string) (bool, error) {
	return _StBtc.Contract.ValidateBase58Checksum(&_StBtc.CallOpts, btcAddress)
}

// ValidateBech32Checksum is a free data retrieval call binding the contract method 0xd354c65d.
//
// Solidity: function validateBech32Checksum(string btcAddress) view returns(bool)
func (_StBtc *StBtcCaller) ValidateBech32Checksum(opts *bind.CallOpts, btcAddress string) (bool, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "validateBech32Checksum", btcAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidateBech32Checksum is a free data retrieval call binding the contract method 0xd354c65d.
//
// Solidity: function validateBech32Checksum(string btcAddress) view returns(bool)
func (_StBtc *StBtcSession) ValidateBech32Checksum(btcAddress string) (bool, error) {
	return _StBtc.Contract.ValidateBech32Checksum(&_StBtc.CallOpts, btcAddress)
}

// ValidateBech32Checksum is a free data retrieval call binding the contract method 0xd354c65d.
//
// Solidity: function validateBech32Checksum(string btcAddress) view returns(bool)
func (_StBtc *StBtcCallerSession) ValidateBech32Checksum(btcAddress string) (bool, error) {
	return _StBtc.Contract.ValidateBech32Checksum(&_StBtc.CallOpts, btcAddress)
}

// ValidateBitcoinAddress is a free data retrieval call binding the contract method 0x0b2aeb6c.
//
// Solidity: function validateBitcoinAddress(uint8 network, string BTCAddress) view returns(bool)
func (_StBtc *StBtcCaller) ValidateBitcoinAddress(opts *bind.CallOpts, network uint8, BTCAddress string) (bool, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "validateBitcoinAddress", network, BTCAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidateBitcoinAddress is a free data retrieval call binding the contract method 0x0b2aeb6c.
//
// Solidity: function validateBitcoinAddress(uint8 network, string BTCAddress) view returns(bool)
func (_StBtc *StBtcSession) ValidateBitcoinAddress(network uint8, BTCAddress string) (bool, error) {
	return _StBtc.Contract.ValidateBitcoinAddress(&_StBtc.CallOpts, network, BTCAddress)
}

// ValidateBitcoinAddress is a free data retrieval call binding the contract method 0x0b2aeb6c.
//
// Solidity: function validateBitcoinAddress(uint8 network, string BTCAddress) view returns(bool)
func (_StBtc *StBtcCallerSession) ValidateBitcoinAddress(network uint8, BTCAddress string) (bool, error) {
	return _StBtc.Contract.ValidateBitcoinAddress(&_StBtc.CallOpts, network, BTCAddress)
}

// ValidatorRegistry is a free data retrieval call binding the contract method 0xf376ebbb.
//
// Solidity: function validatorRegistry() view returns(address)
func (_StBtc *StBtcCaller) ValidatorRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "validatorRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorRegistry is a free data retrieval call binding the contract method 0xf376ebbb.
//
// Solidity: function validatorRegistry() view returns(address)
func (_StBtc *StBtcSession) ValidatorRegistry() (common.Address, error) {
	return _StBtc.Contract.ValidatorRegistry(&_StBtc.CallOpts)
}

// ValidatorRegistry is a free data retrieval call binding the contract method 0xf376ebbb.
//
// Solidity: function validatorRegistry() view returns(address)
func (_StBtc *StBtcCallerSession) ValidatorRegistry() (common.Address, error) {
	return _StBtc.Contract.ValidatorRegistry(&_StBtc.CallOpts)
}

// Verify is a free data retrieval call binding the contract method 0x0fde6e55.
//
// Solidity: function verify(uint256 px, uint256 rx, uint256 s, bytes32 m) pure returns(bool)
func (_StBtc *StBtcCaller) Verify(opts *bind.CallOpts, px *big.Int, rx *big.Int, s *big.Int, m [32]byte) (bool, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "verify", px, rx, s, m)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0x0fde6e55.
//
// Solidity: function verify(uint256 px, uint256 rx, uint256 s, bytes32 m) pure returns(bool)
func (_StBtc *StBtcSession) Verify(px *big.Int, rx *big.Int, s *big.Int, m [32]byte) (bool, error) {
	return _StBtc.Contract.Verify(&_StBtc.CallOpts, px, rx, s, m)
}

// Verify is a free data retrieval call binding the contract method 0x0fde6e55.
//
// Solidity: function verify(uint256 px, uint256 rx, uint256 s, bytes32 m) pure returns(bool)
func (_StBtc *StBtcCallerSession) Verify(px *big.Int, rx *big.Int, s *big.Int, m [32]byte) (bool, error) {
	return _StBtc.Contract.Verify(&_StBtc.CallOpts, px, rx, s, m)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_StBtc *StBtcTransactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_StBtc *StBtcSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _StBtc.Contract.Approve(&_StBtc.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_StBtc *StBtcTransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _StBtc.Contract.Approve(&_StBtc.TransactOpts, spender, value)
}

// Initialize is a paid mutator transaction binding the contract method 0x5187599d.
//
// Solidity: function initialize(uint8 _network, address _validatorRegistry) returns()
func (_StBtc *StBtcTransactor) Initialize(opts *bind.TransactOpts, _network uint8, _validatorRegistry common.Address) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "initialize", _network, _validatorRegistry)
}

// Initialize is a paid mutator transaction binding the contract method 0x5187599d.
//
// Solidity: function initialize(uint8 _network, address _validatorRegistry) returns()
func (_StBtc *StBtcSession) Initialize(_network uint8, _validatorRegistry common.Address) (*types.Transaction, error) {
	return _StBtc.Contract.Initialize(&_StBtc.TransactOpts, _network, _validatorRegistry)
}

// Initialize is a paid mutator transaction binding the contract method 0x5187599d.
//
// Solidity: function initialize(uint8 _network, address _validatorRegistry) returns()
func (_StBtc *StBtcTransactorSession) Initialize(_network uint8, _validatorRegistry common.Address) (*types.Transaction, error) {
	return _StBtc.Contract.Initialize(&_StBtc.TransactOpts, _network, _validatorRegistry)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _validatorRegistry) returns()
func (_StBtc *StBtcTransactor) Initialize0(opts *bind.TransactOpts, _validatorRegistry common.Address) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "initialize0", _validatorRegistry)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _validatorRegistry) returns()
func (_StBtc *StBtcSession) Initialize0(_validatorRegistry common.Address) (*types.Transaction, error) {
	return _StBtc.Contract.Initialize0(&_StBtc.TransactOpts, _validatorRegistry)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _validatorRegistry) returns()
func (_StBtc *StBtcTransactorSession) Initialize0(_validatorRegistry common.Address) (*types.Transaction, error) {
	return _StBtc.Contract.Initialize0(&_StBtc.TransactOpts, _validatorRegistry)
}

// Mint is a paid mutator transaction binding the contract method 0x780f8df3.
//
// Solidity: function mint(uint256 _amount, address _recipient, bytes32 _btcDepositId) returns()
func (_StBtc *StBtcTransactor) Mint(opts *bind.TransactOpts, _amount *big.Int, _recipient common.Address, _btcDepositId [32]byte) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "mint", _amount, _recipient, _btcDepositId)
}

// Mint is a paid mutator transaction binding the contract method 0x780f8df3.
//
// Solidity: function mint(uint256 _amount, address _recipient, bytes32 _btcDepositId) returns()
func (_StBtc *StBtcSession) Mint(_amount *big.Int, _recipient common.Address, _btcDepositId [32]byte) (*types.Transaction, error) {
	return _StBtc.Contract.Mint(&_StBtc.TransactOpts, _amount, _recipient, _btcDepositId)
}

// Mint is a paid mutator transaction binding the contract method 0x780f8df3.
//
// Solidity: function mint(uint256 _amount, address _recipient, bytes32 _btcDepositId) returns()
func (_StBtc *StBtcTransactorSession) Mint(_amount *big.Int, _recipient common.Address, _btcDepositId [32]byte) (*types.Transaction, error) {
	return _StBtc.Contract.Mint(&_StBtc.TransactOpts, _amount, _recipient, _btcDepositId)
}

// Mint0 is a paid mutator transaction binding the contract method 0x9fd95687.
//
// Solidity: function mint((bytes32,address,uint256) invoice, bytes signature) returns()
func (_StBtc *StBtcTransactor) Mint0(opts *bind.TransactOpts, invoice StBTCMintInvoice, signature []byte) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "mint0", invoice, signature)
}

// Mint0 is a paid mutator transaction binding the contract method 0x9fd95687.
//
// Solidity: function mint((bytes32,address,uint256) invoice, bytes signature) returns()
func (_StBtc *StBtcSession) Mint0(invoice StBTCMintInvoice, signature []byte) (*types.Transaction, error) {
	return _StBtc.Contract.Mint0(&_StBtc.TransactOpts, invoice, signature)
}

// Mint0 is a paid mutator transaction binding the contract method 0x9fd95687.
//
// Solidity: function mint((bytes32,address,uint256) invoice, bytes signature) returns()
func (_StBtc *StBtcTransactorSession) Mint0(invoice StBTCMintInvoice, signature []byte) (*types.Transaction, error) {
	return _StBtc.Contract.Mint0(&_StBtc.TransactOpts, invoice, signature)
}

// MintRewards is a paid mutator transaction binding the contract method 0x21172f3b.
//
// Solidity: function mintRewards(uint256 nonce, uint256 delta, bytes signature) returns()
func (_StBtc *StBtcTransactor) MintRewards(opts *bind.TransactOpts, nonce *big.Int, delta *big.Int, signature []byte) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "mintRewards", nonce, delta, signature)
}

// MintRewards is a paid mutator transaction binding the contract method 0x21172f3b.
//
// Solidity: function mintRewards(uint256 nonce, uint256 delta, bytes signature) returns()
func (_StBtc *StBtcSession) MintRewards(nonce *big.Int, delta *big.Int, signature []byte) (*types.Transaction, error) {
	return _StBtc.Contract.MintRewards(&_StBtc.TransactOpts, nonce, delta, signature)
}

// MintRewards is a paid mutator transaction binding the contract method 0x21172f3b.
//
// Solidity: function mintRewards(uint256 nonce, uint256 delta, bytes signature) returns()
func (_StBtc *StBtcTransactorSession) MintRewards(nonce *big.Int, delta *big.Int, signature []byte) (*types.Transaction, error) {
	return _StBtc.Contract.MintRewards(&_StBtc.TransactOpts, nonce, delta, signature)
}

// MintRewards0 is a paid mutator transaction binding the contract method 0x943a21ab.
//
// Solidity: function mintRewards(uint256 nonce, uint256 delta) returns()
func (_StBtc *StBtcTransactor) MintRewards0(opts *bind.TransactOpts, nonce *big.Int, delta *big.Int) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "mintRewards0", nonce, delta)
}

// MintRewards0 is a paid mutator transaction binding the contract method 0x943a21ab.
//
// Solidity: function mintRewards(uint256 nonce, uint256 delta) returns()
func (_StBtc *StBtcSession) MintRewards0(nonce *big.Int, delta *big.Int) (*types.Transaction, error) {
	return _StBtc.Contract.MintRewards0(&_StBtc.TransactOpts, nonce, delta)
}

// MintRewards0 is a paid mutator transaction binding the contract method 0x943a21ab.
//
// Solidity: function mintRewards(uint256 nonce, uint256 delta) returns()
func (_StBtc *StBtcTransactorSession) MintRewards0(nonce *big.Int, delta *big.Int) (*types.Transaction, error) {
	return _StBtc.Contract.MintRewards0(&_StBtc.TransactOpts, nonce, delta)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_StBtc *StBtcTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_StBtc *StBtcSession) Pause() (*types.Transaction, error) {
	return _StBtc.Contract.Pause(&_StBtc.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_StBtc *StBtcTransactorSession) Pause() (*types.Transaction, error) {
	return _StBtc.Contract.Pause(&_StBtc.TransactOpts)
}

// Redeem is a paid mutator transaction binding the contract method 0x24b76fd5.
//
// Solidity: function redeem(uint256 _amount, string BTCAddress) returns()
func (_StBtc *StBtcTransactor) Redeem(opts *bind.TransactOpts, _amount *big.Int, BTCAddress string) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "redeem", _amount, BTCAddress)
}

// Redeem is a paid mutator transaction binding the contract method 0x24b76fd5.
//
// Solidity: function redeem(uint256 _amount, string BTCAddress) returns()
func (_StBtc *StBtcSession) Redeem(_amount *big.Int, BTCAddress string) (*types.Transaction, error) {
	return _StBtc.Contract.Redeem(&_StBtc.TransactOpts, _amount, BTCAddress)
}

// Redeem is a paid mutator transaction binding the contract method 0x24b76fd5.
//
// Solidity: function redeem(uint256 _amount, string BTCAddress) returns()
func (_StBtc *StBtcTransactorSession) Redeem(_amount *big.Int, BTCAddress string) (*types.Transaction, error) {
	return _StBtc.Contract.Redeem(&_StBtc.TransactOpts, _amount, BTCAddress)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StBtc *StBtcTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StBtc *StBtcSession) RenounceOwnership() (*types.Transaction, error) {
	return _StBtc.Contract.RenounceOwnership(&_StBtc.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StBtc *StBtcTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _StBtc.Contract.RenounceOwnership(&_StBtc.TransactOpts)
}

// SetMinWithdrawAmount is a paid mutator transaction binding the contract method 0x5abdb0dc.
//
// Solidity: function setMinWithdrawAmount(uint256 _minWithdrawAmount) returns()
func (_StBtc *StBtcTransactor) SetMinWithdrawAmount(opts *bind.TransactOpts, _minWithdrawAmount *big.Int) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "setMinWithdrawAmount", _minWithdrawAmount)
}

// SetMinWithdrawAmount is a paid mutator transaction binding the contract method 0x5abdb0dc.
//
// Solidity: function setMinWithdrawAmount(uint256 _minWithdrawAmount) returns()
func (_StBtc *StBtcSession) SetMinWithdrawAmount(_minWithdrawAmount *big.Int) (*types.Transaction, error) {
	return _StBtc.Contract.SetMinWithdrawAmount(&_StBtc.TransactOpts, _minWithdrawAmount)
}

// SetMinWithdrawAmount is a paid mutator transaction binding the contract method 0x5abdb0dc.
//
// Solidity: function setMinWithdrawAmount(uint256 _minWithdrawAmount) returns()
func (_StBtc *StBtcTransactorSession) SetMinWithdrawAmount(_minWithdrawAmount *big.Int) (*types.Transaction, error) {
	return _StBtc.Contract.SetMinWithdrawAmount(&_StBtc.TransactOpts, _minWithdrawAmount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_StBtc *StBtcTransactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_StBtc *StBtcSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _StBtc.Contract.Transfer(&_StBtc.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_StBtc *StBtcTransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _StBtc.Contract.Transfer(&_StBtc.TransactOpts, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_StBtc *StBtcTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_StBtc *StBtcSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _StBtc.Contract.TransferFrom(&_StBtc.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_StBtc *StBtcTransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _StBtc.Contract.TransferFrom(&_StBtc.TransactOpts, from, to, value)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StBtc *StBtcTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StBtc *StBtcSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _StBtc.Contract.TransferOwnership(&_StBtc.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StBtc *StBtcTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _StBtc.Contract.TransferOwnership(&_StBtc.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_StBtc *StBtcTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_StBtc *StBtcSession) Unpause() (*types.Transaction, error) {
	return _StBtc.Contract.Unpause(&_StBtc.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_StBtc *StBtcTransactorSession) Unpause() (*types.Transaction, error) {
	return _StBtc.Contract.Unpause(&_StBtc.TransactOpts)
}

// StBtcApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the StBtc contract.
type StBtcApprovalIterator struct {
	Event *StBtcApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StBtcApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StBtcApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StBtcApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StBtcApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StBtcApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StBtcApproval represents a Approval event raised by the StBtc contract.
type StBtcApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_StBtc *StBtcFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*StBtcApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _StBtc.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &StBtcApprovalIterator{contract: _StBtc.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_StBtc *StBtcFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *StBtcApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _StBtc.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StBtcApproval)
				if err := _StBtc.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_StBtc *StBtcFilterer) ParseApproval(log types.Log) (*StBtcApproval, error) {
	event := new(StBtcApproval)
	if err := _StBtc.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StBtcInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the StBtc contract.
type StBtcInitializedIterator struct {
	Event *StBtcInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StBtcInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StBtcInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StBtcInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StBtcInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StBtcInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StBtcInitialized represents a Initialized event raised by the StBtc contract.
type StBtcInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_StBtc *StBtcFilterer) FilterInitialized(opts *bind.FilterOpts) (*StBtcInitializedIterator, error) {

	logs, sub, err := _StBtc.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &StBtcInitializedIterator{contract: _StBtc.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_StBtc *StBtcFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *StBtcInitialized) (event.Subscription, error) {

	logs, sub, err := _StBtc.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StBtcInitialized)
				if err := _StBtc.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_StBtc *StBtcFilterer) ParseInitialized(log types.Log) (*StBtcInitialized, error) {
	event := new(StBtcInitialized)
	if err := _StBtc.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StBtcMintBtcEventIterator is returned from FilterMintBtcEvent and is used to iterate over the raw logs and unpacked data for MintBtcEvent events raised by the StBtc contract.
type StBtcMintBtcEventIterator struct {
	Event *StBtcMintBtcEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StBtcMintBtcEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StBtcMintBtcEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StBtcMintBtcEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StBtcMintBtcEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StBtcMintBtcEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StBtcMintBtcEvent represents a MintBtcEvent event raised by the StBtc contract.
type StBtcMintBtcEvent struct {
	To           common.Address
	Value        *big.Int
	BtcDepositId [32]byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterMintBtcEvent is a free log retrieval operation binding the contract event 0xb73f3e96d1e157f064cb3a8d0abed06bcec05e5515bf7486364c027dab6aa469.
//
// Solidity: event MintBtcEvent(address indexed _to, uint256 _value, bytes32 _btcDepositId)
func (_StBtc *StBtcFilterer) FilterMintBtcEvent(opts *bind.FilterOpts, _to []common.Address) (*StBtcMintBtcEventIterator, error) {

	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _StBtc.contract.FilterLogs(opts, "MintBtcEvent", _toRule)
	if err != nil {
		return nil, err
	}
	return &StBtcMintBtcEventIterator{contract: _StBtc.contract, event: "MintBtcEvent", logs: logs, sub: sub}, nil
}

// WatchMintBtcEvent is a free log subscription operation binding the contract event 0xb73f3e96d1e157f064cb3a8d0abed06bcec05e5515bf7486364c027dab6aa469.
//
// Solidity: event MintBtcEvent(address indexed _to, uint256 _value, bytes32 _btcDepositId)
func (_StBtc *StBtcFilterer) WatchMintBtcEvent(opts *bind.WatchOpts, sink chan<- *StBtcMintBtcEvent, _to []common.Address) (event.Subscription, error) {

	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _StBtc.contract.WatchLogs(opts, "MintBtcEvent", _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StBtcMintBtcEvent)
				if err := _StBtc.contract.UnpackLog(event, "MintBtcEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMintBtcEvent is a log parse operation binding the contract event 0xb73f3e96d1e157f064cb3a8d0abed06bcec05e5515bf7486364c027dab6aa469.
//
// Solidity: event MintBtcEvent(address indexed _to, uint256 _value, bytes32 _btcDepositId)
func (_StBtc *StBtcFilterer) ParseMintBtcEvent(log types.Log) (*StBtcMintBtcEvent, error) {
	event := new(StBtcMintBtcEvent)
	if err := _StBtc.contract.UnpackLog(event, "MintBtcEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StBtcOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the StBtc contract.
type StBtcOwnershipTransferredIterator struct {
	Event *StBtcOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StBtcOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StBtcOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StBtcOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StBtcOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StBtcOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StBtcOwnershipTransferred represents a OwnershipTransferred event raised by the StBtc contract.
type StBtcOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StBtc *StBtcFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*StBtcOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _StBtc.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &StBtcOwnershipTransferredIterator{contract: _StBtc.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StBtc *StBtcFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *StBtcOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _StBtc.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StBtcOwnershipTransferred)
				if err := _StBtc.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StBtc *StBtcFilterer) ParseOwnershipTransferred(log types.Log) (*StBtcOwnershipTransferred, error) {
	event := new(StBtcOwnershipTransferred)
	if err := _StBtc.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StBtcPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the StBtc contract.
type StBtcPausedIterator struct {
	Event *StBtcPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StBtcPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StBtcPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StBtcPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StBtcPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StBtcPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StBtcPaused represents a Paused event raised by the StBtc contract.
type StBtcPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_StBtc *StBtcFilterer) FilterPaused(opts *bind.FilterOpts) (*StBtcPausedIterator, error) {

	logs, sub, err := _StBtc.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &StBtcPausedIterator{contract: _StBtc.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_StBtc *StBtcFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *StBtcPaused) (event.Subscription, error) {

	logs, sub, err := _StBtc.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StBtcPaused)
				if err := _StBtc.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_StBtc *StBtcFilterer) ParsePaused(log types.Log) (*StBtcPaused, error) {
	event := new(StBtcPaused)
	if err := _StBtc.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StBtcRedeemBtcEventIterator is returned from FilterRedeemBtcEvent and is used to iterate over the raw logs and unpacked data for RedeemBtcEvent events raised by the StBtc contract.
type StBtcRedeemBtcEventIterator struct {
	Event *StBtcRedeemBtcEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StBtcRedeemBtcEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StBtcRedeemBtcEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StBtcRedeemBtcEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StBtcRedeemBtcEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StBtcRedeemBtcEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StBtcRedeemBtcEvent represents a RedeemBtcEvent event raised by the StBtc contract.
type StBtcRedeemBtcEvent struct {
	From       common.Address
	BTCAddress string
	Value      *big.Int
	Id         *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRedeemBtcEvent is a free log retrieval operation binding the contract event 0x83c16822c691a011b471d2653b84faff158a050c4e117390a6c008ecdefcc14e.
//
// Solidity: event RedeemBtcEvent(address indexed _from, string _BTCAddress, uint256 _value, uint256 _id)
func (_StBtc *StBtcFilterer) FilterRedeemBtcEvent(opts *bind.FilterOpts, _from []common.Address) (*StBtcRedeemBtcEventIterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}

	logs, sub, err := _StBtc.contract.FilterLogs(opts, "RedeemBtcEvent", _fromRule)
	if err != nil {
		return nil, err
	}
	return &StBtcRedeemBtcEventIterator{contract: _StBtc.contract, event: "RedeemBtcEvent", logs: logs, sub: sub}, nil
}

// WatchRedeemBtcEvent is a free log subscription operation binding the contract event 0x83c16822c691a011b471d2653b84faff158a050c4e117390a6c008ecdefcc14e.
//
// Solidity: event RedeemBtcEvent(address indexed _from, string _BTCAddress, uint256 _value, uint256 _id)
func (_StBtc *StBtcFilterer) WatchRedeemBtcEvent(opts *bind.WatchOpts, sink chan<- *StBtcRedeemBtcEvent, _from []common.Address) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}

	logs, sub, err := _StBtc.contract.WatchLogs(opts, "RedeemBtcEvent", _fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StBtcRedeemBtcEvent)
				if err := _StBtc.contract.UnpackLog(event, "RedeemBtcEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeemBtcEvent is a log parse operation binding the contract event 0x83c16822c691a011b471d2653b84faff158a050c4e117390a6c008ecdefcc14e.
//
// Solidity: event RedeemBtcEvent(address indexed _from, string _BTCAddress, uint256 _value, uint256 _id)
func (_StBtc *StBtcFilterer) ParseRedeemBtcEvent(log types.Log) (*StBtcRedeemBtcEvent, error) {
	event := new(StBtcRedeemBtcEvent)
	if err := _StBtc.contract.UnpackLog(event, "RedeemBtcEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StBtcTotalSupplyUpdatedEventIterator is returned from FilterTotalSupplyUpdatedEvent and is used to iterate over the raw logs and unpacked data for TotalSupplyUpdatedEvent events raised by the StBtc contract.
type StBtcTotalSupplyUpdatedEventIterator struct {
	Event *StBtcTotalSupplyUpdatedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StBtcTotalSupplyUpdatedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StBtcTotalSupplyUpdatedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StBtcTotalSupplyUpdatedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StBtcTotalSupplyUpdatedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StBtcTotalSupplyUpdatedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StBtcTotalSupplyUpdatedEvent represents a TotalSupplyUpdatedEvent event raised by the StBtc contract.
type StBtcTotalSupplyUpdatedEvent struct {
	Nonce          *big.Int
	TotalBTCSupply *big.Int
	TotalShares    *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterTotalSupplyUpdatedEvent is a free log retrieval operation binding the contract event 0x339ea31e567d96bc11133446c07d2afa7b1a67accc22bd1b6149fd58d1b93440.
//
// Solidity: event TotalSupplyUpdatedEvent(uint256 _nonce, uint256 _totalBTCSupply, uint256 _totalShares)
func (_StBtc *StBtcFilterer) FilterTotalSupplyUpdatedEvent(opts *bind.FilterOpts) (*StBtcTotalSupplyUpdatedEventIterator, error) {

	logs, sub, err := _StBtc.contract.FilterLogs(opts, "TotalSupplyUpdatedEvent")
	if err != nil {
		return nil, err
	}
	return &StBtcTotalSupplyUpdatedEventIterator{contract: _StBtc.contract, event: "TotalSupplyUpdatedEvent", logs: logs, sub: sub}, nil
}

// WatchTotalSupplyUpdatedEvent is a free log subscription operation binding the contract event 0x339ea31e567d96bc11133446c07d2afa7b1a67accc22bd1b6149fd58d1b93440.
//
// Solidity: event TotalSupplyUpdatedEvent(uint256 _nonce, uint256 _totalBTCSupply, uint256 _totalShares)
func (_StBtc *StBtcFilterer) WatchTotalSupplyUpdatedEvent(opts *bind.WatchOpts, sink chan<- *StBtcTotalSupplyUpdatedEvent) (event.Subscription, error) {

	logs, sub, err := _StBtc.contract.WatchLogs(opts, "TotalSupplyUpdatedEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StBtcTotalSupplyUpdatedEvent)
				if err := _StBtc.contract.UnpackLog(event, "TotalSupplyUpdatedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTotalSupplyUpdatedEvent is a log parse operation binding the contract event 0x339ea31e567d96bc11133446c07d2afa7b1a67accc22bd1b6149fd58d1b93440.
//
// Solidity: event TotalSupplyUpdatedEvent(uint256 _nonce, uint256 _totalBTCSupply, uint256 _totalShares)
func (_StBtc *StBtcFilterer) ParseTotalSupplyUpdatedEvent(log types.Log) (*StBtcTotalSupplyUpdatedEvent, error) {
	event := new(StBtcTotalSupplyUpdatedEvent)
	if err := _StBtc.contract.UnpackLog(event, "TotalSupplyUpdatedEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StBtcTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the StBtc contract.
type StBtcTransferIterator struct {
	Event *StBtcTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StBtcTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StBtcTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StBtcTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StBtcTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StBtcTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StBtcTransfer represents a Transfer event raised by the StBtc contract.
type StBtcTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_StBtc *StBtcFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*StBtcTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _StBtc.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &StBtcTransferIterator{contract: _StBtc.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_StBtc *StBtcFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *StBtcTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _StBtc.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StBtcTransfer)
				if err := _StBtc.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_StBtc *StBtcFilterer) ParseTransfer(log types.Log) (*StBtcTransfer, error) {
	event := new(StBtcTransfer)
	if err := _StBtc.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StBtcUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the StBtc contract.
type StBtcUnpausedIterator struct {
	Event *StBtcUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StBtcUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StBtcUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StBtcUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StBtcUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StBtcUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StBtcUnpaused represents a Unpaused event raised by the StBtc contract.
type StBtcUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_StBtc *StBtcFilterer) FilterUnpaused(opts *bind.FilterOpts) (*StBtcUnpausedIterator, error) {

	logs, sub, err := _StBtc.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &StBtcUnpausedIterator{contract: _StBtc.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_StBtc *StBtcFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *StBtcUnpaused) (event.Subscription, error) {

	logs, sub, err := _StBtc.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StBtcUnpaused)
				if err := _StBtc.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_StBtc *StBtcFilterer) ParseUnpaused(log types.Log) (*StBtcUnpaused, error) {
	event := new(StBtcUnpaused)
	if err := _StBtc.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
