// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package stroomabi

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// StBTCMintInvoice is an auto generated low-level Go binding around an user-defined struct.
type StBTCMintInvoice struct {
	BtcDepositId [32]byte
	Recipient    common.Address
	Amount       *big.Int
}

// StBtcMetaData contains all meta data concerning the StBtc contract.
var StBtcMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"function\",\"name\":\"BECH32_ALPHABET_MAP\",\"inputs\":[{\"name\":\"char\",\"type\":\"bytes1\",\"internalType\":\"bytes1\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"BTC\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"DUST_LIMIT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MESSAGE_MINT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"MESSAGE_UPDATE_TOTAL_SUPPLY\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"alphabetCheck\",\"inputs\":[{\"name\":\"BTCAddress\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"btcDepositIds\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"encodeInvoice\",\"inputs\":[{\"name\":\"invoice\",\"type\":\"tuple\",\"internalType\":\"structstBTC.MintInvoice\",\"components\":[{\"name\":\"btcDepositId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"recipient\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"encodeTotalSupplyUpdate\",\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"delta\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"equalBytes\",\"inputs\":[{\"name\":\"one\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"two\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"getMintInvoiceHash\",\"inputs\":[{\"name\":\"invoice\",\"type\":\"tuple\",\"internalType\":\"structstBTC.MintInvoice\",\"components\":[{\"name\":\"btcDepositId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"recipient\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getShares\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTotalSupplyUpdateHash\",\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"delta\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_network\",\"type\":\"uint8\",\"internalType\":\"enumBitcoinNetworkEncoder.Network\"},{\"name\":\"_validatorRegistry\",\"type\":\"address\",\"internalType\":\"contractValidatorRegistry\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_validatorRegistry\",\"type\":\"address\",\"internalType\":\"contractValidatorRegistry\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"minWithdrawAmount\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"mint\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_recipient\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_btcDepositId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"mint\",\"inputs\":[{\"name\":\"invoice\",\"type\":\"tuple\",\"internalType\":\"structstBTC.MintInvoice\",\"components\":[{\"name\":\"btcDepositId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"recipient\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"mintRewards\",\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"delta\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"mintRewards\",\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"delta\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"network\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"enumBitcoinNetworkEncoder.Network\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"polymodStep\",\"inputs\":[{\"name\":\"pre\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"prefixChk\",\"inputs\":[{\"name\":\"prefix\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"redeem\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"BTCAddress\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"redeemCounter\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setMinWithdrawAmount\",\"inputs\":[{\"name\":\"_minWithdrawAmount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalShares\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalSupplyUpdateNonce\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unpause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"validateBase58Checksum\",\"inputs\":[{\"name\":\"btcAddress\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"validateBech32Checksum\",\"inputs\":[{\"name\":\"btcAddress\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"validateBitcoinAddress\",\"inputs\":[{\"name\":\"network\",\"type\":\"uint8\",\"internalType\":\"enumBitcoinNetworkEncoder.Network\"},{\"name\":\"BTCAddress\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"validatorRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractValidatorRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"verify\",\"inputs\":[{\"name\":\"px\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"rx\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"s\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"m\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"pure\"},{\"type\":\"event\",\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"spender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"MintBtcEvent\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"_btcDepositId\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Rebase\",\"inputs\":[{\"name\":\"newTotalPooledBTC\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"newTotalShares\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RedeemBtcEvent\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"_BTCAddress\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TotalSupplyUpdatedEvent\",\"inputs\":[{\"name\":\"_nonce\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"_totalBTCSupply\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"_totalShares\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Transfer\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"ERC20InsufficientAllowance\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"allowance\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"needed\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ERC20InsufficientBalance\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"needed\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ERC20InvalidApprover\",\"inputs\":[{\"name\":\"approver\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC20InvalidReceiver\",\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC20InvalidSender\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"ERC20InvalidSpender\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"EnforcedPause\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ExpectedPause\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidInitialization\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotInitializing\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OwnableInvalidOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OwnableUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]}]",
	Bin: "0x6080604052348015600f57600080fd5b506149f88061001f6000396000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c80637b8d3cb411610167578063af7b8170116100ce578063e07fbd0011610087578063e07fbd00146105e9578063e0a04610146105fc578063e737557f1461060f578063f04da65b14610648578063f2fde38b14610671578063f376ebbb1461068457600080fd5b8063af7b817014610581578063af7f131f14610594578063c4d66de81461059d578063d354c65d146105b0578063d3b6d7f5146105c3578063dd62ed3e146105d657600080fd5b8063943a21ab11610120578063943a21ab1461052457806395d89b41146105375780639647ea371461053f5780639fd9568714610552578063a7ce456514610565578063a9059cbb1461056e57600080fd5b80637b8d3cb41461048c57806380239a041461049f57806380cf79c8146104b25780638456cb59146104c55780638c659bf2146104cd5780638da5cb5b146104e057600080fd5b80633f4ba83a1161020b5780635c975abb116101c45780635c975abb146103f3578063603c6a671461040b5780636739afca1461043d57806370a082311461045e578063715018a614610471578063780f8df31461047957600080fd5b80633f4ba83a146103a057806342193473146103a8578063457e1a49146103b15780634cac70ff146103ba5780635187599d146103cd5780635abdb0dc146103e057600080fd5b806321172f3b1161025d57806321172f3b1461033d57806323b872dd1461035257806324b76fd5146103655780632792949d14610378578063313ce567146103835780633a98ef391461039857600080fd5b8063026034f0146102a557806306fdde03146102dd578063095ea7b3146102f25780630b2aeb6c146103055780630fde6e551461031857806318160ddd1461032b575b600080fd5b6102c86102b3366004613f97565b60066020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6102e5610697565b6040516102d49190614000565b6102c8610300366004614028565b61075a565b6102c86103133660046140a4565b610774565b6102c86103263660046140f6565b610aa1565b6004545b6040519081526020016102d4565b61035061034b366004614128565b610c09565b005b6102c861036036600461417a565b610e4e565b6103506103733660046141bb565b610e72565b61032f6305f5e10081565b60085b60405160ff90911681526020016102d4565b60055461032f565b610350610fc8565b61032f61022281565b61032f60015481565b6102c86103c836600461429b565b610fda565b6103506103db366004614302565b611062565b6103506103ee366004613f97565b611208565b6000805160206149698339815191525460ff166102c8565b6102e5604051806040016040528060138152602001725354524f4f4d5f4d494e545f494e564f49434560681b81525081565b60005461045190600160a01b900460ff1681565b6040516102d4919061434f565b61032f61046c366004614377565b61128d565b6103506112d4565b610350610487366004614394565b6112e6565b61038661049a3660046143bb565b611306565b61032f6104ad3660046143e5565b6116eb565b61032f6104c0366004613f97565b61179a565b61035061185a565b6102e56104db3660046143e5565b61186a565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03165b6040516001600160a01b0390911681526020016102d4565b6103506105323660046143e5565b6118af565b6102e5611a19565b6102c861054d366004614407565b611a58565b610350610560366004614460565b611f8e565b61032f60025481565b6102c861057c366004614028565b612080565b6102c861058f36600461449a565b61208e565b61032f60035481565b6103506105ab366004614377565b6120e9565b6102c86105be3660046144ce565b61211c565b61032f6105d136600461449a565b61274d565b61032f6105e4366004614516565b612837565b61032f6105f7366004614534565b612881565b6102e561060a366004614534565b612928565b6102e56040518060400160405280601a8152602001795354524f4f4d5f5550444154455f544f54414c5f535550504c5960301b81525081565b61032f610656366004614377565b6001600160a01b031660009081526007602052604090205490565b61035061067f366004614377565b61298b565b60005461050c906001600160a01b031681565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace038054606091600080516020614949833981519152916106d690614550565b80601f016020809104026020016040519081016040528092919081815260200182805461070290614550565b801561074f5780601f106107245761010080835404028352916020019161074f565b820191906000526020600020905b81548152906001019060200180831161073257829003601f168201915b505050505091505090565b6000336107688185856129c9565b60019150505b92915050565b600060606107b984848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250610fda915050565b156107c8576000915050610a9a565b6107fa604051806040016040528060118152602001700a7261772061646472657373206461746160781b8152506129d6565b61083984848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612a1992505050565b600061084486612a5c565b9050600061085187612b7a565b9050600061085e88612c54565b90506108ad61087160016000898b614584565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250610fda915050565b8061095857506109006108c460016000898b614584565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250610fda915050565b8015610958575080516109569061091a906000898b614584565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250610fda915050565b155b156109da57601a86108061096c5750602386115b806109b357506109b187878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061208e92505050565b155b156109c5576000945050505050610a9a565b6109cf8787611a58565b945050505050610a9a565b80516109ed9061091a906000898b614584565b15610a91576002886003811115610a0657610a06614339565b03610a3157602b861080610a1a5750604086115b15610a2c576000945050505050610a9a565b610a52565b602a861080610a405750603e86115b15610a52576000945050505050610a9a565b6109cf87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061211c92505050565b60009450505050505b9392505050565b60006401000003d01985101580610abe57506401000003d0198410155b80610adb575070014551231950b75fc4402da1732fc9bebe198310155b15610ae857506000610c01565b600080610af486612d38565b9150915080610b0857600092505050610c01565b6000610b15878987612d93565b9050600070014551231950b75fc4402da1732fc9bebe19898809610b4b9070014551231950b75fc4402da1732fc9bebe196145da565b9050600070014551231950b75fc4402da1732fc9bebe198a8409610b819070014551231950b75fc4402da1732fc9bebe196145da565b60408051600080825260208201808452869052601b92820192909252606081018d9052608081018390529192509060019060a0016020604051602081039080840390855afa158015610bd7573d6000803e3d6000fd5b505050602060405103519050856001600160a01b0316816001600160a01b03161496505050505050505b949350505050565b610c11612e65565b6040518060400160405280601a8152602001795354524f4f4d5f5550444154455f544f54414c5f535550504c5960301b815250610c4e858561186a565b6000546040516311ee58a960e01b8152859185916001600160a01b03909116906311ee58a990610c88908790879087908790600401614616565b602060405180830381865afa158015610ca5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc9919061465b565b610cee5760405162461bcd60e51b8152600401610ce59061467d565b60405180910390fd5b6003548814610d0f5760405162461bcd60e51b8152600401610ce5906146c8565b600160036000828254610d229190614709565b90915550506000879003610d655760405162461bcd60e51b815260206004820152600a602482015269064656c746120697320360b41b6044820152606401610ce5565b6000610d7189896116eb565b60008181526006602052604090205490915060ff1615610dce5760405162461bcd60e51b815260206004820152601860248201527715541110551157d053149150511657d41493d0d154d4d15160421b6044820152606401610ce5565b6000818152600660205260408120805460ff19166001179055600480548a9290610df9908490614709565b9091555050600454600554604080518c815260208101939093528201527f339ea31e567d96bc11133446c07d2afa7b1a67accc22bd1b6149fd58d1b934409060600160405180910390a1505050505050505050565b600033610e5c858285612e96565b610e67858585612efc565b506001949350505050565b610e7a612e65565b600154831015610ef25760405162461bcd60e51b815260206004820152603e60248201527f5468652073656e742076616c7565206d7573742062652067726561746572206f60448201527f7220657175616c20746f206d696e20776974686472617720616d6f756e7400006064820152608401610ce5565b600054610f0a90600160a01b900460ff168383610774565b610f605760405162461bcd60e51b815260206004820152602160248201527f5468652073656e74204254432061646472657373206973206e6f742076616c696044820152601960fa1b6064820152608401610ce5565b610f6a3384612f5b565b600160026000828254610f7d9190614709565b909155505060025460405133917f83c16822c691a011b471d2653b84faff158a050c4e117390a6c008ecdefcc14e91610fbb9186918691899161471c565b60405180910390a2505050565b610fd0612f95565b610fd8612ff0565b565b60008151835114610fed5750600061076e565b60005b83518110156110585782818151811061100b5761100b614743565b602001015160f81c60f81b6001600160f81b03191684828151811061103257611032614743565b01602001516001600160f81b0319161461105057600091505061076e565b600101610ff0565b5060019392505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156110a75750825b90506000826001600160401b031660011480156110c35750303b155b9050811580156110d1575080155b156110ef5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561111957845460ff60401b1916600160401b1785555b6111666040518060400160405280600e81526020016d29ba3937b7b6902134ba31b7b4b760911b81525060405180604001604052806005815260200164737442544360d81b815250613050565b61116e613062565b611177866120e9565b611b586001556000600581905560028190556003818155815489929160ff60a01b1990911690600160a01b9084908111156111b4576111b4614339565b021790555083156111ff57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b611210612f95565b6102228110156112885760405162461bcd60e51b815260206004820152603c60248201527f4d696e20776974686472617720616d6f756e742073686f756c6420626520677260448201527f6561746572206f7220657175616c20746f2064757374206c696d6974000000006064820152608401610ce5565b600155565b60006005546000036112a157506000919050565b6005546004546001600160a01b0384166000908152600760205260409020546112ca9190614759565b61076e9190614770565b6112dc612f95565b610fd86000613072565b6112ee612e65565b6112f6612f95565b6113018383836130e3565b505050565b6000600d60fc1b6001600160f81b03198316016113255750600f919050565b606760f91b6001600160f81b03198316016113425750600a919050565b60cd60f81b6001600160f81b031983160161135f57506011919050565b603360fa1b6001600160f81b031983160161137c57506015919050565b60cb60f81b6001600160f81b031983160161139957506014919050565b606560f91b6001600160f81b03198316016113b65750601a919050565b601960fb1b6001600160f81b03198316016113d357506007919050565b60c960f81b6001600160f81b03198316016113f05750601e919050565b60c760f81b6001600160f81b031983160161140d57506005919050565b608f60f81b6001600160f81b031983160161142a57506000919050565b600960fc1b6001600160f81b031983160161144757506001919050565b604360f91b6001600160f81b031983160161146457506002919050565b604760f91b6001600160f81b031983160161148157506003919050565b608760f81b6001600160f81b031983160161149e57506004919050565b601160fb1b6001600160f81b03198316016114bb57506006919050565b609960f81b6001600160f81b03198316016114d857506008919050565b604d60f91b6001600160f81b03198316016114f557506009919050565b602360fa1b6001600160f81b03198316016115125750600b919050565b604560f91b6001600160f81b031983160161152f5750600c919050565b602760fa1b6001600160f81b031983160161154c5750600d919050565b608960f81b6001600160f81b03198316016115695750600e919050565b608d60f81b6001600160f81b031983160161158657506010919050565b604b60f91b6001600160f81b03198316016115a357506012919050565b604960f91b6001600160f81b03198316016115c057506013919050565b609560f81b6001600160f81b03198316016115dd57506016919050565b601360fb1b6001600160f81b03198316016115fa57506017919050565b609d60f81b6001600160f81b031983160161161757506018919050565b609b60f81b6001600160f81b031983160161163457506019919050565b609360f81b6001600160f81b03198316016116515750601b919050565b608b60f81b6001600160f81b031983160161166e5750601c919050565b609f60f81b6001600160f81b031983160161168b5750601d919050565b602560fa1b6001600160f81b03198316016116a85750601f919050565b6116da6040518060400160405280601181526020017024b73b30b634b21031b430b930b1ba32b960791b8152506129d6565b6116e382613290565b5060ff919050565b6000805460408051808201909152601a8152795354524f4f4d5f5550444154455f544f54414c5f535550504c5960301b60208201526001600160a01b039091169063bca0ac069061173c868661186a565b6040518363ffffffff1660e01b8152600401611759929190614784565b602060405180830381865afa158015611776573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9a91906147a9565b6000601982901c6001601d84901c8116146117b65760006117bc565b632a1462b35b63ffffffff16600382901c6001166001146117d85760006117de565b633d4233dd5b63ffffffff16600283901c6001166001146117fa576000611800565b631ea119fa5b63ffffffff16600184811c81161461181957600061181f565b6326508e6d5b63ffffffff1660018086161461183657600061183c565b633b6a57b25b63ffffffff166005886301ffffff16901b1818181818915050919050565b611862612f95565b610fd86132d9565b604080516020810184905290810182905230606090811b6bffffffffffffffffffffffff19168183015290607401604051602081830303815290604052905092915050565b6118b7612e65565b6118bf612f95565b60035482146118e05760405162461bcd60e51b8152600401610ce5906146c8565b6001600360008282546118f39190614709565b909155505060008190036119365760405162461bcd60e51b815260206004820152600a602482015269064656c746120697320360b41b6044820152606401610ce5565b600061194283836116eb565b60008181526006602052604090205490915060ff161561199f5760405162461bcd60e51b815260206004820152601860248201527715541110551157d053149150511657d41493d0d154d4d15160421b6044820152606401610ce5565b6000818152600660205260408120805460ff19166001179055600480548492906119ca908490614709565b90915550506004546005546040805186815260208101939093528201527f339ea31e567d96bc11133446c07d2afa7b1a67accc22bd1b6149fd58d1b934409060600160405180910390a1505050565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace048054606091600080516020614949833981519152916106d690614550565b600080611a9a84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061332292505050565b9050611ad36040518060400160405280601681526020017576616c6964617465426173653538436865636b73756d60501b8152506129d6565b611afb604051806040016040528060078152602001661c185e5b1bd85960ca1b8152506129d6565b611b0481612a19565b8051601914611b1757600091505061076e565b60408051600180825281830190925260009160208201818036833701905050905081600081518110611b4b57611b4b614743565b602001015160f81c60f81b81600081518110611b6957611b69614743565b60200101906001600160f81b031916908160001a905350611ba8604051806040016040528060078152602001663b32b939b4b7b760c91b8152506129d6565b611bb181612a19565b6000600460018451611bc391906145da565b611bcd91906145da565b6001600160401b03811115611be457611be46141ed565b6040519080825280601f01601f191660200182016040528015611c0e576020820181803683370190505b50905060005b600460018551611c2491906145da565b611c2e91906145da565b811015611c8d5783611c41826001614709565b81518110611c5157611c51614743565b602001015160f81c60f81b828281518110611c6e57611c6e614743565b60200101906001600160f81b031916908160001a905350600101611c14565b50611cb6604051806040016040528060078152602001661c185e5b1bd85960ca1b8152506129d6565b611cbf81612a19565b8051601414611cd4576000935050505061076e565b60408051600480825281830190925260009160208201818036833701905050905060005b6004811015611d6757848160048751611d1191906145da565b611d1b9190614709565b81518110611d2b57611d2b614743565b602001015160f81c60f81b828281518110611d4857611d48614743565b60200101906001600160f81b031916908160001a905350600101611cf8565b50611d9160405180604001604052806008815260200167636865636b73756d60c01b8152506129d6565b611d9a81612a19565b60006002808585604051602001611db29291906147c2565b60408051601f1981840301815290829052611dcc916147f1565b602060405180830381855afa158015611de9573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611e0c91906147a9565b604051602001611e1e91815260200190565b60408051601f1981840301815290829052611e38916147f1565b602060405180830381855afa158015611e55573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611e7891906147a9565b9050611eae6040518060400160405280601381526020017263616c63756c6174656420636865636b73756d60681b8152506129d6565b611eb78161332d565b8060031a60f81b82600381518110611ed157611ed1614743565b01602001516001600160f81b031916188160021a60f81b83600281518110611efb57611efb614743565b01602001516001600160f81b031916188260011a60f81b84600181518110611f2557611f25614743565b01602001516001600160f81b031916188360001a60f81b85600081518110611f4f57611f4f614743565b602001015160f81c60f81b181717176001600160f81b031916600060f81b14611f805760009550505050505061076e565b506001979650505050505050565b611f96612e65565b604051806040016040528060138152602001725354524f4f4d5f4d494e545f494e564f49434560681b815250611fcb84612928565b6000546040516311ee58a960e01b8152859185916001600160a01b03909116906311ee58a990612005908790879087908790600401614616565b602060405180830381865afa158015612022573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612046919061465b565b6120625760405162461bcd60e51b8152600401610ce59061467d565b6111ff604088018035906120799060208b01614377565b89356130e3565b600033610768818585612efc565b6000805b82518110156120e05760008382815181106120af576120af614743565b016020015160f81c905060006120c482613372565b9050806120d657506000949350505050565b5050600101612092565b50600192915050565b6120f161341b565b6120fa33613464565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b600061215c6040518060400160405280601981526020017f0a76616c69646174652062656368333220636865636b73756d000000000000008152506129d6565b612184604051806040016040528060078152602001666164647265737360c81b8152506129d6565b61218d826129d6565b81518290600811156121cc576121c3604051806040016040528060098152602001681d1bdbc81cda1bdc9d60ba1b8152506129d6565b50600092915050565b605a815111156121ff576121c360405180604001604052806008815260200167746f6f206c6f6e6760c01b8152506129d6565b50816000805b82518110156122495782818151811061222057612220614743565b01602001516001600160f81b031916603160f81b0361224157809150612249565b600101612205565b50806000036122895761227f6040518060400160405280600c81526020016b37379039b2b830b930ba37b960a11b8152506129d6565b5060009392505050565b806001036122c05761227f6040518060400160405280600e81526020016d0dad2e6e6d2dcce40e0e4caccd2f60931b8152506129d6565b6000816001600160401b038111156122da576122da6141ed565b6040519080825280601f01601f191660200182016040528015612304576020820181803683370190505b5090506000600183855161231891906145da565b61232291906145da565b6001600160401b03811115612339576123396141ed565b6040519080825280601f01601f191660200182016040528015612363576020820181803683370190505b50905060005b838110156123bf5784818151811061238357612383614743565b602001015160f81c60f81b8382815181106123a0576123a0614743565b60200101906001600160f81b031916908160001a905350600101612369565b5060005b815181101561242e57846123d78583614709565b6123e2906001614709565b815181106123f2576123f2614743565b602001015160f81c60f81b82828151811061240f5761240f614743565b60200101906001600160f81b031916908160001a9053506001016123c3565b50612456604051806040016040528060068152602001650e0e4caccd2f60d31b8152506129d6565b61245f82612a19565b6006815110156124a4576124986040518060400160405280600e81526020016d19185d18481d1bdbc81cda1bdc9d60921b8152506129d6565b50600095945050505050565b60006124af8361274d565b9050806000036124f5576124e86040518060400160405280600e81526020016d0d2dcecc2d8d2c840e0e4caccd2f60931b8152506129d6565b5060009695505050505050565b600082516001600160401b03811115612510576125106141ed565b6040519080825280601f01601f19166020018201604052801561253a576020820181803683370190505b50905060005b835181101561269357600084828151811061255d5761255d614743565b01602001516001600160f81b0319169050600061257982611306565b905060fe1960ff821601612631576125b9604051806040016040528060118152602001703ab735b737bbb71031b430b930b1ba32b960791b8152506129d6565b6125c283613475565b6125cb82613290565b6126206040518060400160405280600481526020016331b430b960e11b8152508360405160200161260c91906001600160f81b031991909116815260010190565b6040516020818303038152906040526134ba565b5060009a9950505050505050505050565b8060ff1661263e8661179a565b87519118955061264f846006614709565b1061265b57505061268b565b8060f81b84848151811061267157612671614743565b60200101906001600160f81b031916908160001a90535050505b600101612540565b506126ba60405180604001604052806005815260200164776f72647360d81b8152506129d6565b6126c381612a19565b632bc830a382141580156126d8575081600114155b1561271d5761270f6040518060400160405280601081526020016f696e76616c696420636865636b73756d60801b815250836134ff565b506000979650505050505050565b611f806040518060400160405280600e81526020016d76616c696420636865636b73756d60901b815250836134ff565b60006001815b83518110156127e157600084828151811061277057612770614743565b016020015160f81c905060218110806127895750607e81115b156127c75760405162461bcd60e51b815260206004820152600e60248201526d092dcecc2d8d2c840e0e4caccd2f60931b6044820152606401610ce5565b600581901c6127d58461179a565b18925050600101612753565b506127eb8161179a565b905060005b835181101561283057600084828151811061280d5761280d614743565b016020015160f81c9050601f81166128248461179a565b189250506001016127f0565b5092915050565b6001600160a01b0391821660009081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace016020908152604080832093909416825291909152205490565b600080546040805180820190915260138152725354524f4f4d5f4d494e545f494e564f49434560681b60208201526001600160a01b039091169063bca0ac06906128ca85612928565b6040518363ffffffff1660e01b81526004016128e7929190614784565b602060405180830381865afa158015612904573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076e91906147a9565b606061293a6040830160208401614377565b604080516bffffffffffffffffffffffff19606093841b81166020830152918501356034820152843560548201523090921b1660748201526088016040516020818303038152906040529050919050565b612993612f95565b6001600160a01b0381166129bd57604051631e4fbdf760e01b815260006004820152602401610ce5565b6129c681613072565b50565b6113018383836001613544565b6129c6816040516024016129ea9190614000565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b17905261362c565b6129c681604051602401612a2d9190614000565b60408051601f198184030181529190526020810180516001600160e01b03166305f3bfab60e11b17905261362c565b60606000826003811115612a7257612a72614339565b03612a945750506040805180820190915260018152603160f81b602082015290565b6002826003811115612aa857612aa8614339565b03612aca5750506040805180820190915260018152601960f91b602082015290565b6001826003811115612ade57612ade614339565b03612b005750506040805180820190915260018152601960f91b602082015290565b6003826003811115612b1457612b14614339565b03612b365750506040805180820190915260018152605360f81b602082015290565b60405162461bcd60e51b8152602060048201526014602482015273556e6b6e6f776e206e6574776f726b207479706560601b6044820152606401610ce5565b919050565b60606000826003811115612b9057612b90614339565b03612bb25750506040805180820190915260018152603360f81b602082015290565b6002826003811115612bc657612bc6614339565b03612be85750506040805180820190915260018152606d60f81b602082015290565b6001826003811115612bfc57612bfc614339565b03612c1e5750506040805180820190915260018152606d60f81b602082015290565b6003826003811115612c3257612c32614339565b03612b365750506040805180820190915260018152607360f81b602082015290565b60606000826003811115612c6a57612c6a614339565b03612c8e57505060408051808201909152600381526262633160e81b602082015290565b6002826003811115612ca257612ca2614339565b03612cc8575050604080518082019091526005815264626372743160d81b602082015290565b6001826003811115612cdc57612cdc614339565b03612d0057505060408051808201909152600381526274623160e81b602082015290565b6003826003811115612d1457612d14614339565b03612b3657505060408051808201909152600381526273623160e81b602082015290565b600080600080612d4785613635565b9150915080612d5d575060009485945092505050565b50604080516020808201969096528082019290925280518083038201815260609092019052805193019290922092600192509050565b604080517f7bb52d7a9fef58323eb1bf7a407db382d2f3f2d81bb1224f49fe518f6d48d37c60208201819052918101829052606081018590526080810184905260a081018390526000919070014551231950b75fc4402da1732fc9bebe199060029060c00160408051601f1981840301815290829052612e12916147f1565b602060405180830381855afa158015612e2f573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612e5291906147a9565b612e5c919061480d565b95945050505050565b6000805160206149698339815191525460ff1615610fd85760405163d93c066560e01b815260040160405180910390fd5b6000612ea28484612837565b90506000198114612ef65781811015612ee757604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610ce5565b612ef684848484036000613544565b50505050565b6001600160a01b038316612f2657604051634b637e8f60e11b815260006004820152602401610ce5565b6001600160a01b038216612f505760405163ec442f0560e01b815260006004820152602401610ce5565b6113018383836136fa565b6001600160a01b038216612f8557604051634b637e8f60e11b815260006004820152602401610ce5565b612f91826000836136fa565b5050565b33612fc77f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610fd85760405163118cdaa760e01b8152336004820152602401610ce5565b612ff8613978565b600080516020614969833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b61305861341b565b612f9182826139a8565b61306a61341b565b610fd86139f9565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b600083116131265760405162461bcd60e51b815260206004820152601060248201526f4d494e545f414d4f554e545f5a45524f60801b6044820152606401610ce5565b6131386305f5e1006301406f40614759565b831061317c5760405162461bcd60e51b81526020600482015260136024820152724d494e545f414d4f554e545f544f4f5f42494760681b6044820152606401610ce5565b306001600160a01b038316036131d45760405162461bcd60e51b815260206004820152601c60248201527f4d494e545f544f5f5448455f434f4e54524143545f41444452455353000000006044820152606401610ce5565b60008181526006602052604090205460ff161561322c5760405162461bcd60e51b81526020600482015260166024820152751352539517d053149150511657d41493d0d154d4d15160521b6044820152606401610ce5565b6000818152600660205260409020805460ff1916600117905561324f8284613a1a565b60408051848152602081018390526001600160a01b038416917fb73f3e96d1e157f064cb3a8d0abed06bcec05e5515bf7486364c027dab6aa4699101610fbb565b6040516001600160f81b0319821660248201526129c69060440160408051601f198184030181529190526020810180516001600160e01b0316630dc3142560e31b17905261362c565b6132e1612e65565b600080516020614969833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833613032565b606061076e82613a50565b6129c68160405160240161334391815260200190565b60408051601f198184030181529190526020810180516001600160e01b03166327b7cf8560e01b17905261362c565b60008160ff166049148061338957508160ff16604f145b8061339757508160ff16606c145b156133a457506000919050565b60318260ff16101580156133bc575060398260ff1611155b156133c957506001919050565b60418260ff16101580156133e15750605a8260ff1611155b156133ee57506001919050565b60618260ff16101580156134065750607a8260ff1611155b1561341357506001919050565b506000919050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610fd857604051631afcd79f60e31b815260040160405180910390fd5b61346c61341b565b6129c681613d9a565b6129c68160405160240161348b91815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f82c50f160e01b17905261362c565b612f9182826040516024016134d0929190614784565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b17905261362c565b612f918282604051602401613515929190614821565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b17905261362c565b6000805160206149498339815191526001600160a01b03851661357d5760405163e602df0560e01b815260006004820152602401610ce5565b6001600160a01b0384166135a757604051634a1406b160e11b815260006004820152602401610ce5565b6001600160a01b0380861660009081526001830160209081526040808320938816835292905220839055811561362557836001600160a01b0316856001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258560405161361c91815260200190565b60405180910390a35b5050505050565b6129c681613da2565b6000806401000003d01981600782861061365757506000958695509350505050565b60008380613667576136676145ae565b8480613675576136756145ae565b838680613684576136846145ae565b868b09088580613696576136966145ae565b86806136a4576136a46145ae565b8a8b098a090890506136cd8160046136bd876001614709565b6136c79190614770565b86613dc3565b9050600060018216156136e9576136e482866145da565b6136eb565b815b98600198509650505050505050565b6001600160a01b0383166137db5760006005546000148061371b5750600454155b61373e5760045460055461372f9084614759565b6137399190614770565b613740565b815b905081600460008282546137549190614709565b92505081905550806005600082825461376d9190614709565b90915550506001600160a01b0383166000908152600760205260409081902080548301905560045460055491517f11c6bf55864ff83827df712625d7a80e5583eef0264921025e7cd22003a21511926137cd928252602082015260400190565b60405180910390a150613926565b60006137e68461128d565b90508181101561382f5760405162461bcd60e51b8152602060048201526014602482015273494e53554646494349454e545f42414c414e434560601b6044820152606401610ce5565b6000600454600554846138429190614759565b61384c9190614770565b90506001600160a01b0384166138f557826004600082825461386e91906145da565b92505081905550806005600082825461388791906145da565b90915550506001600160a01b038516600090815260076020526040908190208054839003905560045460055491517f11c6bf55864ff83827df712625d7a80e5583eef0264921025e7cd22003a21511926138e8928252602082015260400190565b60405180910390a1613923565b6001600160a01b03808616600090815260076020526040808220805485900390559186168152208054820190555b50505b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161396b91815260200190565b60405180910390a3505050565b6000805160206149698339815191525460ff16610fd857604051638dfc202b60e01b815260040160405180910390fd5b6139b061341b565b6000805160206149498339815191527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace036139ea848261488a565b5060048101612ef6838261488a565b613a0161341b565b600080516020614969833981519152805460ff19169055565b6001600160a01b038216613a445760405163ec442f0560e01b815260006004820152602401610ce5565b612f91600083836136fa565b80516060906031906000805b8281108015613a83575083868281518110613a7957613a79614743565b016020015160f81c145b15613a945760019182019101613a5c565b5060008080806117e361209f8702046001016002026001600160401b03811115613ac057613ac06141ed565b6040519080825280601f01601f191660200182016040528015613aea576020820181803683370190505b5090506000600460038801046001600160401b03811115613b0d57613b0d6141ed565b604051908082528060200260200182016040528015613b36578160200160208202803683370190505b50905060005b8a51811015613c585760008b8281518110613b5957613b59614743565b602001015160f81c60f81b9050613b886040518060600160405280603a8152602001614989603a913982613e8c565b909650945084613bd15760405162461bcd60e51b81526020600482015260146024820152731a5b9d985b1a590818985cd94d4e08191a59da5d60621b6044820152606401610ce5565b8251600019015b60008112613c4e5786848281518110613bf357613bf3614743565b602002602001015163ffffffff16603a026001600160401b0316019750602088901c96508763ffffffff16848281518110613c3057613c30614743565b63ffffffff9092166020928302919091019091015260001901613bd8565b5050600101613b3c565b50600860038816026001600160401b038116600003613c75575060205b600719016000805b8351811015613d1f575b6020836001600160401b03161015613d1357826001600160401b0316848281518110613cb557613cb5614743565b602002602001015163ffffffff16901c60f81b858381518110613cda57613cda614743565b60200101906001600160f81b031916908160001a90535060019091019060086001600160401b03841610613d1357600883039250613c87565b60189250600101613c7d565b50875b8451811015613d7d57600060f81b858281518110613d4257613d42614743565b01602001516001600160f81b0319161115613d7557613d64858a830384613eef565b9d9c50505050505050505050505050565b600101613d22565b50613d8a84600083613eef565b9c9b505050505050505050505050565b61299361341b565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b600081600003613e075760405162461bcd60e51b815260206004820152600f60248201526e4d6f64756c7573206973207a65726f60881b6044820152606401610ce5565b83600003613e1757506000610a9a565b82600003613e2757506001610a9a565b6001600160ff1b5b8015613e8357838186161515870a85848509099150836002820486161515870a85848509099150836004820486161515870a85848509099150836008820486161515870a8584850909915060109004613e2f565b50949350505050565b60008060005b8451811015613edf57836001600160f81b031916858281518110613eb857613eb8614743565b01602001516001600160f81b03191603613ed757915060019050613ee8565b600101613e92565b50600080915091505b9250929050565b606060008383036001600160401b03811115613f0d57613f0d6141ed565b6040519080825280601f01601f191660200182016040528015613f37576020820181803683370190505b50905060005b848403811015613e83578585820181518110613f5b57613f5b614743565b602001015160f81c60f81b828281518110613f7857613f78614743565b60200101906001600160f81b031916908160001a905350600101613f3d565b600060208284031215613fa957600080fd5b5035919050565b60005b83811015613fcb578181015183820152602001613fb3565b50506000910152565b60008151808452613fec816020860160208601613fb0565b601f01601f19169290920160200192915050565b602081526000610a9a6020830184613fd4565b6001600160a01b03811681146129c657600080fd5b6000806040838503121561403b57600080fd5b823561404681614013565b946020939093013593505050565b803560048110612b7557600080fd5b60008083601f84011261407557600080fd5b5081356001600160401b0381111561408c57600080fd5b602083019150836020828501011115613ee857600080fd5b6000806000604084860312156140b957600080fd5b6140c284614054565b925060208401356001600160401b038111156140dd57600080fd5b6140e986828701614063565b9497909650939450505050565b6000806000806080858703121561410c57600080fd5b5050823594602084013594506040840135936060013592509050565b6000806000806060858703121561413e57600080fd5b843593506020850135925060408501356001600160401b0381111561416257600080fd5b61416e87828801614063565b95989497509550505050565b60008060006060848603121561418f57600080fd5b833561419a81614013565b925060208401356141aa81614013565b929592945050506040919091013590565b6000806000604084860312156141d057600080fd5b8335925060208401356001600160401b038111156140dd57600080fd5b634e487b7160e01b600052604160045260246000fd5b6000806001600160401b0384111561421d5761421d6141ed565b50604051601f19601f85018116603f011681018181106001600160401b038211171561424b5761424b6141ed565b60405283815290508082840185101561426357600080fd5b83836020830137600060208583010152509392505050565b600082601f83011261428c57600080fd5b610a9a83833560208501614203565b600080604083850312156142ae57600080fd5b82356001600160401b038111156142c457600080fd5b6142d08582860161427b565b92505060208301356001600160401b038111156142ec57600080fd5b6142f88582860161427b565b9150509250929050565b6000806040838503121561431557600080fd5b61431e83614054565b9150602083013561432e81614013565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b602081016004831061437157634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561438957600080fd5b8135610a9a81614013565b6000806000606084860312156143a957600080fd5b8335925060208401356141aa81614013565b6000602082840312156143cd57600080fd5b81356001600160f81b031981168114610a9a57600080fd5b600080604083850312156143f857600080fd5b50508035926020909101359150565b6000806020838503121561441a57600080fd5b82356001600160401b0381111561443057600080fd5b61443c85828601614063565b90969095509350505050565b60006060828403121561445a57600080fd5b50919050565b60008060006080848603121561447557600080fd5b61447f8585614448565b925060608401356001600160401b038111156140dd57600080fd5b6000602082840312156144ac57600080fd5b81356001600160401b038111156144c257600080fd5b610c018482850161427b565b6000602082840312156144e057600080fd5b81356001600160401b038111156144f657600080fd5b8201601f8101841361450757600080fd5b610c0184823560208401614203565b6000806040838503121561452957600080fd5b823561431e81614013565b60006060828403121561454657600080fd5b610a9a8383614448565b600181811c9082168061456457607f821691505b60208210810361445a57634e487b7160e01b600052602260045260246000fd5b6000808585111561459457600080fd5b838611156145a157600080fd5b5050820193919092039150565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561076e5761076e6145c4565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6060815260006146296060830187613fd4565b828103602084015261463b8187613fd4565b905082810360408401526146508185876145ed565b979650505050505050565b60006020828403121561466d57600080fd5b81518015158114610a9a57600080fd5b6020808252602b908201527f56616c696461746f724d65737361676552656365697665723a20494e56414c4960408201526a445f5349474e415455524560a81b606082015260800190565b60208082526021908201527f496e76616c69642075706461746520746f74616c20737570706c79206e6f6e636040820152606560f81b606082015260800190565b8082018082111561076e5761076e6145c4565b6060815260006147306060830186886145ed565b6020830194909452506040015292915050565b634e487b7160e01b600052603260045260246000fd5b808202811582820484141761076e5761076e6145c4565b60008261477f5761477f6145ae565b500490565b6040815260006147976040830185613fd4565b8281036020840152612e5c8185613fd4565b6000602082840312156147bb57600080fd5b5051919050565b600083516147d4818460208801613fb0565b8351908301906147e8818360208801613fb0565b01949350505050565b60008251614803818460208701613fb0565b9190910192915050565b60008261481c5761481c6145ae565b500690565b6040815260006148346040830185613fd4565b90508260208301529392505050565b601f82111561130157806000526020600020601f840160051c8101602085101561486a5750805b601f840160051c820191505b818110156136255760008155600101614876565b81516001600160401b038111156148a3576148a36141ed565b6148b7816148b18454614550565b84614843565b6020601f8211600181146148eb57600083156148d35750848201515b600019600385901b1c1916600184901b178455613625565b600084815260208120601f198516915b8281101561491b57878501518255602094850194600190920191016148fb565b50848210156149395786840151600019600387901b60f8161c191681555b50505050600190811b0190555056fe52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f0330031323334353637383941424344454647484a4b4c4d4e505152535455565758595a6162636465666768696a6b6d6e6f707172737475767778797aa2646970667358221220348fb46750f17b7000d051cefbb321c5bf8ff0e3c6ade4e1114e3027aabf4aaf64736f6c634300081b0033",
}

// StBtcABI is the input ABI used to generate the binding from.
// Deprecated: Use StBtcMetaData.ABI instead.
var StBtcABI = StBtcMetaData.ABI

// StBtcBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StBtcMetaData.Bin instead.
var StBtcBin = StBtcMetaData.Bin

// DeployStBtc deploys a new Ethereum contract, binding an instance of StBtc to it.
func DeployStBtc(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *StBtc, error) {
	parsed, err := StBtcMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StBtcBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StBtc{StBtcCaller: StBtcCaller{contract: contract}, StBtcTransactor: StBtcTransactor{contract: contract}, StBtcFilterer: StBtcFilterer{contract: contract}}, nil
}

// StBtc is an auto generated Go binding around an Ethereum contract.
type StBtc struct {
	StBtcCaller     // Read-only binding to the contract
	StBtcTransactor // Write-only binding to the contract
	StBtcFilterer   // Log filterer for contract events
}

// StBtcCaller is an auto generated read-only Go binding around an Ethereum contract.
type StBtcCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StBtcTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StBtcTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StBtcFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StBtcFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StBtcSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StBtcSession struct {
	Contract     *StBtc            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StBtcCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StBtcCallerSession struct {
	Contract *StBtcCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// StBtcTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StBtcTransactorSession struct {
	Contract     *StBtcTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StBtcRaw is an auto generated low-level Go binding around an Ethereum contract.
type StBtcRaw struct {
	Contract *StBtc // Generic contract binding to access the raw methods on
}

// StBtcCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StBtcCallerRaw struct {
	Contract *StBtcCaller // Generic read-only contract binding to access the raw methods on
}

// StBtcTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StBtcTransactorRaw struct {
	Contract *StBtcTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStBtc creates a new instance of StBtc, bound to a specific deployed contract.
func NewStBtc(address common.Address, backend bind.ContractBackend) (*StBtc, error) {
	contract, err := bindStBtc(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StBtc{StBtcCaller: StBtcCaller{contract: contract}, StBtcTransactor: StBtcTransactor{contract: contract}, StBtcFilterer: StBtcFilterer{contract: contract}}, nil
}

// NewStBtcCaller creates a new read-only instance of StBtc, bound to a specific deployed contract.
func NewStBtcCaller(address common.Address, caller bind.ContractCaller) (*StBtcCaller, error) {
	contract, err := bindStBtc(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StBtcCaller{contract: contract}, nil
}

// NewStBtcTransactor creates a new write-only instance of StBtc, bound to a specific deployed contract.
func NewStBtcTransactor(address common.Address, transactor bind.ContractTransactor) (*StBtcTransactor, error) {
	contract, err := bindStBtc(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StBtcTransactor{contract: contract}, nil
}

// NewStBtcFilterer creates a new log filterer instance of StBtc, bound to a specific deployed contract.
func NewStBtcFilterer(address common.Address, filterer bind.ContractFilterer) (*StBtcFilterer, error) {
	contract, err := bindStBtc(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StBtcFilterer{contract: contract}, nil
}

// bindStBtc binds a generic wrapper to an already deployed contract.
func bindStBtc(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := StBtcMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StBtc *StBtcRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StBtc.Contract.StBtcCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StBtc *StBtcRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StBtc.Contract.StBtcTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StBtc *StBtcRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StBtc.Contract.StBtcTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StBtc *StBtcCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StBtc.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StBtc *StBtcTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StBtc.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StBtc *StBtcTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StBtc.Contract.contract.Transact(opts, method, params...)
}

// BECH32ALPHABETMAP is a free data retrieval call binding the contract method 0x7b8d3cb4.
//
// Solidity: function BECH32_ALPHABET_MAP(bytes1 char) view returns(uint8)
func (_StBtc *StBtcCaller) BECH32ALPHABETMAP(opts *bind.CallOpts, char [1]byte) (uint8, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "BECH32_ALPHABET_MAP", char)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// BECH32ALPHABETMAP is a free data retrieval call binding the contract method 0x7b8d3cb4.
//
// Solidity: function BECH32_ALPHABET_MAP(bytes1 char) view returns(uint8)
func (_StBtc *StBtcSession) BECH32ALPHABETMAP(char [1]byte) (uint8, error) {
	return _StBtc.Contract.BECH32ALPHABETMAP(&_StBtc.CallOpts, char)
}

// BECH32ALPHABETMAP is a free data retrieval call binding the contract method 0x7b8d3cb4.
//
// Solidity: function BECH32_ALPHABET_MAP(bytes1 char) view returns(uint8)
func (_StBtc *StBtcCallerSession) BECH32ALPHABETMAP(char [1]byte) (uint8, error) {
	return _StBtc.Contract.BECH32ALPHABETMAP(&_StBtc.CallOpts, char)
}

// BTC is a free data retrieval call binding the contract method 0x2792949d.
//
// Solidity: function BTC() view returns(uint256)
func (_StBtc *StBtcCaller) BTC(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "BTC")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BTC is a free data retrieval call binding the contract method 0x2792949d.
//
// Solidity: function BTC() view returns(uint256)
func (_StBtc *StBtcSession) BTC() (*big.Int, error) {
	return _StBtc.Contract.BTC(&_StBtc.CallOpts)
}

// BTC is a free data retrieval call binding the contract method 0x2792949d.
//
// Solidity: function BTC() view returns(uint256)
func (_StBtc *StBtcCallerSession) BTC() (*big.Int, error) {
	return _StBtc.Contract.BTC(&_StBtc.CallOpts)
}

// DUSTLIMIT is a free data retrieval call binding the contract method 0x42193473.
//
// Solidity: function DUST_LIMIT() view returns(uint256)
func (_StBtc *StBtcCaller) DUSTLIMIT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "DUST_LIMIT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DUSTLIMIT is a free data retrieval call binding the contract method 0x42193473.
//
// Solidity: function DUST_LIMIT() view returns(uint256)
func (_StBtc *StBtcSession) DUSTLIMIT() (*big.Int, error) {
	return _StBtc.Contract.DUSTLIMIT(&_StBtc.CallOpts)
}

// DUSTLIMIT is a free data retrieval call binding the contract method 0x42193473.
//
// Solidity: function DUST_LIMIT() view returns(uint256)
func (_StBtc *StBtcCallerSession) DUSTLIMIT() (*big.Int, error) {
	return _StBtc.Contract.DUSTLIMIT(&_StBtc.CallOpts)
}

// MESSAGEMINT is a free data retrieval call binding the contract method 0x603c6a67.
//
// Solidity: function MESSAGE_MINT() view returns(bytes)
func (_StBtc *StBtcCaller) MESSAGEMINT(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "MESSAGE_MINT")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// MESSAGEMINT is a free data retrieval call binding the contract method 0x603c6a67.
//
// Solidity: function MESSAGE_MINT() view returns(bytes)
func (_StBtc *StBtcSession) MESSAGEMINT() ([]byte, error) {
	return _StBtc.Contract.MESSAGEMINT(&_StBtc.CallOpts)
}

// MESSAGEMINT is a free data retrieval call binding the contract method 0x603c6a67.
//
// Solidity: function MESSAGE_MINT() view returns(bytes)
func (_StBtc *StBtcCallerSession) MESSAGEMINT() ([]byte, error) {
	return _StBtc.Contract.MESSAGEMINT(&_StBtc.CallOpts)
}

// MESSAGEUPDATETOTALSUPPLY is a free data retrieval call binding the contract method 0xe737557f.
//
// Solidity: function MESSAGE_UPDATE_TOTAL_SUPPLY() view returns(bytes)
func (_StBtc *StBtcCaller) MESSAGEUPDATETOTALSUPPLY(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "MESSAGE_UPDATE_TOTAL_SUPPLY")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// MESSAGEUPDATETOTALSUPPLY is a free data retrieval call binding the contract method 0xe737557f.
//
// Solidity: function MESSAGE_UPDATE_TOTAL_SUPPLY() view returns(bytes)
func (_StBtc *StBtcSession) MESSAGEUPDATETOTALSUPPLY() ([]byte, error) {
	return _StBtc.Contract.MESSAGEUPDATETOTALSUPPLY(&_StBtc.CallOpts)
}

// MESSAGEUPDATETOTALSUPPLY is a free data retrieval call binding the contract method 0xe737557f.
//
// Solidity: function MESSAGE_UPDATE_TOTAL_SUPPLY() view returns(bytes)
func (_StBtc *StBtcCallerSession) MESSAGEUPDATETOTALSUPPLY() ([]byte, error) {
	return _StBtc.Contract.MESSAGEUPDATETOTALSUPPLY(&_StBtc.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_StBtc *StBtcCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_StBtc *StBtcSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _StBtc.Contract.Allowance(&_StBtc.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_StBtc *StBtcCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _StBtc.Contract.Allowance(&_StBtc.CallOpts, owner, spender)
}

// AlphabetCheck is a free data retrieval call binding the contract method 0xaf7b8170.
//
// Solidity: function alphabetCheck(bytes BTCAddress) pure returns(bool)
func (_StBtc *StBtcCaller) AlphabetCheck(opts *bind.CallOpts, BTCAddress []byte) (bool, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "alphabetCheck", BTCAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AlphabetCheck is a free data retrieval call binding the contract method 0xaf7b8170.
//
// Solidity: function alphabetCheck(bytes BTCAddress) pure returns(bool)
func (_StBtc *StBtcSession) AlphabetCheck(BTCAddress []byte) (bool, error) {
	return _StBtc.Contract.AlphabetCheck(&_StBtc.CallOpts, BTCAddress)
}

// AlphabetCheck is a free data retrieval call binding the contract method 0xaf7b8170.
//
// Solidity: function alphabetCheck(bytes BTCAddress) pure returns(bool)
func (_StBtc *StBtcCallerSession) AlphabetCheck(BTCAddress []byte) (bool, error) {
	return _StBtc.Contract.AlphabetCheck(&_StBtc.CallOpts, BTCAddress)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_StBtc *StBtcCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_StBtc *StBtcSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _StBtc.Contract.BalanceOf(&_StBtc.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_StBtc *StBtcCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _StBtc.Contract.BalanceOf(&_StBtc.CallOpts, account)
}

// BtcDepositIds is a free data retrieval call binding the contract method 0x026034f0.
//
// Solidity: function btcDepositIds(bytes32 ) view returns(bool)
func (_StBtc *StBtcCaller) BtcDepositIds(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "btcDepositIds", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// BtcDepositIds is a free data retrieval call binding the contract method 0x026034f0.
//
// Solidity: function btcDepositIds(bytes32 ) view returns(bool)
func (_StBtc *StBtcSession) BtcDepositIds(arg0 [32]byte) (bool, error) {
	return _StBtc.Contract.BtcDepositIds(&_StBtc.CallOpts, arg0)
}

// BtcDepositIds is a free data retrieval call binding the contract method 0x026034f0.
//
// Solidity: function btcDepositIds(bytes32 ) view returns(bool)
func (_StBtc *StBtcCallerSession) BtcDepositIds(arg0 [32]byte) (bool, error) {
	return _StBtc.Contract.BtcDepositIds(&_StBtc.CallOpts, arg0)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_StBtc *StBtcCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_StBtc *StBtcSession) Decimals() (uint8, error) {
	return _StBtc.Contract.Decimals(&_StBtc.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_StBtc *StBtcCallerSession) Decimals() (uint8, error) {
	return _StBtc.Contract.Decimals(&_StBtc.CallOpts)
}

// EncodeInvoice is a free data retrieval call binding the contract method 0xe0a04610.
//
// Solidity: function encodeInvoice((bytes32,address,uint256) invoice) view returns(bytes)
func (_StBtc *StBtcCaller) EncodeInvoice(opts *bind.CallOpts, invoice StBTCMintInvoice) ([]byte, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "encodeInvoice", invoice)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EncodeInvoice is a free data retrieval call binding the contract method 0xe0a04610.
//
// Solidity: function encodeInvoice((bytes32,address,uint256) invoice) view returns(bytes)
func (_StBtc *StBtcSession) EncodeInvoice(invoice StBTCMintInvoice) ([]byte, error) {
	return _StBtc.Contract.EncodeInvoice(&_StBtc.CallOpts, invoice)
}

// EncodeInvoice is a free data retrieval call binding the contract method 0xe0a04610.
//
// Solidity: function encodeInvoice((bytes32,address,uint256) invoice) view returns(bytes)
func (_StBtc *StBtcCallerSession) EncodeInvoice(invoice StBTCMintInvoice) ([]byte, error) {
	return _StBtc.Contract.EncodeInvoice(&_StBtc.CallOpts, invoice)
}

// EncodeTotalSupplyUpdate is a free data retrieval call binding the contract method 0x8c659bf2.
//
// Solidity: function encodeTotalSupplyUpdate(uint256 nonce, uint256 delta) view returns(bytes)
func (_StBtc *StBtcCaller) EncodeTotalSupplyUpdate(opts *bind.CallOpts, nonce *big.Int, delta *big.Int) ([]byte, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "encodeTotalSupplyUpdate", nonce, delta)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EncodeTotalSupplyUpdate is a free data retrieval call binding the contract method 0x8c659bf2.
//
// Solidity: function encodeTotalSupplyUpdate(uint256 nonce, uint256 delta) view returns(bytes)
func (_StBtc *StBtcSession) EncodeTotalSupplyUpdate(nonce *big.Int, delta *big.Int) ([]byte, error) {
	return _StBtc.Contract.EncodeTotalSupplyUpdate(&_StBtc.CallOpts, nonce, delta)
}

// EncodeTotalSupplyUpdate is a free data retrieval call binding the contract method 0x8c659bf2.
//
// Solidity: function encodeTotalSupplyUpdate(uint256 nonce, uint256 delta) view returns(bytes)
func (_StBtc *StBtcCallerSession) EncodeTotalSupplyUpdate(nonce *big.Int, delta *big.Int) ([]byte, error) {
	return _StBtc.Contract.EncodeTotalSupplyUpdate(&_StBtc.CallOpts, nonce, delta)
}

// EqualBytes is a free data retrieval call binding the contract method 0x4cac70ff.
//
// Solidity: function equalBytes(bytes one, bytes two) pure returns(bool)
func (_StBtc *StBtcCaller) EqualBytes(opts *bind.CallOpts, one []byte, two []byte) (bool, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "equalBytes", one, two)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// EqualBytes is a free data retrieval call binding the contract method 0x4cac70ff.
//
// Solidity: function equalBytes(bytes one, bytes two) pure returns(bool)
func (_StBtc *StBtcSession) EqualBytes(one []byte, two []byte) (bool, error) {
	return _StBtc.Contract.EqualBytes(&_StBtc.CallOpts, one, two)
}

// EqualBytes is a free data retrieval call binding the contract method 0x4cac70ff.
//
// Solidity: function equalBytes(bytes one, bytes two) pure returns(bool)
func (_StBtc *StBtcCallerSession) EqualBytes(one []byte, two []byte) (bool, error) {
	return _StBtc.Contract.EqualBytes(&_StBtc.CallOpts, one, two)
}

// GetMintInvoiceHash is a free data retrieval call binding the contract method 0xe07fbd00.
//
// Solidity: function getMintInvoiceHash((bytes32,address,uint256) invoice) view returns(bytes32)
func (_StBtc *StBtcCaller) GetMintInvoiceHash(opts *bind.CallOpts, invoice StBTCMintInvoice) ([32]byte, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "getMintInvoiceHash", invoice)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetMintInvoiceHash is a free data retrieval call binding the contract method 0xe07fbd00.
//
// Solidity: function getMintInvoiceHash((bytes32,address,uint256) invoice) view returns(bytes32)
func (_StBtc *StBtcSession) GetMintInvoiceHash(invoice StBTCMintInvoice) ([32]byte, error) {
	return _StBtc.Contract.GetMintInvoiceHash(&_StBtc.CallOpts, invoice)
}

// GetMintInvoiceHash is a free data retrieval call binding the contract method 0xe07fbd00.
//
// Solidity: function getMintInvoiceHash((bytes32,address,uint256) invoice) view returns(bytes32)
func (_StBtc *StBtcCallerSession) GetMintInvoiceHash(invoice StBTCMintInvoice) ([32]byte, error) {
	return _StBtc.Contract.GetMintInvoiceHash(&_StBtc.CallOpts, invoice)
}

// GetShares is a free data retrieval call binding the contract method 0xf04da65b.
//
// Solidity: function getShares(address account) view returns(uint256)
func (_StBtc *StBtcCaller) GetShares(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "getShares", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetShares is a free data retrieval call binding the contract method 0xf04da65b.
//
// Solidity: function getShares(address account) view returns(uint256)
func (_StBtc *StBtcSession) GetShares(account common.Address) (*big.Int, error) {
	return _StBtc.Contract.GetShares(&_StBtc.CallOpts, account)
}

// GetShares is a free data retrieval call binding the contract method 0xf04da65b.
//
// Solidity: function getShares(address account) view returns(uint256)
func (_StBtc *StBtcCallerSession) GetShares(account common.Address) (*big.Int, error) {
	return _StBtc.Contract.GetShares(&_StBtc.CallOpts, account)
}

// GetTotalSupplyUpdateHash is a free data retrieval call binding the contract method 0x80239a04.
//
// Solidity: function getTotalSupplyUpdateHash(uint256 nonce, uint256 delta) view returns(bytes32)
func (_StBtc *StBtcCaller) GetTotalSupplyUpdateHash(opts *bind.CallOpts, nonce *big.Int, delta *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "getTotalSupplyUpdateHash", nonce, delta)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetTotalSupplyUpdateHash is a free data retrieval call binding the contract method 0x80239a04.
//
// Solidity: function getTotalSupplyUpdateHash(uint256 nonce, uint256 delta) view returns(bytes32)
func (_StBtc *StBtcSession) GetTotalSupplyUpdateHash(nonce *big.Int, delta *big.Int) ([32]byte, error) {
	return _StBtc.Contract.GetTotalSupplyUpdateHash(&_StBtc.CallOpts, nonce, delta)
}

// GetTotalSupplyUpdateHash is a free data retrieval call binding the contract method 0x80239a04.
//
// Solidity: function getTotalSupplyUpdateHash(uint256 nonce, uint256 delta) view returns(bytes32)
func (_StBtc *StBtcCallerSession) GetTotalSupplyUpdateHash(nonce *big.Int, delta *big.Int) ([32]byte, error) {
	return _StBtc.Contract.GetTotalSupplyUpdateHash(&_StBtc.CallOpts, nonce, delta)
}

// MinWithdrawAmount is a free data retrieval call binding the contract method 0x457e1a49.
//
// Solidity: function minWithdrawAmount() view returns(uint256)
func (_StBtc *StBtcCaller) MinWithdrawAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "minWithdrawAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinWithdrawAmount is a free data retrieval call binding the contract method 0x457e1a49.
//
// Solidity: function minWithdrawAmount() view returns(uint256)
func (_StBtc *StBtcSession) MinWithdrawAmount() (*big.Int, error) {
	return _StBtc.Contract.MinWithdrawAmount(&_StBtc.CallOpts)
}

// MinWithdrawAmount is a free data retrieval call binding the contract method 0x457e1a49.
//
// Solidity: function minWithdrawAmount() view returns(uint256)
func (_StBtc *StBtcCallerSession) MinWithdrawAmount() (*big.Int, error) {
	return _StBtc.Contract.MinWithdrawAmount(&_StBtc.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StBtc *StBtcCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StBtc *StBtcSession) Name() (string, error) {
	return _StBtc.Contract.Name(&_StBtc.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StBtc *StBtcCallerSession) Name() (string, error) {
	return _StBtc.Contract.Name(&_StBtc.CallOpts)
}

// Network is a free data retrieval call binding the contract method 0x6739afca.
//
// Solidity: function network() view returns(uint8)
func (_StBtc *StBtcCaller) Network(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "network")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Network is a free data retrieval call binding the contract method 0x6739afca.
//
// Solidity: function network() view returns(uint8)
func (_StBtc *StBtcSession) Network() (uint8, error) {
	return _StBtc.Contract.Network(&_StBtc.CallOpts)
}

// Network is a free data retrieval call binding the contract method 0x6739afca.
//
// Solidity: function network() view returns(uint8)
func (_StBtc *StBtcCallerSession) Network() (uint8, error) {
	return _StBtc.Contract.Network(&_StBtc.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StBtc *StBtcCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StBtc *StBtcSession) Owner() (common.Address, error) {
	return _StBtc.Contract.Owner(&_StBtc.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StBtc *StBtcCallerSession) Owner() (common.Address, error) {
	return _StBtc.Contract.Owner(&_StBtc.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_StBtc *StBtcCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_StBtc *StBtcSession) Paused() (bool, error) {
	return _StBtc.Contract.Paused(&_StBtc.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_StBtc *StBtcCallerSession) Paused() (bool, error) {
	return _StBtc.Contract.Paused(&_StBtc.CallOpts)
}

// PolymodStep is a free data retrieval call binding the contract method 0x80cf79c8.
//
// Solidity: function polymodStep(uint256 pre) pure returns(uint256)
func (_StBtc *StBtcCaller) PolymodStep(opts *bind.CallOpts, pre *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "polymodStep", pre)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PolymodStep is a free data retrieval call binding the contract method 0x80cf79c8.
//
// Solidity: function polymodStep(uint256 pre) pure returns(uint256)
func (_StBtc *StBtcSession) PolymodStep(pre *big.Int) (*big.Int, error) {
	return _StBtc.Contract.PolymodStep(&_StBtc.CallOpts, pre)
}

// PolymodStep is a free data retrieval call binding the contract method 0x80cf79c8.
//
// Solidity: function polymodStep(uint256 pre) pure returns(uint256)
func (_StBtc *StBtcCallerSession) PolymodStep(pre *big.Int) (*big.Int, error) {
	return _StBtc.Contract.PolymodStep(&_StBtc.CallOpts, pre)
}

// PrefixChk is a free data retrieval call binding the contract method 0xd3b6d7f5.
//
// Solidity: function prefixChk(bytes prefix) pure returns(uint256)
func (_StBtc *StBtcCaller) PrefixChk(opts *bind.CallOpts, prefix []byte) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "prefixChk", prefix)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PrefixChk is a free data retrieval call binding the contract method 0xd3b6d7f5.
//
// Solidity: function prefixChk(bytes prefix) pure returns(uint256)
func (_StBtc *StBtcSession) PrefixChk(prefix []byte) (*big.Int, error) {
	return _StBtc.Contract.PrefixChk(&_StBtc.CallOpts, prefix)
}

// PrefixChk is a free data retrieval call binding the contract method 0xd3b6d7f5.
//
// Solidity: function prefixChk(bytes prefix) pure returns(uint256)
func (_StBtc *StBtcCallerSession) PrefixChk(prefix []byte) (*big.Int, error) {
	return _StBtc.Contract.PrefixChk(&_StBtc.CallOpts, prefix)
}

// RedeemCounter is a free data retrieval call binding the contract method 0xa7ce4565.
//
// Solidity: function redeemCounter() view returns(uint256)
func (_StBtc *StBtcCaller) RedeemCounter(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "redeemCounter")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RedeemCounter is a free data retrieval call binding the contract method 0xa7ce4565.
//
// Solidity: function redeemCounter() view returns(uint256)
func (_StBtc *StBtcSession) RedeemCounter() (*big.Int, error) {
	return _StBtc.Contract.RedeemCounter(&_StBtc.CallOpts)
}

// RedeemCounter is a free data retrieval call binding the contract method 0xa7ce4565.
//
// Solidity: function redeemCounter() view returns(uint256)
func (_StBtc *StBtcCallerSession) RedeemCounter() (*big.Int, error) {
	return _StBtc.Contract.RedeemCounter(&_StBtc.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StBtc *StBtcCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StBtc *StBtcSession) Symbol() (string, error) {
	return _StBtc.Contract.Symbol(&_StBtc.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StBtc *StBtcCallerSession) Symbol() (string, error) {
	return _StBtc.Contract.Symbol(&_StBtc.CallOpts)
}

// TotalShares is a free data retrieval call binding the contract method 0x3a98ef39.
//
// Solidity: function totalShares() view returns(uint256)
func (_StBtc *StBtcCaller) TotalShares(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "totalShares")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalShares is a free data retrieval call binding the contract method 0x3a98ef39.
//
// Solidity: function totalShares() view returns(uint256)
func (_StBtc *StBtcSession) TotalShares() (*big.Int, error) {
	return _StBtc.Contract.TotalShares(&_StBtc.CallOpts)
}

// TotalShares is a free data retrieval call binding the contract method 0x3a98ef39.
//
// Solidity: function totalShares() view returns(uint256)
func (_StBtc *StBtcCallerSession) TotalShares() (*big.Int, error) {
	return _StBtc.Contract.TotalShares(&_StBtc.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_StBtc *StBtcCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_StBtc *StBtcSession) TotalSupply() (*big.Int, error) {
	return _StBtc.Contract.TotalSupply(&_StBtc.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_StBtc *StBtcCallerSession) TotalSupply() (*big.Int, error) {
	return _StBtc.Contract.TotalSupply(&_StBtc.CallOpts)
}

// TotalSupplyUpdateNonce is a free data retrieval call binding the contract method 0xaf7f131f.
//
// Solidity: function totalSupplyUpdateNonce() view returns(uint256)
func (_StBtc *StBtcCaller) TotalSupplyUpdateNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "totalSupplyUpdateNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupplyUpdateNonce is a free data retrieval call binding the contract method 0xaf7f131f.
//
// Solidity: function totalSupplyUpdateNonce() view returns(uint256)
func (_StBtc *StBtcSession) TotalSupplyUpdateNonce() (*big.Int, error) {
	return _StBtc.Contract.TotalSupplyUpdateNonce(&_StBtc.CallOpts)
}

// TotalSupplyUpdateNonce is a free data retrieval call binding the contract method 0xaf7f131f.
//
// Solidity: function totalSupplyUpdateNonce() view returns(uint256)
func (_StBtc *StBtcCallerSession) TotalSupplyUpdateNonce() (*big.Int, error) {
	return _StBtc.Contract.TotalSupplyUpdateNonce(&_StBtc.CallOpts)
}

// ValidateBase58Checksum is a free data retrieval call binding the contract method 0x9647ea37.
//
// Solidity: function validateBase58Checksum(string btcAddress) view returns(bool)
func (_StBtc *StBtcCaller) ValidateBase58Checksum(opts *bind.CallOpts, btcAddress string) (bool, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "validateBase58Checksum", btcAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidateBase58Checksum is a free data retrieval call binding the contract method 0x9647ea37.
//
// Solidity: function validateBase58Checksum(string btcAddress) view returns(bool)
func (_StBtc *StBtcSession) ValidateBase58Checksum(btcAddress string) (bool, error) {
	return _StBtc.Contract.ValidateBase58Checksum(&_StBtc.CallOpts, btcAddress)
}

// ValidateBase58Checksum is a free data retrieval call binding the contract method 0x9647ea37.
//
// Solidity: function validateBase58Checksum(string btcAddress) view returns(bool)
func (_StBtc *StBtcCallerSession) ValidateBase58Checksum(btcAddress string) (bool, error) {
	return _StBtc.Contract.ValidateBase58Checksum(&_StBtc.CallOpts, btcAddress)
}

// ValidateBech32Checksum is a free data retrieval call binding the contract method 0xd354c65d.
//
// Solidity: function validateBech32Checksum(string btcAddress) view returns(bool)
func (_StBtc *StBtcCaller) ValidateBech32Checksum(opts *bind.CallOpts, btcAddress string) (bool, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "validateBech32Checksum", btcAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidateBech32Checksum is a free data retrieval call binding the contract method 0xd354c65d.
//
// Solidity: function validateBech32Checksum(string btcAddress) view returns(bool)
func (_StBtc *StBtcSession) ValidateBech32Checksum(btcAddress string) (bool, error) {
	return _StBtc.Contract.ValidateBech32Checksum(&_StBtc.CallOpts, btcAddress)
}

// ValidateBech32Checksum is a free data retrieval call binding the contract method 0xd354c65d.
//
// Solidity: function validateBech32Checksum(string btcAddress) view returns(bool)
func (_StBtc *StBtcCallerSession) ValidateBech32Checksum(btcAddress string) (bool, error) {
	return _StBtc.Contract.ValidateBech32Checksum(&_StBtc.CallOpts, btcAddress)
}

// ValidateBitcoinAddress is a free data retrieval call binding the contract method 0x0b2aeb6c.
//
// Solidity: function validateBitcoinAddress(uint8 network, string BTCAddress) view returns(bool)
func (_StBtc *StBtcCaller) ValidateBitcoinAddress(opts *bind.CallOpts, network uint8, BTCAddress string) (bool, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "validateBitcoinAddress", network, BTCAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidateBitcoinAddress is a free data retrieval call binding the contract method 0x0b2aeb6c.
//
// Solidity: function validateBitcoinAddress(uint8 network, string BTCAddress) view returns(bool)
func (_StBtc *StBtcSession) ValidateBitcoinAddress(network uint8, BTCAddress string) (bool, error) {
	return _StBtc.Contract.ValidateBitcoinAddress(&_StBtc.CallOpts, network, BTCAddress)
}

// ValidateBitcoinAddress is a free data retrieval call binding the contract method 0x0b2aeb6c.
//
// Solidity: function validateBitcoinAddress(uint8 network, string BTCAddress) view returns(bool)
func (_StBtc *StBtcCallerSession) ValidateBitcoinAddress(network uint8, BTCAddress string) (bool, error) {
	return _StBtc.Contract.ValidateBitcoinAddress(&_StBtc.CallOpts, network, BTCAddress)
}

// ValidatorRegistry is a free data retrieval call binding the contract method 0xf376ebbb.
//
// Solidity: function validatorRegistry() view returns(address)
func (_StBtc *StBtcCaller) ValidatorRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "validatorRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorRegistry is a free data retrieval call binding the contract method 0xf376ebbb.
//
// Solidity: function validatorRegistry() view returns(address)
func (_StBtc *StBtcSession) ValidatorRegistry() (common.Address, error) {
	return _StBtc.Contract.ValidatorRegistry(&_StBtc.CallOpts)
}

// ValidatorRegistry is a free data retrieval call binding the contract method 0xf376ebbb.
//
// Solidity: function validatorRegistry() view returns(address)
func (_StBtc *StBtcCallerSession) ValidatorRegistry() (common.Address, error) {
	return _StBtc.Contract.ValidatorRegistry(&_StBtc.CallOpts)
}

// Verify is a free data retrieval call binding the contract method 0x0fde6e55.
//
// Solidity: function verify(uint256 px, uint256 rx, uint256 s, bytes32 m) pure returns(bool)
func (_StBtc *StBtcCaller) Verify(opts *bind.CallOpts, px *big.Int, rx *big.Int, s *big.Int, m [32]byte) (bool, error) {
	var out []interface{}
	err := _StBtc.contract.Call(opts, &out, "verify", px, rx, s, m)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0x0fde6e55.
//
// Solidity: function verify(uint256 px, uint256 rx, uint256 s, bytes32 m) pure returns(bool)
func (_StBtc *StBtcSession) Verify(px *big.Int, rx *big.Int, s *big.Int, m [32]byte) (bool, error) {
	return _StBtc.Contract.Verify(&_StBtc.CallOpts, px, rx, s, m)
}

// Verify is a free data retrieval call binding the contract method 0x0fde6e55.
//
// Solidity: function verify(uint256 px, uint256 rx, uint256 s, bytes32 m) pure returns(bool)
func (_StBtc *StBtcCallerSession) Verify(px *big.Int, rx *big.Int, s *big.Int, m [32]byte) (bool, error) {
	return _StBtc.Contract.Verify(&_StBtc.CallOpts, px, rx, s, m)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_StBtc *StBtcTransactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_StBtc *StBtcSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _StBtc.Contract.Approve(&_StBtc.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_StBtc *StBtcTransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _StBtc.Contract.Approve(&_StBtc.TransactOpts, spender, value)
}

// Initialize is a paid mutator transaction binding the contract method 0x5187599d.
//
// Solidity: function initialize(uint8 _network, address _validatorRegistry) returns()
func (_StBtc *StBtcTransactor) Initialize(opts *bind.TransactOpts, _network uint8, _validatorRegistry common.Address) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "initialize", _network, _validatorRegistry)
}

// Initialize is a paid mutator transaction binding the contract method 0x5187599d.
//
// Solidity: function initialize(uint8 _network, address _validatorRegistry) returns()
func (_StBtc *StBtcSession) Initialize(_network uint8, _validatorRegistry common.Address) (*types.Transaction, error) {
	return _StBtc.Contract.Initialize(&_StBtc.TransactOpts, _network, _validatorRegistry)
}

// Initialize is a paid mutator transaction binding the contract method 0x5187599d.
//
// Solidity: function initialize(uint8 _network, address _validatorRegistry) returns()
func (_StBtc *StBtcTransactorSession) Initialize(_network uint8, _validatorRegistry common.Address) (*types.Transaction, error) {
	return _StBtc.Contract.Initialize(&_StBtc.TransactOpts, _network, _validatorRegistry)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _validatorRegistry) returns()
func (_StBtc *StBtcTransactor) Initialize0(opts *bind.TransactOpts, _validatorRegistry common.Address) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "initialize0", _validatorRegistry)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _validatorRegistry) returns()
func (_StBtc *StBtcSession) Initialize0(_validatorRegistry common.Address) (*types.Transaction, error) {
	return _StBtc.Contract.Initialize0(&_StBtc.TransactOpts, _validatorRegistry)
}

// Initialize0 is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _validatorRegistry) returns()
func (_StBtc *StBtcTransactorSession) Initialize0(_validatorRegistry common.Address) (*types.Transaction, error) {
	return _StBtc.Contract.Initialize0(&_StBtc.TransactOpts, _validatorRegistry)
}

// Mint is a paid mutator transaction binding the contract method 0x780f8df3.
//
// Solidity: function mint(uint256 _amount, address _recipient, bytes32 _btcDepositId) returns()
func (_StBtc *StBtcTransactor) Mint(opts *bind.TransactOpts, _amount *big.Int, _recipient common.Address, _btcDepositId [32]byte) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "mint", _amount, _recipient, _btcDepositId)
}

// Mint is a paid mutator transaction binding the contract method 0x780f8df3.
//
// Solidity: function mint(uint256 _amount, address _recipient, bytes32 _btcDepositId) returns()
func (_StBtc *StBtcSession) Mint(_amount *big.Int, _recipient common.Address, _btcDepositId [32]byte) (*types.Transaction, error) {
	return _StBtc.Contract.Mint(&_StBtc.TransactOpts, _amount, _recipient, _btcDepositId)
}

// Mint is a paid mutator transaction binding the contract method 0x780f8df3.
//
// Solidity: function mint(uint256 _amount, address _recipient, bytes32 _btcDepositId) returns()
func (_StBtc *StBtcTransactorSession) Mint(_amount *big.Int, _recipient common.Address, _btcDepositId [32]byte) (*types.Transaction, error) {
	return _StBtc.Contract.Mint(&_StBtc.TransactOpts, _amount, _recipient, _btcDepositId)
}

// Mint0 is a paid mutator transaction binding the contract method 0x9fd95687.
//
// Solidity: function mint((bytes32,address,uint256) invoice, bytes signature) returns()
func (_StBtc *StBtcTransactor) Mint0(opts *bind.TransactOpts, invoice StBTCMintInvoice, signature []byte) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "mint0", invoice, signature)
}

// Mint0 is a paid mutator transaction binding the contract method 0x9fd95687.
//
// Solidity: function mint((bytes32,address,uint256) invoice, bytes signature) returns()
func (_StBtc *StBtcSession) Mint0(invoice StBTCMintInvoice, signature []byte) (*types.Transaction, error) {
	return _StBtc.Contract.Mint0(&_StBtc.TransactOpts, invoice, signature)
}

// Mint0 is a paid mutator transaction binding the contract method 0x9fd95687.
//
// Solidity: function mint((bytes32,address,uint256) invoice, bytes signature) returns()
func (_StBtc *StBtcTransactorSession) Mint0(invoice StBTCMintInvoice, signature []byte) (*types.Transaction, error) {
	return _StBtc.Contract.Mint0(&_StBtc.TransactOpts, invoice, signature)
}

// MintRewards is a paid mutator transaction binding the contract method 0x21172f3b.
//
// Solidity: function mintRewards(uint256 nonce, uint256 delta, bytes signature) returns()
func (_StBtc *StBtcTransactor) MintRewards(opts *bind.TransactOpts, nonce *big.Int, delta *big.Int, signature []byte) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "mintRewards", nonce, delta, signature)
}

// MintRewards is a paid mutator transaction binding the contract method 0x21172f3b.
//
// Solidity: function mintRewards(uint256 nonce, uint256 delta, bytes signature) returns()
func (_StBtc *StBtcSession) MintRewards(nonce *big.Int, delta *big.Int, signature []byte) (*types.Transaction, error) {
	return _StBtc.Contract.MintRewards(&_StBtc.TransactOpts, nonce, delta, signature)
}

// MintRewards is a paid mutator transaction binding the contract method 0x21172f3b.
//
// Solidity: function mintRewards(uint256 nonce, uint256 delta, bytes signature) returns()
func (_StBtc *StBtcTransactorSession) MintRewards(nonce *big.Int, delta *big.Int, signature []byte) (*types.Transaction, error) {
	return _StBtc.Contract.MintRewards(&_StBtc.TransactOpts, nonce, delta, signature)
}

// MintRewards0 is a paid mutator transaction binding the contract method 0x943a21ab.
//
// Solidity: function mintRewards(uint256 nonce, uint256 delta) returns()
func (_StBtc *StBtcTransactor) MintRewards0(opts *bind.TransactOpts, nonce *big.Int, delta *big.Int) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "mintRewards0", nonce, delta)
}

// MintRewards0 is a paid mutator transaction binding the contract method 0x943a21ab.
//
// Solidity: function mintRewards(uint256 nonce, uint256 delta) returns()
func (_StBtc *StBtcSession) MintRewards0(nonce *big.Int, delta *big.Int) (*types.Transaction, error) {
	return _StBtc.Contract.MintRewards0(&_StBtc.TransactOpts, nonce, delta)
}

// MintRewards0 is a paid mutator transaction binding the contract method 0x943a21ab.
//
// Solidity: function mintRewards(uint256 nonce, uint256 delta) returns()
func (_StBtc *StBtcTransactorSession) MintRewards0(nonce *big.Int, delta *big.Int) (*types.Transaction, error) {
	return _StBtc.Contract.MintRewards0(&_StBtc.TransactOpts, nonce, delta)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_StBtc *StBtcTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_StBtc *StBtcSession) Pause() (*types.Transaction, error) {
	return _StBtc.Contract.Pause(&_StBtc.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_StBtc *StBtcTransactorSession) Pause() (*types.Transaction, error) {
	return _StBtc.Contract.Pause(&_StBtc.TransactOpts)
}

// Redeem is a paid mutator transaction binding the contract method 0x24b76fd5.
//
// Solidity: function redeem(uint256 _amount, string BTCAddress) returns()
func (_StBtc *StBtcTransactor) Redeem(opts *bind.TransactOpts, _amount *big.Int, BTCAddress string) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "redeem", _amount, BTCAddress)
}

// Redeem is a paid mutator transaction binding the contract method 0x24b76fd5.
//
// Solidity: function redeem(uint256 _amount, string BTCAddress) returns()
func (_StBtc *StBtcSession) Redeem(_amount *big.Int, BTCAddress string) (*types.Transaction, error) {
	return _StBtc.Contract.Redeem(&_StBtc.TransactOpts, _amount, BTCAddress)
}

// Redeem is a paid mutator transaction binding the contract method 0x24b76fd5.
//
// Solidity: function redeem(uint256 _amount, string BTCAddress) returns()
func (_StBtc *StBtcTransactorSession) Redeem(_amount *big.Int, BTCAddress string) (*types.Transaction, error) {
	return _StBtc.Contract.Redeem(&_StBtc.TransactOpts, _amount, BTCAddress)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StBtc *StBtcTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StBtc *StBtcSession) RenounceOwnership() (*types.Transaction, error) {
	return _StBtc.Contract.RenounceOwnership(&_StBtc.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StBtc *StBtcTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _StBtc.Contract.RenounceOwnership(&_StBtc.TransactOpts)
}

// SetMinWithdrawAmount is a paid mutator transaction binding the contract method 0x5abdb0dc.
//
// Solidity: function setMinWithdrawAmount(uint256 _minWithdrawAmount) returns()
func (_StBtc *StBtcTransactor) SetMinWithdrawAmount(opts *bind.TransactOpts, _minWithdrawAmount *big.Int) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "setMinWithdrawAmount", _minWithdrawAmount)
}

// SetMinWithdrawAmount is a paid mutator transaction binding the contract method 0x5abdb0dc.
//
// Solidity: function setMinWithdrawAmount(uint256 _minWithdrawAmount) returns()
func (_StBtc *StBtcSession) SetMinWithdrawAmount(_minWithdrawAmount *big.Int) (*types.Transaction, error) {
	return _StBtc.Contract.SetMinWithdrawAmount(&_StBtc.TransactOpts, _minWithdrawAmount)
}

// SetMinWithdrawAmount is a paid mutator transaction binding the contract method 0x5abdb0dc.
//
// Solidity: function setMinWithdrawAmount(uint256 _minWithdrawAmount) returns()
func (_StBtc *StBtcTransactorSession) SetMinWithdrawAmount(_minWithdrawAmount *big.Int) (*types.Transaction, error) {
	return _StBtc.Contract.SetMinWithdrawAmount(&_StBtc.TransactOpts, _minWithdrawAmount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_StBtc *StBtcTransactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_StBtc *StBtcSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _StBtc.Contract.Transfer(&_StBtc.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_StBtc *StBtcTransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _StBtc.Contract.Transfer(&_StBtc.TransactOpts, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_StBtc *StBtcTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_StBtc *StBtcSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _StBtc.Contract.TransferFrom(&_StBtc.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_StBtc *StBtcTransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _StBtc.Contract.TransferFrom(&_StBtc.TransactOpts, from, to, value)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StBtc *StBtcTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StBtc *StBtcSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _StBtc.Contract.TransferOwnership(&_StBtc.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StBtc *StBtcTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _StBtc.Contract.TransferOwnership(&_StBtc.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_StBtc *StBtcTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StBtc.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_StBtc *StBtcSession) Unpause() (*types.Transaction, error) {
	return _StBtc.Contract.Unpause(&_StBtc.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_StBtc *StBtcTransactorSession) Unpause() (*types.Transaction, error) {
	return _StBtc.Contract.Unpause(&_StBtc.TransactOpts)
}

// StBtcApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the StBtc contract.
type StBtcApprovalIterator struct {
	Event *StBtcApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StBtcApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StBtcApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StBtcApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StBtcApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StBtcApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StBtcApproval represents a Approval event raised by the StBtc contract.
type StBtcApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_StBtc *StBtcFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*StBtcApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _StBtc.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &StBtcApprovalIterator{contract: _StBtc.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_StBtc *StBtcFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *StBtcApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _StBtc.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StBtcApproval)
				if err := _StBtc.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_StBtc *StBtcFilterer) ParseApproval(log types.Log) (*StBtcApproval, error) {
	event := new(StBtcApproval)
	if err := _StBtc.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StBtcInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the StBtc contract.
type StBtcInitializedIterator struct {
	Event *StBtcInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StBtcInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StBtcInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StBtcInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StBtcInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StBtcInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StBtcInitialized represents a Initialized event raised by the StBtc contract.
type StBtcInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_StBtc *StBtcFilterer) FilterInitialized(opts *bind.FilterOpts) (*StBtcInitializedIterator, error) {

	logs, sub, err := _StBtc.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &StBtcInitializedIterator{contract: _StBtc.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_StBtc *StBtcFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *StBtcInitialized) (event.Subscription, error) {

	logs, sub, err := _StBtc.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StBtcInitialized)
				if err := _StBtc.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_StBtc *StBtcFilterer) ParseInitialized(log types.Log) (*StBtcInitialized, error) {
	event := new(StBtcInitialized)
	if err := _StBtc.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StBtcMintBtcEventIterator is returned from FilterMintBtcEvent and is used to iterate over the raw logs and unpacked data for MintBtcEvent events raised by the StBtc contract.
type StBtcMintBtcEventIterator struct {
	Event *StBtcMintBtcEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StBtcMintBtcEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StBtcMintBtcEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StBtcMintBtcEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StBtcMintBtcEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StBtcMintBtcEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StBtcMintBtcEvent represents a MintBtcEvent event raised by the StBtc contract.
type StBtcMintBtcEvent struct {
	To           common.Address
	Value        *big.Int
	BtcDepositId [32]byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterMintBtcEvent is a free log retrieval operation binding the contract event 0xb73f3e96d1e157f064cb3a8d0abed06bcec05e5515bf7486364c027dab6aa469.
//
// Solidity: event MintBtcEvent(address indexed _to, uint256 _value, bytes32 _btcDepositId)
func (_StBtc *StBtcFilterer) FilterMintBtcEvent(opts *bind.FilterOpts, _to []common.Address) (*StBtcMintBtcEventIterator, error) {

	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _StBtc.contract.FilterLogs(opts, "MintBtcEvent", _toRule)
	if err != nil {
		return nil, err
	}
	return &StBtcMintBtcEventIterator{contract: _StBtc.contract, event: "MintBtcEvent", logs: logs, sub: sub}, nil
}

// WatchMintBtcEvent is a free log subscription operation binding the contract event 0xb73f3e96d1e157f064cb3a8d0abed06bcec05e5515bf7486364c027dab6aa469.
//
// Solidity: event MintBtcEvent(address indexed _to, uint256 _value, bytes32 _btcDepositId)
func (_StBtc *StBtcFilterer) WatchMintBtcEvent(opts *bind.WatchOpts, sink chan<- *StBtcMintBtcEvent, _to []common.Address) (event.Subscription, error) {

	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _StBtc.contract.WatchLogs(opts, "MintBtcEvent", _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StBtcMintBtcEvent)
				if err := _StBtc.contract.UnpackLog(event, "MintBtcEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMintBtcEvent is a log parse operation binding the contract event 0xb73f3e96d1e157f064cb3a8d0abed06bcec05e5515bf7486364c027dab6aa469.
//
// Solidity: event MintBtcEvent(address indexed _to, uint256 _value, bytes32 _btcDepositId)
func (_StBtc *StBtcFilterer) ParseMintBtcEvent(log types.Log) (*StBtcMintBtcEvent, error) {
	event := new(StBtcMintBtcEvent)
	if err := _StBtc.contract.UnpackLog(event, "MintBtcEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StBtcOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the StBtc contract.
type StBtcOwnershipTransferredIterator struct {
	Event *StBtcOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StBtcOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StBtcOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StBtcOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StBtcOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StBtcOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StBtcOwnershipTransferred represents a OwnershipTransferred event raised by the StBtc contract.
type StBtcOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StBtc *StBtcFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*StBtcOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _StBtc.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &StBtcOwnershipTransferredIterator{contract: _StBtc.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StBtc *StBtcFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *StBtcOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _StBtc.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StBtcOwnershipTransferred)
				if err := _StBtc.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StBtc *StBtcFilterer) ParseOwnershipTransferred(log types.Log) (*StBtcOwnershipTransferred, error) {
	event := new(StBtcOwnershipTransferred)
	if err := _StBtc.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StBtcPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the StBtc contract.
type StBtcPausedIterator struct {
	Event *StBtcPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StBtcPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StBtcPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StBtcPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StBtcPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StBtcPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StBtcPaused represents a Paused event raised by the StBtc contract.
type StBtcPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_StBtc *StBtcFilterer) FilterPaused(opts *bind.FilterOpts) (*StBtcPausedIterator, error) {

	logs, sub, err := _StBtc.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &StBtcPausedIterator{contract: _StBtc.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_StBtc *StBtcFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *StBtcPaused) (event.Subscription, error) {

	logs, sub, err := _StBtc.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StBtcPaused)
				if err := _StBtc.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_StBtc *StBtcFilterer) ParsePaused(log types.Log) (*StBtcPaused, error) {
	event := new(StBtcPaused)
	if err := _StBtc.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StBtcRebaseIterator is returned from FilterRebase and is used to iterate over the raw logs and unpacked data for Rebase events raised by the StBtc contract.
type StBtcRebaseIterator struct {
	Event *StBtcRebase // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StBtcRebaseIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StBtcRebase)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StBtcRebase)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StBtcRebaseIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StBtcRebaseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StBtcRebase represents a Rebase event raised by the StBtc contract.
type StBtcRebase struct {
	NewTotalPooledBTC *big.Int
	NewTotalShares    *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRebase is a free log retrieval operation binding the contract event 0x11c6bf55864ff83827df712625d7a80e5583eef0264921025e7cd22003a21511.
//
// Solidity: event Rebase(uint256 newTotalPooledBTC, uint256 newTotalShares)
func (_StBtc *StBtcFilterer) FilterRebase(opts *bind.FilterOpts) (*StBtcRebaseIterator, error) {

	logs, sub, err := _StBtc.contract.FilterLogs(opts, "Rebase")
	if err != nil {
		return nil, err
	}
	return &StBtcRebaseIterator{contract: _StBtc.contract, event: "Rebase", logs: logs, sub: sub}, nil
}

// WatchRebase is a free log subscription operation binding the contract event 0x11c6bf55864ff83827df712625d7a80e5583eef0264921025e7cd22003a21511.
//
// Solidity: event Rebase(uint256 newTotalPooledBTC, uint256 newTotalShares)
func (_StBtc *StBtcFilterer) WatchRebase(opts *bind.WatchOpts, sink chan<- *StBtcRebase) (event.Subscription, error) {

	logs, sub, err := _StBtc.contract.WatchLogs(opts, "Rebase")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StBtcRebase)
				if err := _StBtc.contract.UnpackLog(event, "Rebase", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRebase is a log parse operation binding the contract event 0x11c6bf55864ff83827df712625d7a80e5583eef0264921025e7cd22003a21511.
//
// Solidity: event Rebase(uint256 newTotalPooledBTC, uint256 newTotalShares)
func (_StBtc *StBtcFilterer) ParseRebase(log types.Log) (*StBtcRebase, error) {
	event := new(StBtcRebase)
	if err := _StBtc.contract.UnpackLog(event, "Rebase", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StBtcRedeemBtcEventIterator is returned from FilterRedeemBtcEvent and is used to iterate over the raw logs and unpacked data for RedeemBtcEvent events raised by the StBtc contract.
type StBtcRedeemBtcEventIterator struct {
	Event *StBtcRedeemBtcEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StBtcRedeemBtcEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StBtcRedeemBtcEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StBtcRedeemBtcEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StBtcRedeemBtcEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StBtcRedeemBtcEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StBtcRedeemBtcEvent represents a RedeemBtcEvent event raised by the StBtc contract.
type StBtcRedeemBtcEvent struct {
	From       common.Address
	BTCAddress string
	Value      *big.Int
	Id         *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRedeemBtcEvent is a free log retrieval operation binding the contract event 0x83c16822c691a011b471d2653b84faff158a050c4e117390a6c008ecdefcc14e.
//
// Solidity: event RedeemBtcEvent(address indexed _from, string _BTCAddress, uint256 _value, uint256 _id)
func (_StBtc *StBtcFilterer) FilterRedeemBtcEvent(opts *bind.FilterOpts, _from []common.Address) (*StBtcRedeemBtcEventIterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}

	logs, sub, err := _StBtc.contract.FilterLogs(opts, "RedeemBtcEvent", _fromRule)
	if err != nil {
		return nil, err
	}
	return &StBtcRedeemBtcEventIterator{contract: _StBtc.contract, event: "RedeemBtcEvent", logs: logs, sub: sub}, nil
}

// WatchRedeemBtcEvent is a free log subscription operation binding the contract event 0x83c16822c691a011b471d2653b84faff158a050c4e117390a6c008ecdefcc14e.
//
// Solidity: event RedeemBtcEvent(address indexed _from, string _BTCAddress, uint256 _value, uint256 _id)
func (_StBtc *StBtcFilterer) WatchRedeemBtcEvent(opts *bind.WatchOpts, sink chan<- *StBtcRedeemBtcEvent, _from []common.Address) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}

	logs, sub, err := _StBtc.contract.WatchLogs(opts, "RedeemBtcEvent", _fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StBtcRedeemBtcEvent)
				if err := _StBtc.contract.UnpackLog(event, "RedeemBtcEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeemBtcEvent is a log parse operation binding the contract event 0x83c16822c691a011b471d2653b84faff158a050c4e117390a6c008ecdefcc14e.
//
// Solidity: event RedeemBtcEvent(address indexed _from, string _BTCAddress, uint256 _value, uint256 _id)
func (_StBtc *StBtcFilterer) ParseRedeemBtcEvent(log types.Log) (*StBtcRedeemBtcEvent, error) {
	event := new(StBtcRedeemBtcEvent)
	if err := _StBtc.contract.UnpackLog(event, "RedeemBtcEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StBtcTotalSupplyUpdatedEventIterator is returned from FilterTotalSupplyUpdatedEvent and is used to iterate over the raw logs and unpacked data for TotalSupplyUpdatedEvent events raised by the StBtc contract.
type StBtcTotalSupplyUpdatedEventIterator struct {
	Event *StBtcTotalSupplyUpdatedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StBtcTotalSupplyUpdatedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StBtcTotalSupplyUpdatedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StBtcTotalSupplyUpdatedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StBtcTotalSupplyUpdatedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StBtcTotalSupplyUpdatedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StBtcTotalSupplyUpdatedEvent represents a TotalSupplyUpdatedEvent event raised by the StBtc contract.
type StBtcTotalSupplyUpdatedEvent struct {
	Nonce          *big.Int
	TotalBTCSupply *big.Int
	TotalShares    *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterTotalSupplyUpdatedEvent is a free log retrieval operation binding the contract event 0x339ea31e567d96bc11133446c07d2afa7b1a67accc22bd1b6149fd58d1b93440.
//
// Solidity: event TotalSupplyUpdatedEvent(uint256 _nonce, uint256 _totalBTCSupply, uint256 _totalShares)
func (_StBtc *StBtcFilterer) FilterTotalSupplyUpdatedEvent(opts *bind.FilterOpts) (*StBtcTotalSupplyUpdatedEventIterator, error) {

	logs, sub, err := _StBtc.contract.FilterLogs(opts, "TotalSupplyUpdatedEvent")
	if err != nil {
		return nil, err
	}
	return &StBtcTotalSupplyUpdatedEventIterator{contract: _StBtc.contract, event: "TotalSupplyUpdatedEvent", logs: logs, sub: sub}, nil
}

// WatchTotalSupplyUpdatedEvent is a free log subscription operation binding the contract event 0x339ea31e567d96bc11133446c07d2afa7b1a67accc22bd1b6149fd58d1b93440.
//
// Solidity: event TotalSupplyUpdatedEvent(uint256 _nonce, uint256 _totalBTCSupply, uint256 _totalShares)
func (_StBtc *StBtcFilterer) WatchTotalSupplyUpdatedEvent(opts *bind.WatchOpts, sink chan<- *StBtcTotalSupplyUpdatedEvent) (event.Subscription, error) {

	logs, sub, err := _StBtc.contract.WatchLogs(opts, "TotalSupplyUpdatedEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StBtcTotalSupplyUpdatedEvent)
				if err := _StBtc.contract.UnpackLog(event, "TotalSupplyUpdatedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTotalSupplyUpdatedEvent is a log parse operation binding the contract event 0x339ea31e567d96bc11133446c07d2afa7b1a67accc22bd1b6149fd58d1b93440.
//
// Solidity: event TotalSupplyUpdatedEvent(uint256 _nonce, uint256 _totalBTCSupply, uint256 _totalShares)
func (_StBtc *StBtcFilterer) ParseTotalSupplyUpdatedEvent(log types.Log) (*StBtcTotalSupplyUpdatedEvent, error) {
	event := new(StBtcTotalSupplyUpdatedEvent)
	if err := _StBtc.contract.UnpackLog(event, "TotalSupplyUpdatedEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StBtcTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the StBtc contract.
type StBtcTransferIterator struct {
	Event *StBtcTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StBtcTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StBtcTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StBtcTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StBtcTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StBtcTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StBtcTransfer represents a Transfer event raised by the StBtc contract.
type StBtcTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_StBtc *StBtcFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*StBtcTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _StBtc.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &StBtcTransferIterator{contract: _StBtc.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_StBtc *StBtcFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *StBtcTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _StBtc.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StBtcTransfer)
				if err := _StBtc.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_StBtc *StBtcFilterer) ParseTransfer(log types.Log) (*StBtcTransfer, error) {
	event := new(StBtcTransfer)
	if err := _StBtc.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StBtcUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the StBtc contract.
type StBtcUnpausedIterator struct {
	Event *StBtcUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StBtcUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StBtcUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StBtcUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StBtcUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StBtcUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StBtcUnpaused represents a Unpaused event raised by the StBtc contract.
type StBtcUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_StBtc *StBtcFilterer) FilterUnpaused(opts *bind.FilterOpts) (*StBtcUnpausedIterator, error) {

	logs, sub, err := _StBtc.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &StBtcUnpausedIterator{contract: _StBtc.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_StBtc *StBtcFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *StBtcUnpaused) (event.Subscription, error) {

	logs, sub, err := _StBtc.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StBtcUnpaused)
				if err := _StBtc.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_StBtc *StBtcFilterer) ParseUnpaused(log types.Log) (*StBtcUnpaused, error) {
	event := new(StBtcUnpaused)
	if err := _StBtc.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
