// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package stroomabi

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// UserActivatorMetaData contains all meta data concerning the UserActivator contract.
var UserActivatorMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"activateUser\",\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"activatedAddresses\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"btcAddr1\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"btcAddr2\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getBTCDepositAddress\",\"inputs\":[{\"name\":\"ethAddr\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"networkHrp\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"p1x\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"p1y\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"p2x\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"p2y\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"parseBTCTaprootAddress\",\"inputs\":[{\"name\":\"_hrp\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"_bitcoinAddress\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setSeed\",\"inputs\":[{\"name\":\"_btcAddr1\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"_btcAddr2\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"_network\",\"type\":\"uint8\",\"internalType\":\"enumBitcoinNetworkEncoder.Network\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"wasSeedSet\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SeedChanged\",\"inputs\":[{\"name\":\"btcAddr1\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"btcAddr2\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"hrp\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"UserAddressActivated\",\"inputs\":[{\"name\":\"userETHAddress\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"CannotParseBtcAddress\",\"inputs\":[{\"name\":\"btcAddress\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"hrp\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"err\",\"type\":\"uint8\",\"internalType\":\"enumBech32m.DecodeError\"}]},{\"type\":\"error\",\"name\":\"EncodingIsUnknown\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OwnableInvalidOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OwnableUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"SeedWasNotSetYet\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"UnsupportedBtcAddress\",\"inputs\":[{\"name\":\"btcAddress\",\"type\":\"string\",\"internalType\":\"string\"}]}]",
	Bin: "0x6080604052348015600f57600080fd5b506000805460ff191690553380603f57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b604681604b565b50609d565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61409f806100ac6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063ad38cb0b11610097578063c1d643b111610066578063c1d643b1146101e3578063cca03acb1461020b578063e5451bc814610214578063f2fde38b1461022757600080fd5b8063ad38cb0b146101b6578063ad427415146101bf578063b1185919146101c7578063b4acfe1c146101d057600080fd5b80638da5cb5b116100d35780638da5cb5b146101645780639fa4989c1461017f578063a0ddd62f1461018c578063a62ef0731461019f57600080fd5b80630b68f450146101055780632fbb7ab61461013d5780634edac78914610152578063715018a61461015a575b600080fd5b6101286101133660046138b3565b60096020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61014561023a565b604051610134919061392c565b6101456102c8565b6101626102d5565b005b6008546040516001600160a01b039091168152602001610134565b6000546101289060ff1681565b61014561019a3660046138b3565b6102e9565b6101a860075481565b604051908152602001610134565b6101a860055481565b6101456103b5565b6101a860045481565b6101626101de3660046138b3565b6103c2565b6101f66101f136600461399d565b61048a565b60408051928352602083019190915201610134565b6101a860065481565b610162610222366004613a83565b6105aa565b6101626102353660046138b3565b6105c6565b6002805461024790613b0e565b80601f016020809104026020016040519081016040528092919081815260200182805461027390613b0e565b80156102c05780601f10610295576101008083540402835291602001916102c0565b820191906000526020600020905b8154815290600101906020018083116102a357829003601f168201915b505050505081565b6003805461024790613b0e565b6102dd610604565b6102e76000610631565b565b60005460609060ff1661030f5760405163da4bbb2960e01b815260040160405180910390fd5b6103af6004546005546006546007546003805461032b90613b0e565b80601f016020809104026020016040519081016040528092919081815260200182805461035790613b0e565b80156103a45780601f10610379576101008083540402835291602001916103a4565b820191906000526020600020905b81548152906001019060200180831161038757829003601f168201915b505050505087610683565b92915050565b6001805461024790613b0e565b6001600160a01b03811660009081526009602052604090205460ff16156104305760405162461bcd60e51b815260206004820152601960248201527f5573657220697320616c7265616479206163746976617465640000000000000060448201526064015b60405180910390fd5b6001600160a01b038116600081815260096020908152604091829020805460ff1916600117905590519182527fa80bfdc57bf882738a124b225520a84f1796f14d85d45b99687f5577ebe22512910160405180910390a150565b60008060008060006104d28888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506106d392505050565b9194509250905060008160128111156104ed576104ed613b48565b14610513578686898360405163356b2f0d60e01b81526004016104279493929190613b87565b8260ff16600114158061052857508151602014155b1561054a57868660405163198b15b960e31b8152600401610427929190613bdd565b600061055583613bf9565b905080158061056a57506401000003d0198110155b1561058c57878760405163198b15b960e31b8152600401610427929190613bdd565b600061059782610a84565b919650909450505050505b935093915050565b6105b2610604565b6105bf8585858585610a9c565b5050505050565b6105ce610604565b6001600160a01b0381166105f857604051631e4fbdf760e01b815260006004820152602401610427565b61060181610631565b50565b6008546001600160a01b031633146102e75760405163118cdaa760e01b8152336004820152602401610427565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60606000806106958989898988610b49565b915091506106c6856001846040516020016106b291815260200190565b604051602081830303815290604052610b88565b9998505050505050505050565b6000606060008060008060006106e888610bef565b92965090945092509050600081601281111561070657610706613b48565b1461072b57604080516000808252602082019092528296509650965050505050610a7d565b6107358985610fb6565b61075a5760408051600080825260208201909252600b96509650965050505050610a7d565b82516000036107845760408051600080825260208201909252600c96509650965050505050610a7d565b60108360008151811061079957610799613c1d565b016020015160f81c11156107c85760408051600080825260208201909252600f96509650965050505050610a7d565b6000600184516107d89190613c49565b6001600160401b038111156107ef576107ef61393f565b6040519080825280601f01601f191660200182016040528015610819576020820181803683370190505b50905060005b815181101561088a5784610834826001613c5c565b8151811061084457610844613c1d565b602001015160f81c60f81b82828151811061086157610861613c1d565b60200101906001600160f81b031916908160001a905350610883600182613c5c565b905061081f565b50606061089682611048565b9350905060008360128111156108ae576108ae613b48565b146108d5576040805160008082526020820190925284985098509850505050505050610a7d565b6002815110156109025760408051600080825260208201909252600d985098509850505050505050610a7d565b60288151111561092f5760408051600080825260208201909252600e985098509850505050505050610a7d565b8460008151811061094257610942613c1d565b016020015160f81c15801561095957508051601414155b801561096757508051602014155b1561098f57604080516000808252602082019092526010985098509850505050505050610a7d565b846000815181106109a2576109a2613c1d565b016020015160f81c1580156109c9575060008460028111156109c6576109c6613b48565b14155b156109f157604080516000808252602082019092526011985098509850505050505050610a7d565b84600081518110610a0457610a04613c1d565b016020015160f81c15801590610a2c57506001846002811115610a2957610a29613b48565b14155b15610a5457604080516000808252602082019092526012985098509850505050505050610a7d565b84600081518110610a6757610a67613c1d565b016020015160f81c985096506000955050505050505b9250925092565b60006103af600283600060076401000003d019611b47565b6000610aa782611c79565b90506003610ab58282613cbb565b50610ac181878761048a565b600555600455610ad281858561048a565b6007556006556001610ae5868883613d79565b506002610af3848683613d79565b506000805460ff191660011790556040517f123278a680a966680eaa7dc7f03997fbccbc36d6666b5b6f3388eb15fccf001f90610b399088908890889088908790613e38565b60405180910390a1505050505050565b6000806000610b59888886611d98565b90506000610b68878787611d98565b9050610b78898989898686611e26565b9350935050509550959350505050565b6060600060ff841615610b9c576001610b9f565b60005b90506000610bac84611e6d565b905060008560f81b82604051602001610bc6929190613e73565b6040516020818303038152906040529050610be2878285612369565b93505050505b9392505050565b606080600080605a85511115610c24575050604080516000808252602082019081528183019092529250905060026007610faf565b610c2d8561254e565b610c56575050604080516000808252602082019081528183019092529250905060026003610faf565b610c5f856125c5565b15610c89575050604080516000808252602082019081528183019092529250905060026004610faf565b6000610c94866126ab565b9050600060018251610ca69190613ea4565b90505b610cb4600182613ea4565b90506000811215610ce8575050604080516000808252602082019081528183019092529450925060029150600a9050610faf565b818181518110610cfa57610cfa613c1d565b0160200151603160f81b6001600160f81b031990911603610ca9576001811215610d4757505060408051600080825260208201908152818301909252945092506002915060099050610faf565b8151610d54826007613ec4565b1315610d8357505060408051600080825260208201908152818301909252945092506002915060069050610faf565b6000816001600160401b03811115610d9d57610d9d61393f565b6040519080825280601f01601f191660200182016040528015610dc7576020820181803683370190505b50905060005b82811015610e2d57838181518110610de757610de7613c1d565b602001015160f81c60f81b828281518110610e0457610e04613c1d565b60200101906001600160f81b031916908160001a905350610e26600182613c5c565b9050610dcd565b50600080610e4785610e40866001613ec4565b8751612807565b90925090506000816012811115610e6057610e60613b48565b14610e8f576040805160008082526020820190815281830190925299509750600296509450610faf9350505050565b6000610e9b84846129a4565b90506002816002811115610eb157610eb1613b48565b03610ee457505060408051600080825260208201908152818301909252985096506002955060059450610faf9350505050565b600060068451610ef49190613c49565b6001600160401b03811115610f0b57610f0b61393f565b6040519080825280601f01601f191660200182016040528015610f35576020820181803683370190505b50905060005b8151811015610f9c57848181518110610f5657610f56613c1d565b602001015160f81c60f81b828281518110610f7357610f73613c1d565b60200101906001600160f81b031916908160001a905350610f95600182613c5c565b9050610f3b565b5093995092975091955060009450505050505b9193509193565b60008151835114610fc9575060006103af565b60005b835181101561103e57828181518110610fe757610fe7613c1d565b602001015160f81c60f81b6001600160f81b03191684828151811061100e5761100e613c1d565b01602001516001600160f81b0319161461102c5760009150506103af565b611037600182613c5c565b9050610fcc565b5060019392505050565b606060008060006008855161105d9190613f02565b9050600080600887516110709190613f16565b9050600061107f826008613f2a565b9050600061108e836005613f2a565b9050846001036110d65760005b6040519080825280601f01601f1916602001820160405280156110c5576020820181803683370190505b509960029950975050505050505050565b84600203611195578860018a516110ed9190613c49565b815181106110fd576110fd613c1d565b60209101015160f81c600316600003611176578861111c836001613c5c565b8151811061112c5761112c613c1d565b602001015160f81c60f81b60f81c60ff1660058a848151811061115157611151613c1d565b0160200151611168929160f89190911c901b613c5c565b60021c955060019350611582565b5050604080516000815260208101909152976001975095505050505050565b846003036111a457600061109b565b846004036112a8578860018a516111bb9190613c49565b815181106111cb576111cb613c1d565b60209101015160f81c600f1660000361117657886111ea836003613c5c565b815181106111fa576111fa613c1d565b016020015160f81c60058a611210856002613c5c565b8151811061122057611220613c1d565b016020015160f81c901b600a8b611238866001613c5c565b8151811061124857611248613c1d565b602001015160f81c60f81b60f81c60ff16901b600f8c868151811061126f5761126f613c1d565b0160200151611286929160f89190911c901b613c5c565b6112909190613c5c565b61129a9190613c5c565b60041c955060029350611582565b846005036113de578860018a516112bf9190613c49565b815181106112cf576112cf613c1d565b60209101015160f81c60011660000361117657886112ee836004613c5c565b815181106112fe576112fe613c1d565b016020015160f81c60058a611314856003613c5c565b8151811061132457611324613c1d565b016020015160f81c901b600a8b61133c866002613c5c565b8151811061134c5761134c613c1d565b016020015160f81c901b600f8c611364876001613c5c565b8151811061137457611374613c1d565b602001015160f81c60f81b60f81c60ff16901b60148d878151811061139b5761139b613c1d565b01602001516113b2929160f89190911c901b613c5c565b6113bc9190613c5c565b6113c69190613c5c565b6113d09190613c5c565b60011c955060039350611582565b846006036113ed57600061109b565b84600703611582578860018a516114049190613c49565b8151811061141457611414613c1d565b60209101015160f81c6007166000036111765788611433836006613c5c565b8151811061144357611443613c1d565b016020015160f81c60058a6114588583613c5c565b8151811061146857611468613c1d565b016020015160f81c901b600a8b611480866004613c5c565b8151811061149057611490613c1d565b016020015160f81c901b600f8c6114a8876003613c5c565b815181106114b8576114b8613c1d565b016020015160f81c901b60148d6114d0886002613c5c565b815181106114e0576114e0613c1d565b016020015160f81c901b60198e6114f8896001613c5c565b8151811061150857611508613c1d565b602001015160f81c60f81b60f81c60ff16901b601e8f898151811061152f5761152f613c1d565b0160200151611546929160f89190911c901b613c5c565b6115509190613c5c565b61155a9190613c5c565b6115649190613c5c565b61156e9190613c5c565b6115789190613c5c565b60031c9550600493505b600084611590856005613f2a565b61159a9190613c5c565b6001600160401b038111156115b1576115b161393f565b6040519080825280601f01601f1916602001820160405280156115db576020820181803683370190505b50905060005b848110156118f65760006115f6826008613f2a565b90506000611605836005613f2a565b9050600060238e848151811061161d5761161d613c1d565b016020015160f81c901b9050601e8e611637856001613c5c565b8151811061164757611647613c1d565b016020015161165e9160f89190911c901b82613c5c565b905060198e61166e856002613c5c565b8151811061167e5761167e613c1d565b01602001516116959160f89190911c901b82613c5c565b905060148e6116a5856003613c5c565b815181106116b5576116b5613c1d565b01602001516116cc9160f89190911c901b82613c5c565b9050600f8e6116dc856004613c5c565b815181106116ec576116ec613c1d565b01602001516117039160f89190911c901b82613c5c565b9050600a8e611713856005613c5c565b8151811061172357611723613c1d565b016020015161173a9160f89190911c901b82613c5c565b905060058e61174a856006613c5c565b8151811061175a5761175a613c1d565b01602001516117719160f89190911c901b82613c5c565b90508d61177f846007613c5c565b8151811061178f5761178f613c1d565b01602001516117a19060f81c82613c5c565b9050602081901c60ff1660f81b8583815181106117c0576117c0613c1d565b60200101906001600160f81b031916908160001a9053506001600160f81b031960e082901b16856117f2846001613c5c565b8151811061180257611802613c1d565b60200101906001600160f81b031916908160001a9053506001600160f81b031960e882901b1685611834846002613c5c565b8151811061184457611844613c1d565b60200101906001600160f81b031916908160001a9053506001600160f81b031960f082901b1685611876846003613c5c565b8151811061188657611886613c1d565b60200101906001600160f81b031916908160001a9053506001600160f81b031960f882901b16856118b8846004613c5c565b815181106118c8576118c8613c1d565b60200101906001600160f81b031916908160001a9053505050506001816118ef9190613c5c565b90506115e1565b5084600103611934578660ff1660f81b81838151811061191857611918613c1d565b60200101906001600160f81b031916908160001a905350611b37565b8460020361199b57600887901c60ff1660f81b81838151811061195957611959613c1d565b60200101906001600160f81b031916908160001a9053506001600160f81b031960f888901b168161198b846001613c5c565b8151811061191857611918613c1d565b84600303611a3457601087901c60ff1660f81b8183815181106119c0576119c0613c1d565b60200101906001600160f81b031916908160001a9053506001600160f81b031960f088901b16816119f2846001613c5c565b81518110611a0257611a02613c1d565b60200101906001600160f81b031916908160001a9053506001600160f81b031960f888901b168161198b846002613c5c565b84600403611b3757601887901c60ff1660f81b818381518110611a5957611a59613c1d565b60200101906001600160f81b031916908160001a9053506001600160f81b031960e888901b1681611a8b846001613c5c565b81518110611a9b57611a9b613c1d565b60200101906001600160f81b031916908160001a9053506001600160f81b031960f088901b1681611acd846002613c5c565b81518110611add57611add613c1d565b60200101906001600160f81b031916908160001a9053506001600160f81b031960f888901b1681611b0f846003613c5c565b81518110611b1f57611b1f613c1d565b60200101906001600160f81b031916908160001a9053505b9960009950975050505050505050565b60008560ff1660021480611b5e57508560ff166003145b611bc45760405162461bcd60e51b815260206004820152603160248201527f456c6c697074696343757276653a696e6e76616c696420636f6d7072657373656044820152700c8408a8640e0ded2dce840e0e4caccd2f607b1b6064820152608401610427565b60008280611bd457611bd4613eec565b8380611be257611be2613eec565b858580611bf157611bf1613eec565b888a09088480611c0357611c03613eec565b8580611c1157611c11613eec565b898a098909089050611c3a816004611c2a866001613c5c565b611c349190613f16565b85612b0e565b905060006002611c4d60ff8a1684613c5c565b611c579190613f02565b15611c6b57611c668285613c49565b611c6d565b815b98975050505050505050565b60606000826003811115611c8f57611c8f613b48565b03611cb2575050604080518082019091526002815261626360f01b602082015290565b6001826003811115611cc657611cc6613b48565b03611ce95750506040805180820190915260028152613a3160f11b602082015290565b6002826003811115611cfd57611cfd613b48565b03611d225750506040805180820190915260048152631898dc9d60e21b602082015290565b6003826003811115611d3657611d36613b48565b03611d5957505060408051808201909152600281526139b160f11b602082015290565b60405162461bcd60e51b8152602060048201526014602482015273556e6b6e6f776e206e6574776f726b207479706560601b6044820152606401610427565b60408051602081018590529081018390526001600160a01b0382166060820152600090819060029060800160408051601f1981840301815290829052611ddd91613f41565b602060405180830381855afa158015611dfa573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611e1d9190613f5d565b95945050505050565b600080600080611e378a8a88612be5565b91509150600080611e498a8a89612be5565b91509150611e5984848484612c08565b95509550505050505b965096945050505050565b6060600060058351611e7f9190613f16565b9050600060058451611e919190613f02565b905060008082600103611ea957506002905080611ee0565b82600203611ebc57506004905080611ee0565b82600303611ed05750600590506001611ee0565b82600403611ee057506007905060035b600082611eee866008613f2a565b611ef89190613c5c565b90506000816001600160401b03811115611f1457611f1461393f565b6040519080825280601f01601f191660200182016040528015611f3e576020820181803683370190505b50905060005b86811015612273576000611f59826005613f2a565b90506000611f68836008613f2a565b905060008b611f78846004613c5c565b81518110611f8857611f88613c1d565b016020015160f81c8c611f9c856003613c5c565b81518110611fac57611fac613c1d565b0160200151611fc09060f81c610100613f2a565b8d611fcc866002613c5c565b81518110611fdc57611fdc613c1d565b0160200151611ff19060f81c62010000613f2a565b8e611ffd876001613c5c565b8151811061200d5761200d613c1d565b01602001516120239060f81c6301000000613f2a565b8f878151811061203557612035613c1d565b016020015161204c9060f81c640100000000613f2a565b6120569190613c5c565b6120609190613c5c565b61206a9190613c5c565b6120749190613c5c565b9050601f60f81b60f882901b168561208d846007613c5c565b8151811061209d5761209d613c1d565b60200101906001600160f81b031916908160001a905350601f60f81b60f382901b16856120cb846006613c5c565b815181106120db576120db613c1d565b60200101906001600160f81b031916908160001a905350601f60f81b60ee82901b1685612109846005613c5c565b8151811061211957612119613c1d565b60200101906001600160f81b031916908160001a905350601f60f81b60e982901b1685612147846004613c5c565b8151811061215757612157613c1d565b60200101906001600160f81b031916908160001a905350601f60f81b60e482901b1685612185846003613c5c565b8151811061219557612195613c1d565b60200101906001600160f81b031916908160001a905350601f60f81b60df82901b16856121c3846002613c5c565b815181106121d3576121d3613c1d565b60200101906001600160f81b031916908160001a905350601f60f81b60da82901b1685612201846001613c5c565b8151811061221157612211613c1d565b60200101906001600160f81b031916908160001a905350602381901c601f1660f81b85838151811061224557612245613c1d565b60200101906001600160f81b031916908160001a90535050505060018161226c9190613c5c565b9050611f44565b50831561235e57600080612288886005613f2a565b90505b89518110156122d0578981815181106122a6576122a6613c1d565b01602001516122bc9060f81c600884901b613c5c565b91506122c9600182613c5c565b905061228b565b50831b60005b8581101561235b5760016122ea8288613c49565b6122f49190613c49565b6122ff906005613f2a565b82901c60f81b601f60f81b1683826123188b6008613f2a565b6123229190613c5c565b8151811061233257612332613c1d565b60200101906001600160f81b031916908160001a905350612354600182613c5c565b90506122d6565b50505b979650505050505050565b6060600282600281111561237f5761237f613b48565b0361239d576040516305dc3f9d60e51b815260040160405180910390fd5b60006123aa858585612c2d565b905060005b8451811015612462576040518060400160405280602081526020017f71707a7279397838676632747664773073336a6e35346b686365366d7561376c81525085828151811061240057612400613c1d565b0160200151815160f89190911c90811061241c5761241c613c1d565b602001015160f81c60f81b85828151811061243957612439613c1d565b60200101906001600160f81b031916908160001a90535061245b600182613c5c565b90506123af565b5060005b6006811015612519576040518060400160405280602081526020017f71707a7279397838676632747664773073336a6e35346b686365366d7561376c8152508282815181106124b7576124b7613c1d565b0160200151815160f89190911c9081106124d3576124d3613c1d565b602001015160f81c60f81b8282815181106124f0576124f0613c1d565b60200101906001600160f81b031916908160001a905350612512600182613c5c565b9050612466565b50604051612535908690603160f81b9087908590602001613f76565b6040516020818303038152906040529150509392505050565b6000805b82518110156125bc57602183828151811061256f5761256f613c1d565b016020015160f81c108061259c5750607e83828151811061259257612592613c1d565b016020015160f81c115b156125aa5750600092915050565b6125b5600182613c5c565b9050612552565b50600192915050565b60008080805b84518110156126a05760618582815181106125e8576125e8613c1d565b016020015160f81c108015906126185750607a85828151811061260d5761260d613c1d565b016020015160f81c11155b156126265760019250612674565b604185828151811061263a5761263a613c1d565b016020015160f81c1080159061266a5750605a85828151811061265f5761265f613c1d565b016020015160f81c11155b1561267457600191505b82801561267e5750815b1561268e57506001949350505050565b612699600182613c5c565b90506125cb565b506000949350505050565b6060600082516001600160401b038111156126c8576126c861393f565b6040519080825280601f01601f1916602001820160405280156126f2576020820181803683370190505b50905060005b835181101561280057604184828151811061271557612715613c1d565b016020015160f81c108015906127455750605a84828151811061273a5761273a613c1d565b016020015160f81c11155b156127a75783818151811061275c5761275c613c1d565b602001015160f81c60f81b60f81c60206127769190613fd0565b60f81b82828151811061278b5761278b613c1d565b60200101906001600160f81b031916908160001a9053506127ee565b8381815181106127b9576127b9613c1d565b602001015160f81c60f81b8282815181106127d6576127d6613c1d565b60200101906001600160f81b031916908160001a9053505b6127f9600182613c5c565b90506126f8565b5092915050565b60606000806128168585613c49565b6001600160401b0381111561282d5761282d61393f565b6040519080825280601f01601f191660200182016040528015612857576020820181803683370190505b509050845b8481101561299757600087828151811061287857612878613c1d565b602001015160f81c60f81b60f81c90506040518060a0016040528060808152602001613fea60809139518160ff161015806128f257506040518060a0016040528060808152602001613fea608091398160ff16815181106128db576128db613c1d565b6020910101516001600160f81b031916607f60f81b145b156129155750506040805160008152602081019091529250600891506105a29050565b6040518060a0016040528060808152602001613fea608091398160ff168151811061294257612942613c1d565b01602001516001600160f81b0319168361295c8985613c49565b8151811061296c5761296c613c1d565b60200101906001600160f81b031916908160001a9053506129909050600182613c5c565b905061285c565b5095600095509350505050565b6000806129b084612f06565b90506000835182516129c29190613c5c565b6001600160401b038111156129d9576129d961393f565b604051908082528060200260200182016040528015612a02578160200160208202803683370190505b50905060005b8251811015612a6357828181518110612a2357612a23613c1d565b602001015160f81c60f81b60f81c60ff16828281518110612a4657612a46613c1d565b6020908102919091010152612a5c600182613c5c565b9050612a08565b5060005b8451811015612ac957848181518110612a8257612a82613c1d565b0160200151835160f89190911c908390612a9c9084613c5c565b81518110612aac57612aac613c1d565b6020908102919091010152612ac2600182613c5c565b9050612a67565b506000612ad58261306f565b905080600103612aeb57600093505050506103af565b632bc830a38103612b0257600193505050506103af565b50600295945050505050565b600081600003612b605760405162461bcd60e51b815260206004820152601e60248201527f456c6c697074696343757276653a206d6f64756c7573206973207a65726f00006044820152606401610427565b83600003612b7057506000610be8565b82600003612b8057506001610be8565b6001600160ff1b5b8015612bdc57838186161515870a85848509099150836002820486161515870a85848509099150836004820486161515870a85848509099150836008820486161515870a8584850909915060109004612b88565b50949350505050565b600080612bfc83868660006401000003d019613141565b91509150935093915050565b600080612c208686868660006401000003d01961317b565b9150915094509492505050565b606060006001836002811115612c4557612c45613b48565b14612c51576001612c57565b632bc830a35b90506000612c6486612f06565b9050600085518251612c769190613c5c565b612c81906006613c5c565b6001600160401b03811115612c9857612c9861393f565b604051908082528060200260200182016040528015612cc1578160200160208202803683370190505b50905060005b8251811015612d2257828181518110612ce257612ce2613c1d565b602001015160f81c60f81b60f81c60ff16828281518110612d0557612d05613c1d565b6020908102919091010152612d1b600182613c5c565b9050612cc7565b5060005b8651811015612d8857868181518110612d4157612d41613c1d565b0160200151835160f89190911c908390612d5b9084613c5c565b81518110612d6b57612d6b613c1d565b6020908102919091010152612d81600182613c5c565b9050612d26565b50600083612d958361306f565b604080516006808252818301909252919092189250600091602082018180368337019050509050601982901c601f1660f81b81600081518110612dda57612dda613c1d565b60200101906001600160f81b031916908160001a905350601482901c601f1660f81b81600181518110612e0f57612e0f613c1d565b60200101906001600160f81b031916908160001a905350600f82901c601f1660f81b81600281518110612e4457612e44613c1d565b60200101906001600160f81b031916908160001a905350600a82901c601f1660f81b81600381518110612e7957612e79613c1d565b60200101906001600160f81b031916908160001a905350600582901c601f1660f81b81600481518110612eae57612eae613c1d565b60200101906001600160f81b031916908160001a905350600082901c601f1660f81b81600581518110612ee357612ee3613c1d565b60200101906001600160f81b031916908160001a90535098975050505050505050565b6060600082518351612f189190613c5c565b612f23906001613c5c565b6001600160401b03811115612f3a57612f3a61393f565b6040519080825280601f01601f191660200182016040528015612f64576020820181803683370190505b50905060005b8351811015613039576005848281518110612f8757612f87613c1d565b602001015160f81c60f81b6001600160f81b031916901c828281518110612fb057612fb0613c1d565b60200101906001600160f81b031916908160001a905350838181518110612fd957612fd9613c1d565b01602001518451601f60f81b909116908390612ff59084613c5c565b613000906001613c5c565b8151811061301057613010613c1d565b60200101906001600160f81b031916908160001a905350613032600182613c5c565b9050612f6a565b50600060f81b8184518151811061305257613052613c1d565b60200101906001600160f81b031916908160001a90535092915050565b6040805160a081018252633b6a57b281526326508e6d6020820152631ea119fa91810191909152633d4233dd6060820152632a1462b360808201526000906001825b8451811015613139576000601983901c90508582815181106130d5576130d5613c1d565b60200260200101516005846301ffffff16901b18925060005b600581101561312f578082901c6001166001036131275784816005811061311757613117613c1d565b602002015163ffffffff16841893505b6001016130ee565b50506001016130b1565b509392505050565b60008060008060006131588a8a8a60018b8b613202565b92509250925061316a83838389613284565b945094505050509550959350505050565b6000806000806000888b036131cb57858061319857613198613eec565b888b086000036131b15760008094509450505050611e62565b6131bf8b8b60018a8a6132f3565b919450925090506131e4565b6131dc8b8b60018c8c60018c613496565b919450925090505b6131f083838389613284565b94509450505050965096945050505050565b60008060008860000361321c575086915085905084613278565b8860008060015b831561326f576001841615613249576132418383838f8f8f8e613496565b919450925090505b613254600285613f16565b93506132638c8c8c8c8c6132f3565b919d509b509950613223565b91955093509150505b96509650969350505050565b600080600061329385856137c9565b9050600084806132a5576132a5613eec565b8283099050600085806132ba576132ba613eec565b828a099050600086806132cf576132cf613eec565b87806132dd576132dd613eec565b8486098a09919a91995090975050505050505050565b60008060008560000361330d57508691508590508461348b565b6000848061331d5761331d613eec565b898a0990506000858061333257613332613eec565b898a0990506000868061334757613347613eec565b898a0990506000878061335c5761335c613eec565b888061336a5761336a613eec565b848e0960040990506000888061338257613382613eec565b898061339057613390613eec565b8a8061339e5761339e613eec565b8586098c098a806133b1576133b1613eec565b8760030908905088806133c6576133c6613eec565b89806133d4576133d4613eec565b8384086133e1908b613c49565b8a806133ef576133ef613eec565b838409089450888061340357613403613eec565b898061341157613411613eec565b8a8061341f5761341f613eec565b86870960080961342f908b613c49565b8a8061343d5761343d613eec565b8b8061344b5761344b613eec565b613455898e613c49565b86088409089350888061346a5761346a613eec565b898061347857613478613eec565b8c8e096002099497509295509293505050505b955095509592505050565b60008080891580156134a6575088155b156134b85750859150849050836137bc565b861580156134c4575085155b156134d65750889150879050866137bc565b6134de613895565b84806134ec576134ec613eec565b898a09815284806134ff576134ff613eec565b81518a096020820152848061351657613516613eec565b8687096040820152848061352c5761352c613eec565b604082015187096060820152604080516080810190915280868061355257613552613eec565b60408401518e098152602001868061356c5761356c613eec565b60608401518d098152602001868061358657613586613eec565b83518b098152602001868061359d5761359d613eec565b60208401518a099052604081015181519192501415806135c557506060810151602082015114155b6136115760405162461bcd60e51b815260206004820152601e60248201527f557365206a6163446f75626c652066756e6374696f6e20696e737465616400006044820152606401610427565b613619613895565b858061362757613627613eec565b82516136339088613c49565b6040840151088152858061364957613649613eec565b60208301516136589088613c49565b6060840151086020820152858061367157613671613eec565b815180096040820152858061368857613688613eec565b81516040830151096060820152600086806136a5576136a5613eec565b60608301516136b49089613c49565b88806136c2576136c2613eec565b6020850151800908905086806136da576136da613eec565b87806136e8576136e8613eec565b88806136f6576136f6613eec565b604085015186510960020961370b9089613c49565b820890506000878061371f5761371f613eec565b888061372d5761372d613eec565b613737848b613c49565b8a8061374557613745613eec565b6040870151885109086020850151099050878061376457613764613eec565b888061377257613772613eec565b6060850151602087015109613787908a613c49565b820890506000888061379b5761379b613eec565b89806137a9576137a9613eec565b8b8f098551099297509095509093505050505b9750975097945050505050565b600082158015906137da5750818314155b80156137e557508115155b6138225760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210373ab6b132b960911b6044820152606401610427565b6000600183825b861561388a576138398783613f16565b905082868061384a5761384a613eec565b878061385857613858613eec565b8584096138659089613c49565b86089094509250866138778183613f2a565b6138819084613c49565b97509150613829565b509195945050505050565b60405180608001604052806004906020820280368337509192915050565b6000602082840312156138c557600080fd5b81356001600160a01b0381168114610be857600080fd5b60005b838110156138f75781810151838201526020016138df565b50506000910152565b600081518084526139188160208601602086016138dc565b601f01601f19169290920160200192915050565b602081526000610be86020830184613900565b634e487b7160e01b600052604160045260246000fd5b60008083601f84011261396757600080fd5b5081356001600160401b0381111561397e57600080fd5b60208301915083602082850101111561399657600080fd5b9250929050565b6000806000604084860312156139b257600080fd5b83356001600160401b038111156139c857600080fd5b8401601f810186136139d957600080fd5b80356001600160401b038111156139f2576139f261393f565b604051601f8201601f19908116603f011681016001600160401b0381118282101715613a2057613a2061393f565b604052818152828201602001881015613a3857600080fd5b8160208401602083013760006020838301015280955050505060208401356001600160401b03811115613a6a57600080fd5b613a7686828701613955565b9497909650939450505050565b600080600080600060608688031215613a9b57600080fd5b85356001600160401b03811115613ab157600080fd5b613abd88828901613955565b90965094505060208601356001600160401b03811115613adc57600080fd5b613ae888828901613955565b909450925050604086013560048110613b0057600080fd5b809150509295509295909350565b600181811c90821680613b2257607f821691505b602082108103613b4257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052602160045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b606081526000613b9b606083018688613b5e565b8281036020840152613bad8186613900565b91505060138310613bce57634e487b7160e01b600052602160045260246000fd5b82604083015295945050505050565b602081526000613bf1602083018486613b5e565b949350505050565b80516020808301519190811015613b425760001960209190910360031b1b16919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156103af576103af613c33565b808201808211156103af576103af613c33565b601f821115613cb657806000526020600020601f840160051c81016020851015613c965750805b601f840160051c820191505b818110156105bf5760008155600101613ca2565b505050565b81516001600160401b03811115613cd457613cd461393f565b613ce881613ce28454613b0e565b84613c6f565b6020601f821160018114613d1c5760008315613d045750848201515b600019600385901b1c1916600184901b1784556105bf565b600084815260208120601f198516915b82811015613d4c5787850151825560209485019460019092019101613d2c565b5084821015613d6a5786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b6001600160401b03831115613d9057613d9061393f565b613da483613d9e8354613b0e565b83613c6f565b6000601f841160018114613dd85760008515613dc05750838201355b600019600387901b1c1916600186901b1783556105bf565b600083815260209020601f19861690835b82811015613e095786850135825560209485019460019092019101613de9565b5086821015613e265760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b606081526000613e4c606083018789613b5e565b8281036020840152613e5f818688613b5e565b90508281036040840152611c6d8185613900565b6001600160f81b0319831681528151600090613e968160018501602087016138dc565b919091016001019392505050565b818103600083128015838313168383128216171561280057612800613c33565b8082018281126000831280158216821582161715613ee457613ee4613c33565b505092915050565b634e487b7160e01b600052601260045260246000fd5b600082613f1157613f11613eec565b500690565b600082613f2557613f25613eec565b500490565b80820281158282048414176103af576103af613c33565b60008251613f538184602087016138dc565b9190910192915050565b600060208284031215613f6f57600080fd5b5051919050565b60008551613f88818460208a016138dc565b6001600160f81b031986169083019081528451613fac8160018401602089016138dc565b8451910190613fc28160018401602088016138dc565b016001019695505050505050565b60ff81811683821601908111156103af576103af613c3356fe7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f0f7f0a1115141a1e07057f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f1d7f180d190908177f12161f1b137f010003100b1c0c0e0604027f7f7f7f7fa26469706673582212201229cc8c5b189e6dc6691f8df38e7a17350197e7062fe5127ec45b98a85de3af64736f6c634300081b0033",
}

// UserActivatorABI is the input ABI used to generate the binding from.
// Deprecated: Use UserActivatorMetaData.ABI instead.
var UserActivatorABI = UserActivatorMetaData.ABI

// UserActivatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use UserActivatorMetaData.Bin instead.
var UserActivatorBin = UserActivatorMetaData.Bin

// DeployUserActivator deploys a new Ethereum contract, binding an instance of UserActivator to it.
func DeployUserActivator(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *UserActivator, error) {
	parsed, err := UserActivatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(UserActivatorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UserActivator{UserActivatorCaller: UserActivatorCaller{contract: contract}, UserActivatorTransactor: UserActivatorTransactor{contract: contract}, UserActivatorFilterer: UserActivatorFilterer{contract: contract}}, nil
}

// UserActivator is an auto generated Go binding around an Ethereum contract.
type UserActivator struct {
	UserActivatorCaller     // Read-only binding to the contract
	UserActivatorTransactor // Write-only binding to the contract
	UserActivatorFilterer   // Log filterer for contract events
}

// UserActivatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type UserActivatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserActivatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UserActivatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserActivatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UserActivatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserActivatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UserActivatorSession struct {
	Contract     *UserActivator    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// UserActivatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UserActivatorCallerSession struct {
	Contract *UserActivatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// UserActivatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UserActivatorTransactorSession struct {
	Contract     *UserActivatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// UserActivatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type UserActivatorRaw struct {
	Contract *UserActivator // Generic contract binding to access the raw methods on
}

// UserActivatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UserActivatorCallerRaw struct {
	Contract *UserActivatorCaller // Generic read-only contract binding to access the raw methods on
}

// UserActivatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UserActivatorTransactorRaw struct {
	Contract *UserActivatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUserActivator creates a new instance of UserActivator, bound to a specific deployed contract.
func NewUserActivator(address common.Address, backend bind.ContractBackend) (*UserActivator, error) {
	contract, err := bindUserActivator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UserActivator{UserActivatorCaller: UserActivatorCaller{contract: contract}, UserActivatorTransactor: UserActivatorTransactor{contract: contract}, UserActivatorFilterer: UserActivatorFilterer{contract: contract}}, nil
}

// NewUserActivatorCaller creates a new read-only instance of UserActivator, bound to a specific deployed contract.
func NewUserActivatorCaller(address common.Address, caller bind.ContractCaller) (*UserActivatorCaller, error) {
	contract, err := bindUserActivator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UserActivatorCaller{contract: contract}, nil
}

// NewUserActivatorTransactor creates a new write-only instance of UserActivator, bound to a specific deployed contract.
func NewUserActivatorTransactor(address common.Address, transactor bind.ContractTransactor) (*UserActivatorTransactor, error) {
	contract, err := bindUserActivator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UserActivatorTransactor{contract: contract}, nil
}

// NewUserActivatorFilterer creates a new log filterer instance of UserActivator, bound to a specific deployed contract.
func NewUserActivatorFilterer(address common.Address, filterer bind.ContractFilterer) (*UserActivatorFilterer, error) {
	contract, err := bindUserActivator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UserActivatorFilterer{contract: contract}, nil
}

// bindUserActivator binds a generic wrapper to an already deployed contract.
func bindUserActivator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := UserActivatorMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UserActivator *UserActivatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UserActivator.Contract.UserActivatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UserActivator *UserActivatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserActivator.Contract.UserActivatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UserActivator *UserActivatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UserActivator.Contract.UserActivatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UserActivator *UserActivatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UserActivator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UserActivator *UserActivatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserActivator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UserActivator *UserActivatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UserActivator.Contract.contract.Transact(opts, method, params...)
}

// ActivatedAddresses is a free data retrieval call binding the contract method 0x0b68f450.
//
// Solidity: function activatedAddresses(address ) view returns(bool)
func (_UserActivator *UserActivatorCaller) ActivatedAddresses(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "activatedAddresses", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ActivatedAddresses is a free data retrieval call binding the contract method 0x0b68f450.
//
// Solidity: function activatedAddresses(address ) view returns(bool)
func (_UserActivator *UserActivatorSession) ActivatedAddresses(arg0 common.Address) (bool, error) {
	return _UserActivator.Contract.ActivatedAddresses(&_UserActivator.CallOpts, arg0)
}

// ActivatedAddresses is a free data retrieval call binding the contract method 0x0b68f450.
//
// Solidity: function activatedAddresses(address ) view returns(bool)
func (_UserActivator *UserActivatorCallerSession) ActivatedAddresses(arg0 common.Address) (bool, error) {
	return _UserActivator.Contract.ActivatedAddresses(&_UserActivator.CallOpts, arg0)
}

// BtcAddr1 is a free data retrieval call binding the contract method 0xad427415.
//
// Solidity: function btcAddr1() view returns(string)
func (_UserActivator *UserActivatorCaller) BtcAddr1(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "btcAddr1")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// BtcAddr1 is a free data retrieval call binding the contract method 0xad427415.
//
// Solidity: function btcAddr1() view returns(string)
func (_UserActivator *UserActivatorSession) BtcAddr1() (string, error) {
	return _UserActivator.Contract.BtcAddr1(&_UserActivator.CallOpts)
}

// BtcAddr1 is a free data retrieval call binding the contract method 0xad427415.
//
// Solidity: function btcAddr1() view returns(string)
func (_UserActivator *UserActivatorCallerSession) BtcAddr1() (string, error) {
	return _UserActivator.Contract.BtcAddr1(&_UserActivator.CallOpts)
}

// BtcAddr2 is a free data retrieval call binding the contract method 0x2fbb7ab6.
//
// Solidity: function btcAddr2() view returns(string)
func (_UserActivator *UserActivatorCaller) BtcAddr2(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "btcAddr2")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// BtcAddr2 is a free data retrieval call binding the contract method 0x2fbb7ab6.
//
// Solidity: function btcAddr2() view returns(string)
func (_UserActivator *UserActivatorSession) BtcAddr2() (string, error) {
	return _UserActivator.Contract.BtcAddr2(&_UserActivator.CallOpts)
}

// BtcAddr2 is a free data retrieval call binding the contract method 0x2fbb7ab6.
//
// Solidity: function btcAddr2() view returns(string)
func (_UserActivator *UserActivatorCallerSession) BtcAddr2() (string, error) {
	return _UserActivator.Contract.BtcAddr2(&_UserActivator.CallOpts)
}

// GetBTCDepositAddress is a free data retrieval call binding the contract method 0xa0ddd62f.
//
// Solidity: function getBTCDepositAddress(address ethAddr) view returns(string)
func (_UserActivator *UserActivatorCaller) GetBTCDepositAddress(opts *bind.CallOpts, ethAddr common.Address) (string, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "getBTCDepositAddress", ethAddr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetBTCDepositAddress is a free data retrieval call binding the contract method 0xa0ddd62f.
//
// Solidity: function getBTCDepositAddress(address ethAddr) view returns(string)
func (_UserActivator *UserActivatorSession) GetBTCDepositAddress(ethAddr common.Address) (string, error) {
	return _UserActivator.Contract.GetBTCDepositAddress(&_UserActivator.CallOpts, ethAddr)
}

// GetBTCDepositAddress is a free data retrieval call binding the contract method 0xa0ddd62f.
//
// Solidity: function getBTCDepositAddress(address ethAddr) view returns(string)
func (_UserActivator *UserActivatorCallerSession) GetBTCDepositAddress(ethAddr common.Address) (string, error) {
	return _UserActivator.Contract.GetBTCDepositAddress(&_UserActivator.CallOpts, ethAddr)
}

// NetworkHrp is a free data retrieval call binding the contract method 0x4edac789.
//
// Solidity: function networkHrp() view returns(string)
func (_UserActivator *UserActivatorCaller) NetworkHrp(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "networkHrp")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NetworkHrp is a free data retrieval call binding the contract method 0x4edac789.
//
// Solidity: function networkHrp() view returns(string)
func (_UserActivator *UserActivatorSession) NetworkHrp() (string, error) {
	return _UserActivator.Contract.NetworkHrp(&_UserActivator.CallOpts)
}

// NetworkHrp is a free data retrieval call binding the contract method 0x4edac789.
//
// Solidity: function networkHrp() view returns(string)
func (_UserActivator *UserActivatorCallerSession) NetworkHrp() (string, error) {
	return _UserActivator.Contract.NetworkHrp(&_UserActivator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_UserActivator *UserActivatorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_UserActivator *UserActivatorSession) Owner() (common.Address, error) {
	return _UserActivator.Contract.Owner(&_UserActivator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_UserActivator *UserActivatorCallerSession) Owner() (common.Address, error) {
	return _UserActivator.Contract.Owner(&_UserActivator.CallOpts)
}

// P1x is a free data retrieval call binding the contract method 0xb1185919.
//
// Solidity: function p1x() view returns(uint256)
func (_UserActivator *UserActivatorCaller) P1x(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "p1x")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// P1x is a free data retrieval call binding the contract method 0xb1185919.
//
// Solidity: function p1x() view returns(uint256)
func (_UserActivator *UserActivatorSession) P1x() (*big.Int, error) {
	return _UserActivator.Contract.P1x(&_UserActivator.CallOpts)
}

// P1x is a free data retrieval call binding the contract method 0xb1185919.
//
// Solidity: function p1x() view returns(uint256)
func (_UserActivator *UserActivatorCallerSession) P1x() (*big.Int, error) {
	return _UserActivator.Contract.P1x(&_UserActivator.CallOpts)
}

// P1y is a free data retrieval call binding the contract method 0xad38cb0b.
//
// Solidity: function p1y() view returns(uint256)
func (_UserActivator *UserActivatorCaller) P1y(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "p1y")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// P1y is a free data retrieval call binding the contract method 0xad38cb0b.
//
// Solidity: function p1y() view returns(uint256)
func (_UserActivator *UserActivatorSession) P1y() (*big.Int, error) {
	return _UserActivator.Contract.P1y(&_UserActivator.CallOpts)
}

// P1y is a free data retrieval call binding the contract method 0xad38cb0b.
//
// Solidity: function p1y() view returns(uint256)
func (_UserActivator *UserActivatorCallerSession) P1y() (*big.Int, error) {
	return _UserActivator.Contract.P1y(&_UserActivator.CallOpts)
}

// P2x is a free data retrieval call binding the contract method 0xcca03acb.
//
// Solidity: function p2x() view returns(uint256)
func (_UserActivator *UserActivatorCaller) P2x(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "p2x")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// P2x is a free data retrieval call binding the contract method 0xcca03acb.
//
// Solidity: function p2x() view returns(uint256)
func (_UserActivator *UserActivatorSession) P2x() (*big.Int, error) {
	return _UserActivator.Contract.P2x(&_UserActivator.CallOpts)
}

// P2x is a free data retrieval call binding the contract method 0xcca03acb.
//
// Solidity: function p2x() view returns(uint256)
func (_UserActivator *UserActivatorCallerSession) P2x() (*big.Int, error) {
	return _UserActivator.Contract.P2x(&_UserActivator.CallOpts)
}

// P2y is a free data retrieval call binding the contract method 0xa62ef073.
//
// Solidity: function p2y() view returns(uint256)
func (_UserActivator *UserActivatorCaller) P2y(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "p2y")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// P2y is a free data retrieval call binding the contract method 0xa62ef073.
//
// Solidity: function p2y() view returns(uint256)
func (_UserActivator *UserActivatorSession) P2y() (*big.Int, error) {
	return _UserActivator.Contract.P2y(&_UserActivator.CallOpts)
}

// P2y is a free data retrieval call binding the contract method 0xa62ef073.
//
// Solidity: function p2y() view returns(uint256)
func (_UserActivator *UserActivatorCallerSession) P2y() (*big.Int, error) {
	return _UserActivator.Contract.P2y(&_UserActivator.CallOpts)
}

// ParseBTCTaprootAddress is a free data retrieval call binding the contract method 0xc1d643b1.
//
// Solidity: function parseBTCTaprootAddress(string _hrp, string _bitcoinAddress) pure returns(uint256, uint256)
func (_UserActivator *UserActivatorCaller) ParseBTCTaprootAddress(opts *bind.CallOpts, _hrp string, _bitcoinAddress string) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "parseBTCTaprootAddress", _hrp, _bitcoinAddress)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// ParseBTCTaprootAddress is a free data retrieval call binding the contract method 0xc1d643b1.
//
// Solidity: function parseBTCTaprootAddress(string _hrp, string _bitcoinAddress) pure returns(uint256, uint256)
func (_UserActivator *UserActivatorSession) ParseBTCTaprootAddress(_hrp string, _bitcoinAddress string) (*big.Int, *big.Int, error) {
	return _UserActivator.Contract.ParseBTCTaprootAddress(&_UserActivator.CallOpts, _hrp, _bitcoinAddress)
}

// ParseBTCTaprootAddress is a free data retrieval call binding the contract method 0xc1d643b1.
//
// Solidity: function parseBTCTaprootAddress(string _hrp, string _bitcoinAddress) pure returns(uint256, uint256)
func (_UserActivator *UserActivatorCallerSession) ParseBTCTaprootAddress(_hrp string, _bitcoinAddress string) (*big.Int, *big.Int, error) {
	return _UserActivator.Contract.ParseBTCTaprootAddress(&_UserActivator.CallOpts, _hrp, _bitcoinAddress)
}

// WasSeedSet is a free data retrieval call binding the contract method 0x9fa4989c.
//
// Solidity: function wasSeedSet() view returns(bool)
func (_UserActivator *UserActivatorCaller) WasSeedSet(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "wasSeedSet")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// WasSeedSet is a free data retrieval call binding the contract method 0x9fa4989c.
//
// Solidity: function wasSeedSet() view returns(bool)
func (_UserActivator *UserActivatorSession) WasSeedSet() (bool, error) {
	return _UserActivator.Contract.WasSeedSet(&_UserActivator.CallOpts)
}

// WasSeedSet is a free data retrieval call binding the contract method 0x9fa4989c.
//
// Solidity: function wasSeedSet() view returns(bool)
func (_UserActivator *UserActivatorCallerSession) WasSeedSet() (bool, error) {
	return _UserActivator.Contract.WasSeedSet(&_UserActivator.CallOpts)
}

// ActivateUser is a paid mutator transaction binding the contract method 0xb4acfe1c.
//
// Solidity: function activateUser(address _userAddress) returns()
func (_UserActivator *UserActivatorTransactor) ActivateUser(opts *bind.TransactOpts, _userAddress common.Address) (*types.Transaction, error) {
	return _UserActivator.contract.Transact(opts, "activateUser", _userAddress)
}

// ActivateUser is a paid mutator transaction binding the contract method 0xb4acfe1c.
//
// Solidity: function activateUser(address _userAddress) returns()
func (_UserActivator *UserActivatorSession) ActivateUser(_userAddress common.Address) (*types.Transaction, error) {
	return _UserActivator.Contract.ActivateUser(&_UserActivator.TransactOpts, _userAddress)
}

// ActivateUser is a paid mutator transaction binding the contract method 0xb4acfe1c.
//
// Solidity: function activateUser(address _userAddress) returns()
func (_UserActivator *UserActivatorTransactorSession) ActivateUser(_userAddress common.Address) (*types.Transaction, error) {
	return _UserActivator.Contract.ActivateUser(&_UserActivator.TransactOpts, _userAddress)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_UserActivator *UserActivatorTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserActivator.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_UserActivator *UserActivatorSession) RenounceOwnership() (*types.Transaction, error) {
	return _UserActivator.Contract.RenounceOwnership(&_UserActivator.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_UserActivator *UserActivatorTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _UserActivator.Contract.RenounceOwnership(&_UserActivator.TransactOpts)
}

// SetSeed is a paid mutator transaction binding the contract method 0xe5451bc8.
//
// Solidity: function setSeed(string _btcAddr1, string _btcAddr2, uint8 _network) returns()
func (_UserActivator *UserActivatorTransactor) SetSeed(opts *bind.TransactOpts, _btcAddr1 string, _btcAddr2 string, _network uint8) (*types.Transaction, error) {
	return _UserActivator.contract.Transact(opts, "setSeed", _btcAddr1, _btcAddr2, _network)
}

// SetSeed is a paid mutator transaction binding the contract method 0xe5451bc8.
//
// Solidity: function setSeed(string _btcAddr1, string _btcAddr2, uint8 _network) returns()
func (_UserActivator *UserActivatorSession) SetSeed(_btcAddr1 string, _btcAddr2 string, _network uint8) (*types.Transaction, error) {
	return _UserActivator.Contract.SetSeed(&_UserActivator.TransactOpts, _btcAddr1, _btcAddr2, _network)
}

// SetSeed is a paid mutator transaction binding the contract method 0xe5451bc8.
//
// Solidity: function setSeed(string _btcAddr1, string _btcAddr2, uint8 _network) returns()
func (_UserActivator *UserActivatorTransactorSession) SetSeed(_btcAddr1 string, _btcAddr2 string, _network uint8) (*types.Transaction, error) {
	return _UserActivator.Contract.SetSeed(&_UserActivator.TransactOpts, _btcAddr1, _btcAddr2, _network)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_UserActivator *UserActivatorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _UserActivator.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_UserActivator *UserActivatorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _UserActivator.Contract.TransferOwnership(&_UserActivator.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_UserActivator *UserActivatorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _UserActivator.Contract.TransferOwnership(&_UserActivator.TransactOpts, newOwner)
}

// UserActivatorOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the UserActivator contract.
type UserActivatorOwnershipTransferredIterator struct {
	Event *UserActivatorOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UserActivatorOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UserActivatorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UserActivatorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UserActivatorOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UserActivatorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UserActivatorOwnershipTransferred represents a OwnershipTransferred event raised by the UserActivator contract.
type UserActivatorOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_UserActivator *UserActivatorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*UserActivatorOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _UserActivator.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &UserActivatorOwnershipTransferredIterator{contract: _UserActivator.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_UserActivator *UserActivatorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *UserActivatorOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _UserActivator.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UserActivatorOwnershipTransferred)
				if err := _UserActivator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_UserActivator *UserActivatorFilterer) ParseOwnershipTransferred(log types.Log) (*UserActivatorOwnershipTransferred, error) {
	event := new(UserActivatorOwnershipTransferred)
	if err := _UserActivator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UserActivatorSeedChangedIterator is returned from FilterSeedChanged and is used to iterate over the raw logs and unpacked data for SeedChanged events raised by the UserActivator contract.
type UserActivatorSeedChangedIterator struct {
	Event *UserActivatorSeedChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UserActivatorSeedChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UserActivatorSeedChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UserActivatorSeedChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UserActivatorSeedChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UserActivatorSeedChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UserActivatorSeedChanged represents a SeedChanged event raised by the UserActivator contract.
type UserActivatorSeedChanged struct {
	BtcAddr1 string
	BtcAddr2 string
	Hrp      string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSeedChanged is a free log retrieval operation binding the contract event 0x123278a680a966680eaa7dc7f03997fbccbc36d6666b5b6f3388eb15fccf001f.
//
// Solidity: event SeedChanged(string btcAddr1, string btcAddr2, string hrp)
func (_UserActivator *UserActivatorFilterer) FilterSeedChanged(opts *bind.FilterOpts) (*UserActivatorSeedChangedIterator, error) {

	logs, sub, err := _UserActivator.contract.FilterLogs(opts, "SeedChanged")
	if err != nil {
		return nil, err
	}
	return &UserActivatorSeedChangedIterator{contract: _UserActivator.contract, event: "SeedChanged", logs: logs, sub: sub}, nil
}

// WatchSeedChanged is a free log subscription operation binding the contract event 0x123278a680a966680eaa7dc7f03997fbccbc36d6666b5b6f3388eb15fccf001f.
//
// Solidity: event SeedChanged(string btcAddr1, string btcAddr2, string hrp)
func (_UserActivator *UserActivatorFilterer) WatchSeedChanged(opts *bind.WatchOpts, sink chan<- *UserActivatorSeedChanged) (event.Subscription, error) {

	logs, sub, err := _UserActivator.contract.WatchLogs(opts, "SeedChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UserActivatorSeedChanged)
				if err := _UserActivator.contract.UnpackLog(event, "SeedChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSeedChanged is a log parse operation binding the contract event 0x123278a680a966680eaa7dc7f03997fbccbc36d6666b5b6f3388eb15fccf001f.
//
// Solidity: event SeedChanged(string btcAddr1, string btcAddr2, string hrp)
func (_UserActivator *UserActivatorFilterer) ParseSeedChanged(log types.Log) (*UserActivatorSeedChanged, error) {
	event := new(UserActivatorSeedChanged)
	if err := _UserActivator.contract.UnpackLog(event, "SeedChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UserActivatorUserAddressActivatedIterator is returned from FilterUserAddressActivated and is used to iterate over the raw logs and unpacked data for UserAddressActivated events raised by the UserActivator contract.
type UserActivatorUserAddressActivatedIterator struct {
	Event *UserActivatorUserAddressActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UserActivatorUserAddressActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UserActivatorUserAddressActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UserActivatorUserAddressActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UserActivatorUserAddressActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UserActivatorUserAddressActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UserActivatorUserAddressActivated represents a UserAddressActivated event raised by the UserActivator contract.
type UserActivatorUserAddressActivated struct {
	UserETHAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserAddressActivated is a free log retrieval operation binding the contract event 0xa80bfdc57bf882738a124b225520a84f1796f14d85d45b99687f5577ebe22512.
//
// Solidity: event UserAddressActivated(address userETHAddress)
func (_UserActivator *UserActivatorFilterer) FilterUserAddressActivated(opts *bind.FilterOpts) (*UserActivatorUserAddressActivatedIterator, error) {

	logs, sub, err := _UserActivator.contract.FilterLogs(opts, "UserAddressActivated")
	if err != nil {
		return nil, err
	}
	return &UserActivatorUserAddressActivatedIterator{contract: _UserActivator.contract, event: "UserAddressActivated", logs: logs, sub: sub}, nil
}

// WatchUserAddressActivated is a free log subscription operation binding the contract event 0xa80bfdc57bf882738a124b225520a84f1796f14d85d45b99687f5577ebe22512.
//
// Solidity: event UserAddressActivated(address userETHAddress)
func (_UserActivator *UserActivatorFilterer) WatchUserAddressActivated(opts *bind.WatchOpts, sink chan<- *UserActivatorUserAddressActivated) (event.Subscription, error) {

	logs, sub, err := _UserActivator.contract.WatchLogs(opts, "UserAddressActivated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UserActivatorUserAddressActivated)
				if err := _UserActivator.contract.UnpackLog(event, "UserAddressActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserAddressActivated is a log parse operation binding the contract event 0xa80bfdc57bf882738a124b225520a84f1796f14d85d45b99687f5577ebe22512.
//
// Solidity: event UserAddressActivated(address userETHAddress)
func (_UserActivator *UserActivatorFilterer) ParseUserAddressActivated(log types.Log) (*UserActivatorUserAddressActivated, error) {
	event := new(UserActivatorUserAddressActivated)
	if err := _UserActivator.contract.UnpackLog(event, "UserAddressActivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
