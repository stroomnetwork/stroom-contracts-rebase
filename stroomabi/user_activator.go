// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package stroomabi

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// UserActivatorMetaData contains all meta data concerning the UserActivator contract.
var UserActivatorMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"activateUser\",\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"activatedAddresses\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"btcAddr1\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"btcAddr2\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getBTCDepositAddress\",\"inputs\":[{\"name\":\"ethAddr\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"networkHrp\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"p1x\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"p1y\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"p2x\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"p2y\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"parseBTCTaprootAddress\",\"inputs\":[{\"name\":\"_hrp\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"_bitcoinAddress\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setSeed\",\"inputs\":[{\"name\":\"_btcAddr1\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"_btcAddr2\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"_network\",\"type\":\"uint8\",\"internalType\":\"enumBitcoinNetworkEncoder.Network\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"wasSeedSet\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SeedChanged\",\"inputs\":[{\"name\":\"btcAddr1\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"btcAddr2\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"hrp\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"UserAddressActivated\",\"inputs\":[{\"name\":\"userETHAddress\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"CannotParseBtcAddress\",\"inputs\":[{\"name\":\"btcAddress\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"hrp\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"err\",\"type\":\"uint8\",\"internalType\":\"enumBech32m.DecodeError\"}]},{\"type\":\"error\",\"name\":\"EncodingIsUnknown\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OwnableInvalidOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OwnableUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"SeedWasNotSetYet\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"UnsupportedBtcAddress\",\"inputs\":[{\"name\":\"btcAddress\",\"type\":\"string\",\"internalType\":\"string\"}]}]",
	Bin: "0x6080604052348015600e575f5ffd5b505f805460ff191690553380603c57604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b6043816048565b506099565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b614100806100a65f395ff3fe608060405234801561000f575f5ffd5b50600436106100fb575f3560e01c8063ad38cb0b11610093578063c1d643b111610063578063c1d643b1146101db578063cca03acb14610203578063e5451bc81461020c578063f2fde38b1461021f575f5ffd5b8063ad38cb0b146101ae578063ad427415146101b7578063b1185919146101bf578063b4acfe1c146101c8575f5ffd5b80638da5cb5b116100ce5780638da5cb5b1461015d5780639fa4989c14610178578063a0ddd62f14610184578063a62ef07314610197575f5ffd5b80630b68f450146100ff5780632fbb7ab6146101365780634edac7891461014b578063715018a614610153575b5f5ffd5b61012161010d3660046139af565b60096020525f908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61013e610232565b60405161012d9190613a03565b61013e6102be565b61015b6102cb565b005b6008546040516001600160a01b03909116815260200161012d565b5f546101219060ff1681565b61013e6101923660046139af565b6102de565b6101a060075481565b60405190815260200161012d565b6101a060055481565b61013e6103a7565b6101a060045481565b61015b6101d63660046139af565b6103b4565b6101ee6101e9366004613a66565b61047a565b6040805192835260208301919091520161012d565b6101a060065481565b61015b61021a366004613b44565b610593565b61015b61022d3660046139af565b6105af565b6002805461023f90613bc8565b80601f016020809104026020016040519081016040528092919081815260200182805461026b90613bc8565b80156102b65780601f1061028d576101008083540402835291602001916102b6565b820191905f5260205f20905b81548152906001019060200180831161029957829003601f168201915b505050505081565b6003805461023f90613bc8565b6102d36105ec565b6102dc5f610619565b565b5f5460609060ff166103035760405163da4bbb2960e01b815260040160405180910390fd5b6103a16004546005546006546007546003805461031f90613bc8565b80601f016020809104026020016040519081016040528092919081815260200182805461034b90613bc8565b80156103965780601f1061036d57610100808354040283529160200191610396565b820191905f5260205f20905b81548152906001019060200180831161037957829003601f168201915b50505050508761066a565b92915050565b6001805461023f90613bc8565b6001600160a01b0381165f9081526009602052604090205460ff16156104215760405162461bcd60e51b815260206004820152601960248201527f5573657220697320616c7265616479206163746976617465640000000000000060448201526064015b60405180910390fd5b6001600160a01b0381165f81815260096020908152604091829020805460ff1916600117905590519182527fa80bfdc57bf882738a124b225520a84f1796f14d85d45b99687f5577ebe22512910160405180910390a150565b5f5f5f5f5f6104be8888888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506106cb92505050565b919450925090505f8160128111156104d8576104d8613c00565b146104fe578686898360405163356b2f0d60e01b81526004016104189493929190613c3c565b8260ff16600114158061051357508151602014155b1561053557868660405163198b15b960e31b8152600401610418929190613c8f565b5f61053f83613caa565b905080158061055457506401000003d0198110155b1561057657878760405163198b15b960e31b8152600401610418929190613c8f565b5f61058082610a6a565b919650909450505050505b935093915050565b61059b6105ec565b6105a88585858585610a80565b5050505050565b6105b76105ec565b6001600160a01b0381166105e057604051631e4fbdf760e01b81525f6004820152602401610418565b6105e981610619565b50565b6008546001600160a01b031633146102dc5760405163118cdaa760e01b8152336004820152602401610418565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b60605f5f61067b8989898988610b2b565b909250905061068b600282613ce1565b6001036106a5576106a2816401000003d019613d08565b90505b5f6106b08383610b67565b5090506106bd8187610c7d565b9a9950505050505050505050565b5f60605f5f5f5f5f6106dc88610cb3565b929650909450925090505f8160128111156106f9576106f9613c00565b1461071d57604080515f808252602082019092528296509650965050505050610a63565b61072789856110b9565b61074b57604080515f80825260208201909252600b96509650965050505050610a63565b82515f0361077357604080515f80825260208201909252600c96509650965050505050610a63565b6010835f8151811061078757610787613d1b565b016020015160f81c11156107b557604080515f80825260208201909252600f96509650965050505050610a63565b5f600184516107c49190613d08565b6001600160401b038111156107db576107db613a15565b6040519080825280601f01601f191660200182016040528015610805576020820181803683370190505b5080519091505f5b818110156108765785610821826001613d2f565b8151811061083157610831613d1b565b602001015160f81c60f81b83828151811061084e5761084e613d1b565b60200101906001600160f81b03191690815f1a90535061086f600182613d2f565b905061080d565b5060606108828361114a565b945090505f84601281111561089957610899613c00565b146108c057604080515f808252602082019092528599509950995050505050505050610a63565b6002815110156108ed57604080515f80825260208201909252600d99509950995050505050505050610a63565b60288151111561091a57604080515f80825260208201909252600e99509950995050505050505050610a63565b855f8151811061092c5761092c613d1b565b016020015160f81c15801561094357508051601414155b801561095157508051602014155b1561097957604080515f80825260208201909252601099509950995050505050505050610a63565b855f8151811061098b5761098b613d1b565b016020015160f81c1580156109b157505f8560028111156109ae576109ae613c00565b14155b156109d957604080515f80825260208201909252601199509950995050505050505050610a63565b855f815181106109eb576109eb613d1b565b016020015160f81c15801590610a1357506001856002811115610a1057610a10613c00565b14155b15610a3b57604080515f80825260208201909252601299509950995050505050505050610a63565b855f81518110610a4d57610a4d613d1b565b016020015160f81c995097505f96505050505050505b9250925092565b5f6103a16002835f60076401000003d019611c29565b5f610a8a82611d58565b90506003610a988282613d8b565b50610aa481878761047a565b600555600455610ab581858561047a565b6007556006556001610ac8868883613e45565b506002610ad6848683613e45565b505f805460ff191660011790556040517f123278a680a966680eaa7dc7f03997fbccbc36d6666b5b6f3388eb15fccf001f90610b1b9088908890889088908790613efe565b60405180910390a1505050505050565b5f5f5f610b39888886611e76565b90505f610b47878787611e76565b9050610b57898989898686611f01565b9350935050509550959350505050565b5f5f5f60027fe80fe1639c9ca050e3af1b39c143c63e429cbceb15d940fbb5c5a1f4af57c5e98087604051602001610bb2939291909283526020830191909152604082015260600190565b60408051601f1981840301815290829052610bcc91613f4f565b602060405180830381855afa158015610be7573d5f5f3e3d5ffd5b5050506040513d601f19601f82011682018060405250810190610c0a9190613f5a565b90505f80610c597f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f817987f483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b885611f4a565b915091505f5f610c6b89898686611f6b565b909750955050505050505b9250929050565b6060610cac82600185604051602001610c9891815260200190565b604051602081830303815290604052611f8e565b9392505050565b6060805f5f605a85511115610ce6575050604080515f8082526020820190815281830190925292509050600260076110b2565b610cef85611fef565b610d17575050604080515f8082526020820190815281830190925292509050600260036110b2565b610d2085612068565b15610d49575050604080515f8082526020820190815281830190925292509050600260046110b2565b5f610d538661214c565b90505f60018251610d649190613f71565b905060028251118015610d9c575081600281518110610d8557610d85613d1b565b6020910101516001600160f81b031916603160f81b145b15610da957506002610e25565b60018251610db79190613f71565b90505b610dc5600182613f71565b90505f811215610df7575050604080515f808252602082019081528183019092529450925060029150600a90506110b2565b818181518110610e0957610e09613d1b565b0160200151603160f81b6001600160f81b031990911603610dba575b6001811215610e56575050604080515f808252602082019081528183019092529450925060029150600990506110b2565b8151610e63826007613f97565b1315610e91575050604080515f808252602082019081528183019092529450925060029150600690506110b2565b5f816001600160401b03811115610eaa57610eaa613a15565b6040519080825280601f01601f191660200182016040528015610ed4576020820181803683370190505b5090505f5b82811015610f3857838181518110610ef357610ef3613d1b565b602001015160f81c60f81b828281518110610f1057610f10613d1b565b60200101906001600160f81b03191690815f1a905350610f31600182613d2f565b9050610ed9565b505f80610f5185610f4a866001613f97565b87516122a8565b90925090505f816012811115610f6957610f69613c00565b14610f9757604080515f80825260208201908152818301909252995097506002965094506110b29350505050565b5f610fa28484612440565b90506002816002811115610fb857610fb8613c00565b03610fea575050604080515f808252602082019081528183019092529850965060029550600594506110b29350505050565b5f60068451610ff99190613d08565b6001600160401b0381111561101057611010613a15565b6040519080825280601f01601f19166020018201604052801561103a576020820181803683370190505b5080519091505f5b818110156110a15785818151811061105c5761105c613d1b565b602001015160f81c60f81b83828151811061107957611079613d1b565b60200101906001600160f81b03191690815f1a90535061109a600182613d2f565b9050611042565b50949a50985096505f955050505050505b9193509193565b5f81518351146110ca57505f6103a1565b82515f5b8181101561113f578381815181106110e8576110e8613d1b565b602001015160f81c60f81b6001600160f81b03191685828151811061110f5761110f613d1b565b01602001516001600160f81b0319161461112d575f925050506103a1565b611138600182613d2f565b90506110ce565b506001949350505050565b60605f5f5f6008855161115d9190613ce1565b90505f5f6008875161116f9190613fbe565b90505f61117d826008613fd1565b90505f61118b836005613fd1565b9050846001036111d2575f5b6040519080825280601f01601f1916602001820160405280156111c1576020820181803683370190505b509960029950975050505050505050565b8460020361128f578860018a516111e99190613d08565b815181106111f9576111f9613d1b565b60209101015160f81c6003165f036112715788611217836001613d2f565b8151811061122757611227613d1b565b602001015160f81c60f81b60f81c60ff1660058a848151811061124c5761124c613d1b565b0160200151611263929160f89190911c901b613d2f565b60021c955060019350611677565b5050604080515f815260208101909152976001975095505050505050565b8460030361129d575f611197565b846004036113a0578860018a516112b49190613d08565b815181106112c4576112c4613d1b565b60209101015160f81c600f165f0361127157886112e2836003613d2f565b815181106112f2576112f2613d1b565b016020015160f81c60058a611308856002613d2f565b8151811061131857611318613d1b565b016020015160f81c901b600a8b611330866001613d2f565b8151811061134057611340613d1b565b602001015160f81c60f81b60f81c60ff16901b600f8c868151811061136757611367613d1b565b016020015161137e929160f89190911c901b613d2f565b6113889190613d2f565b6113929190613d2f565b60041c955060029350611677565b846005036114d5578860018a516113b79190613d08565b815181106113c7576113c7613d1b565b60209101015160f81c6001165f0361127157886113e5836004613d2f565b815181106113f5576113f5613d1b565b016020015160f81c60058a61140b856003613d2f565b8151811061141b5761141b613d1b565b016020015160f81c901b600a8b611433866002613d2f565b8151811061144357611443613d1b565b016020015160f81c901b600f8c61145b876001613d2f565b8151811061146b5761146b613d1b565b602001015160f81c60f81b60f81c60ff16901b60148d878151811061149257611492613d1b565b01602001516114a9929160f89190911c901b613d2f565b6114b39190613d2f565b6114bd9190613d2f565b6114c79190613d2f565b60011c955060039350611677565b846006036114e3575f611197565b84600703611677578860018a516114fa9190613d08565b8151811061150a5761150a613d1b565b60209101015160f81c6007165f036112715788611528836006613d2f565b8151811061153857611538613d1b565b016020015160f81c60058a61154d8583613d2f565b8151811061155d5761155d613d1b565b016020015160f81c901b600a8b611575866004613d2f565b8151811061158557611585613d1b565b016020015160f81c901b600f8c61159d876003613d2f565b815181106115ad576115ad613d1b565b016020015160f81c901b60148d6115c5886002613d2f565b815181106115d5576115d5613d1b565b016020015160f81c901b60198e6115ed896001613d2f565b815181106115fd576115fd613d1b565b602001015160f81c60f81b60f81c60ff16901b601e8f898151811061162457611624613d1b565b016020015161163b929160f89190911c901b613d2f565b6116459190613d2f565b61164f9190613d2f565b6116599190613d2f565b6116639190613d2f565b61166d9190613d2f565b60031c9550600493505b5f84611684856005613fd1565b61168e9190613d2f565b6001600160401b038111156116a5576116a5613a15565b6040519080825280601f01601f1916602001820160405280156116cf576020820181803683370190505b5090505f5b848110156119e1575f6116e8826008613fd1565b90505f6116f6836005613fd1565b90505f60238e848151811061170d5761170d613d1b565b016020015160f81c901b9050601e8e611727856001613d2f565b8151811061173757611737613d1b565b016020015161174e9160f89190911c901b82613d2f565b905060198e61175e856002613d2f565b8151811061176e5761176e613d1b565b01602001516117859160f89190911c901b82613d2f565b905060148e611795856003613d2f565b815181106117a5576117a5613d1b565b01602001516117bc9160f89190911c901b82613d2f565b9050600f8e6117cc856004613d2f565b815181106117dc576117dc613d1b565b01602001516117f39160f89190911c901b82613d2f565b9050600a8e611803856005613d2f565b8151811061181357611813613d1b565b016020015161182a9160f89190911c901b82613d2f565b905060058e61183a856006613d2f565b8151811061184a5761184a613d1b565b01602001516118619160f89190911c901b82613d2f565b90508d61186f846007613d2f565b8151811061187f5761187f613d1b565b01602001516118919060f81c82613d2f565b9050602081901c60ff1660f81b8583815181106118b0576118b0613d1b565b60200101906001600160f81b03191690815f1a9053506001600160f81b031960e082901b16856118e1846001613d2f565b815181106118f1576118f1613d1b565b60200101906001600160f81b03191690815f1a9053506001600160f81b031960e882901b1685611922846002613d2f565b8151811061193257611932613d1b565b60200101906001600160f81b03191690815f1a9053506001600160f81b031960f082901b1685611963846003613d2f565b8151811061197357611973613d1b565b60200101906001600160f81b03191690815f1a9053506001600160f81b031960f882901b16856119a4846004613d2f565b815181106119b4576119b4613d1b565b60200101906001600160f81b03191690815f1a9053505050506001816119da9190613d2f565b90506116d4565b5084600103611a1e578660ff1660f81b818381518110611a0357611a03613d1b565b60200101906001600160f81b03191690815f1a905350611c1a565b84600203611a8457600887901c60ff1660f81b818381518110611a4357611a43613d1b565b60200101906001600160f81b03191690815f1a9053506001600160f81b031960f888901b1681611a74846001613d2f565b81518110611a0357611a03613d1b565b84600303611b1b57601087901c60ff1660f81b818381518110611aa957611aa9613d1b565b60200101906001600160f81b03191690815f1a9053506001600160f81b031960f088901b1681611ada846001613d2f565b81518110611aea57611aea613d1b565b60200101906001600160f81b03191690815f1a9053506001600160f81b031960f888901b1681611a74846002613d2f565b84600403611c1a57601887901c60ff1660f81b818381518110611b4057611b40613d1b565b60200101906001600160f81b03191690815f1a9053506001600160f81b031960e888901b1681611b71846001613d2f565b81518110611b8157611b81613d1b565b60200101906001600160f81b03191690815f1a9053506001600160f81b031960f088901b1681611bb2846002613d2f565b81518110611bc257611bc2613d1b565b60200101906001600160f81b03191690815f1a9053506001600160f81b031960f888901b1681611bf3846003613d2f565b81518110611c0357611c03613d1b565b60200101906001600160f81b03191690815f1a9053505b995f9950975050505050505050565b5f8560ff1660021480611c3f57508560ff166003145b611ca55760405162461bcd60e51b815260206004820152603160248201527f456c6c697074696343757276653a696e6e76616c696420636f6d7072657373656044820152700c8408a8640e0ded2dce840e0e4caccd2f607b1b6064820152608401610418565b5f8280611cb457611cb4613ccd565b8380611cc257611cc2613ccd565b858580611cd157611cd1613ccd565b888a09088480611ce357611ce3613ccd565b8580611cf157611cf1613ccd565b898a098909089050611d1a816004611d0a866001613d2f565b611d149190613fbe565b856125ad565b90505f6002611d2c60ff8a1684613d2f565b611d369190613ce1565b15611d4a57611d458285613d08565b611d4c565b815b98975050505050505050565b60605f826003811115611d6d57611d6d613c00565b03611d90575050604080518082019091526002815261626360f01b602082015290565b6001826003811115611da457611da4613c00565b03611dc75750506040805180820190915260028152613a3160f11b602082015290565b6002826003811115611ddb57611ddb613c00565b03611e005750506040805180820190915260048152631898dc9d60e21b602082015290565b6003826003811115611e1457611e14613c00565b03611e3757505060408051808201909152600281526139b160f11b602082015290565b60405162461bcd60e51b8152602060048201526014602482015273556e6b6e6f776e206e6574776f726b207479706560601b6044820152606401610418565b60408051602081018590529081018390526001600160a01b03821660608201525f90819060029060800160408051601f1981840301815290829052611eba91613f4f565b602060405180830381855afa158015611ed5573d5f5f3e3d5ffd5b5050506040513d601f19601f82011682018060405250810190611ef89190613f5a565b95945050505050565b5f5f5f5f611f108a8a88611f4a565b915091505f5f611f218a8a89611f4a565b915091505f5f611f3386868686611f6b565b90985096505050505050505b965096945050505050565b5f5f611f5f8386865f6401000003d01961267f565b91509150935093915050565b5f5f611f81868686865f6401000003d0196126b6565b9150915094509492505050565b60605f60ff841615611fa1576001611fa3565b5f5b90505f611faf84612738565b90505f8560f81b82604051602001611fc8929190613fe8565b6040516020818303038152906040529050611fe4878285612c25565b979650505050505050565b80515f90815b8181101561205e57602184828151811061201157612011613d1b565b016020015160f81c108061203e5750607e84828151811061203457612034613d1b565b016020015160f81c115b1561204c57505f9392505050565b612057600182613d2f565b9050611ff5565b5060019392505050565b5f8080805b845181101561214257606185828151811061208a5761208a613d1b565b016020015160f81c108015906120ba5750607a8582815181106120af576120af613d1b565b016020015160f81c11155b156120c85760019250612116565b60418582815181106120dc576120dc613d1b565b016020015160f81c1080159061210c5750605a85828151811061210157612101613d1b565b016020015160f81c11155b1561211657600191505b8280156121205750815b1561213057506001949350505050565b61213b600182613d2f565b905061206d565b505f949350505050565b60605f82516001600160401b0381111561216857612168613a15565b6040519080825280601f01601f191660200182016040528015612192576020820181803683370190505b5083519091505f5b8181101561229f5760418582815181106121b6576121b6613d1b565b016020015160f81c108015906121e65750605a8582815181106121db576121db613d1b565b016020015160f81c11155b15612247578481815181106121fd576121fd613d1b565b602001015160f81c60f81b60f81c60206122179190614003565b60f81b83828151811061222c5761222c613d1b565b60200101906001600160f81b03191690815f1a90535061228d565b84818151811061225957612259613d1b565b602001015160f81c60f81b83828151811061227657612276613d1b565b60200101906001600160f81b03191690815f1a9053505b612298600182613d2f565b905061219a565b50909392505050565b60605f806122b68585613d08565b6001600160401b038111156122cd576122cd613a15565b6040519080825280601f01601f1916602001820160405280156122f7576020820181803683370190505b509050845b84811015612434575f87828151811061231757612317613d1b565b602001015160f81c60f81b60f81c90506040518060a001604052806080815260200161404b60809139518160ff1610158061239157506040518060a001604052806080815260200161404b608091398160ff168151811061237a5761237a613d1b565b6020910101516001600160f81b031916607f60f81b145b156123b3575050604080515f81526020810190915292506008915061058b9050565b6040518060a001604052806080815260200161404b608091398160ff16815181106123e0576123e0613d1b565b01602001516001600160f81b031916836123fa8985613d08565b8151811061240a5761240a613d1b565b60200101906001600160f81b03191690815f1a90535061242d9050600182613d2f565b90506122fc565b50955f95509350505050565b5f5f61244b84612e08565b90505f8351825161245c9190613d2f565b6001600160401b0381111561247357612473613a15565b60405190808252806020026020018201604052801561249c578160200160208202803683370190505b5082519091505f5b818110156124fe578381815181106124be576124be613d1b565b602001015160f81c60f81b60f81c60ff168382815181106124e1576124e1613d1b565b60209081029190910101526124f7600182613d2f565b90506124a4565b5084515f5b818110156125645786818151811061251d5761251d613d1b565b0160200151855160f89190911c9085906125379084613d2f565b8151811061254757612547613d1b565b602090810291909101015261255d600182613d2f565b9050612503565b505f61256f84612f6f565b905080600103612586575f955050505050506103a1565b632bc830a3810361259f576001955050505050506103a1565b506002979650505050505050565b5f815f036125fd5760405162461bcd60e51b815260206004820152601e60248201527f456c6c697074696343757276653a206d6f64756c7573206973207a65726f00006044820152606401610418565b835f0361260b57505f610cac565b825f0361261a57506001610cac565b6001600160ff1b5b801561267657838186161515870a85848509099150836002820486161515870a85848509099150836004820486161515870a85848509099150836008820486161515870a8584850909915060109004612622565b50949350505050565b5f5f5f5f5f6126938a8a8a60018b8b613046565b9250925092506126a5838383896130c4565b945094505050509550959350505050565b5f80808080888b036127015785806126d0576126d0613ccd565b888b085f036126e7575f5f94509450505050611f3f565b6126f58b8b60018a8a61312e565b9194509250905061271a565b6127128b8b60018c8c60018c6132c9565b919450925090505b612726838383896130c4565b94509450505050965096945050505050565b60605f600583516127499190613fbe565b90505f6005845161275a9190613ce1565b90505f806001839003612772575060029050806127a9565b82600203612785575060049050806127a9565b8260030361279957506005905060016127a9565b826004036127a957506007905060035b5f826127b6866008613fd1565b6127c09190613d2f565b90505f816001600160401b038111156127db576127db613a15565b6040519080825280601f01601f191660200182016040528015612805576020820181803683370190505b5090505f5b86811015612b2e575f61281e826005613fd1565b90505f61282c836008613fd1565b90505f8b61283b846004613d2f565b8151811061284b5761284b613d1b565b016020015160f81c8c61285f856003613d2f565b8151811061286f5761286f613d1b565b01602001516128839060f81c610100613fd1565b8d61288f866002613d2f565b8151811061289f5761289f613d1b565b01602001516128b49060f81c62010000613fd1565b8e6128c0876001613d2f565b815181106128d0576128d0613d1b565b01602001516128e69060f81c6301000000613fd1565b8f87815181106128f8576128f8613d1b565b016020015161290f9060f81c640100000000613fd1565b6129199190613d2f565b6129239190613d2f565b61292d9190613d2f565b6129379190613d2f565b9050601f60f81b60f882901b1685612950846007613d2f565b8151811061296057612960613d1b565b60200101906001600160f81b03191690815f1a905350601f60f81b60f382901b168561298d846006613d2f565b8151811061299d5761299d613d1b565b60200101906001600160f81b03191690815f1a905350601f60f81b60ee82901b16856129ca846005613d2f565b815181106129da576129da613d1b565b60200101906001600160f81b03191690815f1a905350601f60f81b60e982901b1685612a07846004613d2f565b81518110612a1757612a17613d1b565b60200101906001600160f81b03191690815f1a905350601f60f81b60e482901b1685612a44846003613d2f565b81518110612a5457612a54613d1b565b60200101906001600160f81b03191690815f1a905350601f60f81b60df82901b1685612a81846002613d2f565b81518110612a9157612a91613d1b565b60200101906001600160f81b03191690815f1a905350601f60f81b60da82901b1685612abe846001613d2f565b81518110612ace57612ace613d1b565b60200101906001600160f81b03191690815f1a905350602381901c601f1660f81b858381518110612b0157612b01613d1b565b60200101906001600160f81b03191690815f1a905350505050600181612b279190613d2f565b905061280a565b508315611fe45787515f9081612b45896005613fd1565b90505b81811015612b8c578a8181518110612b6257612b62613d1b565b0160200151612b789060f81c600885901b613d2f565b9250612b85600182613d2f565b9050612b48565b5090841b905f5b86811015612c17576001612ba78289613d08565b612bb19190613d08565b612bbc906005613fd1565b83901c60f81b601f60f81b168482612bd58c6008613fd1565b612bdf9190613d2f565b81518110612bef57612bef613d1b565b60200101906001600160f81b03191690815f1a905350612c10600182613d2f565b9050612b93565b505050979650505050505050565b60606002826002811115612c3b57612c3b613c00565b03612c59576040516305dc3f9d60e51b815260040160405180910390fd5b5f612c658585856135f8565b84519091505f5b81811015612d1d576040518060400160405280602081526020017f71707a7279397838676632747664773073336a6e35346b686365366d7561376c815250868281518110612cbc57612cbc613d1b565b0160200151815160f89190911c908110612cd857612cd8613d1b565b602001015160f81c60f81b868281518110612cf557612cf5613d1b565b60200101906001600160f81b03191690815f1a905350612d16600182613d2f565b9050612c6c565b505f5b6006811015612dd2576040518060400160405280602081526020017f71707a7279397838676632747664773073336a6e35346b686365366d7561376c815250838281518110612d7157612d71613d1b565b0160200151815160f89190911c908110612d8d57612d8d613d1b565b602001015160f81c60f81b838281518110612daa57612daa613d1b565b60200101906001600160f81b03191690815f1a905350612dcb600182613d2f565b9050612d20565b50604051612dee908790603160f81b908890869060200161401c565b604051602081830303815290604052925050509392505050565b60605f82518351612e199190613d2f565b612e24906001613d2f565b6001600160401b03811115612e3b57612e3b613a15565b6040519080825280601f01601f191660200182016040528015612e65576020820181803683370190505b5083519091505f5b81811015612f39576005858281518110612e8957612e89613d1b565b602001015160f81c60f81b6001600160f81b031916901c838281518110612eb257612eb2613d1b565b60200101906001600160f81b03191690815f1a905350848181518110612eda57612eda613d1b565b01602001518551601f60f81b909116908490612ef69084613d2f565b612f01906001613d2f565b81518110612f1157612f11613d1b565b60200101906001600160f81b03191690815f1a905350612f32600182613d2f565b9050612e6d565b505f60f81b82855181518110612f5157612f51613d1b565b60200101906001600160f81b03191690815f1a905350909392505050565b6040805160a081018252633b6a57b281526326508e6d6020820152631ea119fa91810191909152633d4233dd6060820152632a1462b3608082015281515f9190600190835b8181101561303c575f601984901c9050868281518110612fd657612fd6613d1b565b60200260200101516005856301ffffff16901b1893505f5f90505b6005811015613032578082901c60011660010361302a5785816005811061301a5761301a613d1b565b602002015163ffffffff16851894505b600101612ff1565b5050600101612fb4565b5090949350505050565b5f5f5f885f0361305d5750869150859050846130b8565b885f8060015b83156130af576001841615613089576130818383838f8f8f8e6132c9565b919450925090505b613094600285613fbe565b93506130a38c8c8c8c8c61312e565b919d509b509950613063565b91955093509150505b96509650969350505050565b5f5f5f6130d185856138c7565b90505f84806130e2576130e2613ccd565b82830990505f85806130f6576130f6613ccd565b828a0990505f868061310a5761310a613ccd565b878061311857613118613ccd565b8486098a09919a91995090975050505050505050565b5f5f5f855f036131455750869150859050846132be565b5f848061315457613154613ccd565b898a0990505f858061316857613168613ccd565b898a0990505f868061317c5761317c613ccd565b898a0990505f878061319057613190613ccd565b888061319e5761319e613ccd565b848e0960040990505f88806131b5576131b5613ccd565b89806131c3576131c3613ccd565b8a806131d1576131d1613ccd565b8586098c098a806131e4576131e4613ccd565b8760030908905088806131f9576131f9613ccd565b898061320757613207613ccd565b838408613214908b613d08565b8a8061322257613222613ccd565b838409089450888061323657613236613ccd565b898061324457613244613ccd565b8a8061325257613252613ccd565b868709600809613262908b613d08565b8a8061327057613270613ccd565b8b8061327e5761327e613ccd565b613288898e613d08565b86088409089350888061329d5761329d613ccd565b89806132ab576132ab613ccd565b8c8e096002099497509295509293505050505b955095509592505050565b5f8080891580156132d8575088155b156132ea5750859150849050836135eb565b861580156132f6575085155b156133085750889150879050866135eb565b613310613991565b848061331e5761331e613ccd565b898a098152848061333157613331613ccd565b81518a096020820152848061334857613348613ccd565b8687096040820152848061335e5761335e613ccd565b604082015187096060820152604080516080810190915280868061338457613384613ccd565b60408401518e098152602001868061339e5761339e613ccd565b60608401518d09815260200186806133b8576133b8613ccd565b83518b09815260200186806133cf576133cf613ccd565b60208401518a099052604081015181519192501415806133f757506060810151602082015114155b6134435760405162461bcd60e51b815260206004820152601e60248201527f557365206a6163446f75626c652066756e6374696f6e20696e737465616400006044820152606401610418565b61344b613991565b858061345957613459613ccd565b82516134659088613d08565b6040840151088152858061347b5761347b613ccd565b602083015161348a9088613d08565b606084015108602082015285806134a3576134a3613ccd565b81518009604082015285806134ba576134ba613ccd565b815160408301510960608201525f86806134d6576134d6613ccd565b60608301516134e59089613d08565b88806134f3576134f3613ccd565b60208501518009089050868061350b5761350b613ccd565b878061351957613519613ccd565b888061352757613527613ccd565b604085015186510960020961353c9089613d08565b820890505f878061354f5761354f613ccd565b888061355d5761355d613ccd565b613567848b613d08565b8a8061357557613575613ccd565b6040870151885109086020850151099050878061359457613594613ccd565b88806135a2576135a2613ccd565b60608501516020870151096135b7908a613d08565b820890505f88806135ca576135ca613ccd565b89806135d8576135d8613ccd565b8b8f098551099297509095509093505050505b9750975097945050505050565b60605f600183600281111561360f5761360f613c00565b1461361b576001613621565b632bc830a35b90505f61362d86612e08565b90505f8551825161363e9190613d2f565b613649906006613d2f565b6001600160401b0381111561366057613660613a15565b604051908082528060200260200182016040528015613689578160200160208202803683370190505b5082519091505f5b818110156136eb578381815181106136ab576136ab613d1b565b602001015160f81c60f81b60f81c60ff168382815181106136ce576136ce613d1b565b60209081029190910101526136e4600182613d2f565b9050613691565b5086515f5b818110156137515788818151811061370a5761370a613d1b565b0160200151855160f89190911c9085906137249084613d2f565b8151811061373457613734613d1b565b602090810291909101015261374a600182613d2f565b90506136f0565b505f8561375d85612f6f565b6040805160068082528183019092529190921892505f91602082018180368337019050509050601982901c601f1660f81b815f815181106137a0576137a0613d1b565b60200101906001600160f81b03191690815f1a905350601482901c601f1660f81b816001815181106137d4576137d4613d1b565b60200101906001600160f81b03191690815f1a905350600f82901c601f1660f81b8160028151811061380857613808613d1b565b60200101906001600160f81b03191690815f1a905350600a82901c601f1660f81b8160038151811061383c5761383c613d1b565b60200101906001600160f81b03191690815f1a905350600582901c601f1660f81b8160048151811061387057613870613d1b565b60200101906001600160f81b03191690815f1a9053505f82901c601f1660f81b816005815181106138a3576138a3613d1b565b60200101906001600160f81b03191690815f1a9053509a9950505050505050505050565b5f82158015906138d75750818314155b80156138e257508115155b61391f5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210373ab6b132b960911b6044820152606401610418565b5f600183825b8615613986576139358783613fbe565b905082868061394657613946613ccd565b878061395457613954613ccd565b8584096139619089613d08565b86089094509250866139738183613fd1565b61397d9084613d08565b97509150613925565b509195945050505050565b60405180608001604052806004906020820280368337509192915050565b5f602082840312156139bf575f5ffd5b81356001600160a01b0381168114610cac575f5ffd5b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f610cac60208301846139d5565b634e487b7160e01b5f52604160045260245ffd5b5f5f83601f840112613a39575f5ffd5b5081356001600160401b03811115613a4f575f5ffd5b602083019150836020828501011115610c76575f5ffd5b5f5f5f60408486031215613a78575f5ffd5b83356001600160401b03811115613a8d575f5ffd5b8401601f81018613613a9d575f5ffd5b80356001600160401b03811115613ab657613ab6613a15565b604051601f8201601f19908116603f011681016001600160401b0381118282101715613ae457613ae4613a15565b604052818152828201602001881015613afb575f5ffd5b816020840160208301375f6020838301015280955050505060208401356001600160401b03811115613b2b575f5ffd5b613b3786828701613a29565b9497909650939450505050565b5f5f5f5f5f60608688031215613b58575f5ffd5b85356001600160401b03811115613b6d575f5ffd5b613b7988828901613a29565b90965094505060208601356001600160401b03811115613b97575f5ffd5b613ba388828901613a29565b909450925050604086013560048110613bba575f5ffd5b809150509295509295909350565b600181811c90821680613bdc57607f821691505b602082108103613bfa57634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52602160045260245ffd5b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b606081525f613c4f606083018688613c14565b8281036020840152613c6181866139d5565b91505060138310613c8057634e487b7160e01b5f52602160045260245ffd5b82604083015295945050505050565b602081525f613ca2602083018486613c14565b949350505050565b80516020808301519190811015613bfa575f1960209190910360031b1b16919050565b634e487b7160e01b5f52601260045260245ffd5b5f82613cef57613cef613ccd565b500690565b634e487b7160e01b5f52601160045260245ffd5b818103818111156103a1576103a1613cf4565b634e487b7160e01b5f52603260045260245ffd5b808201808211156103a1576103a1613cf4565b601f821115613d8657805f5260205f20601f840160051c81016020851015613d675750805b601f840160051c820191505b818110156105a8575f8155600101613d73565b505050565b81516001600160401b03811115613da457613da4613a15565b613db881613db28454613bc8565b84613d42565b6020601f821160018114613dea575f8315613dd35750848201515b5f19600385901b1c1916600184901b1784556105a8565b5f84815260208120601f198516915b82811015613e195787850151825560209485019460019092019101613df9565b5084821015613e3657868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b6001600160401b03831115613e5c57613e5c613a15565b613e7083613e6a8354613bc8565b83613d42565b5f601f841160018114613ea1575f8515613e8a5750838201355b5f19600387901b1c1916600186901b1783556105a8565b5f83815260208120601f198716915b82811015613ed05786850135825560209485019460019092019101613eb0565b5086821015613eec575f1960f88860031b161c19848701351681555b505060018560011b0183555050505050565b606081525f613f11606083018789613c14565b8281036020840152613f24818688613c14565b90508281036040840152611d4c81856139d5565b5f81518060208401855e5f93019283525090919050565b5f610cac8284613f38565b5f60208284031215613f6a575f5ffd5b5051919050565b8181035f831280158383131683831282161715613f9057613f90613cf4565b5092915050565b8082018281125f831280158216821582161715613fb657613fb6613cf4565b505092915050565b5f82613fcc57613fcc613ccd565b500490565b80820281158282048414176103a1576103a1613cf4565b6001600160f81b0319831681525f613ca26001830184613f38565b60ff81811683821601908111156103a1576103a1613cf4565b5f6140278287613f38565b6001600160f81b031986168152611fe46140446001830187613f38565b85613f3856fe7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f0f7f0a1115141a1e07057f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f1d7f180d190908177f12161f1b137f010003100b1c0c0e0604027f7f7f7f7fa2646970667358221220a331d45cc70d5543785c1c1df5c4917b6d609b3712e8959bac6ac89e13a4579d64736f6c634300081b0033",
}

// UserActivatorABI is the input ABI used to generate the binding from.
// Deprecated: Use UserActivatorMetaData.ABI instead.
var UserActivatorABI = UserActivatorMetaData.ABI

// UserActivatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use UserActivatorMetaData.Bin instead.
var UserActivatorBin = UserActivatorMetaData.Bin

// DeployUserActivator deploys a new Ethereum contract, binding an instance of UserActivator to it.
func DeployUserActivator(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *UserActivator, error) {
	parsed, err := UserActivatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(UserActivatorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UserActivator{UserActivatorCaller: UserActivatorCaller{contract: contract}, UserActivatorTransactor: UserActivatorTransactor{contract: contract}, UserActivatorFilterer: UserActivatorFilterer{contract: contract}}, nil
}

// UserActivator is an auto generated Go binding around an Ethereum contract.
type UserActivator struct {
	UserActivatorCaller     // Read-only binding to the contract
	UserActivatorTransactor // Write-only binding to the contract
	UserActivatorFilterer   // Log filterer for contract events
}

// UserActivatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type UserActivatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserActivatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UserActivatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserActivatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UserActivatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserActivatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UserActivatorSession struct {
	Contract     *UserActivator    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// UserActivatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UserActivatorCallerSession struct {
	Contract *UserActivatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// UserActivatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UserActivatorTransactorSession struct {
	Contract     *UserActivatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// UserActivatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type UserActivatorRaw struct {
	Contract *UserActivator // Generic contract binding to access the raw methods on
}

// UserActivatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UserActivatorCallerRaw struct {
	Contract *UserActivatorCaller // Generic read-only contract binding to access the raw methods on
}

// UserActivatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UserActivatorTransactorRaw struct {
	Contract *UserActivatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUserActivator creates a new instance of UserActivator, bound to a specific deployed contract.
func NewUserActivator(address common.Address, backend bind.ContractBackend) (*UserActivator, error) {
	contract, err := bindUserActivator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UserActivator{UserActivatorCaller: UserActivatorCaller{contract: contract}, UserActivatorTransactor: UserActivatorTransactor{contract: contract}, UserActivatorFilterer: UserActivatorFilterer{contract: contract}}, nil
}

// NewUserActivatorCaller creates a new read-only instance of UserActivator, bound to a specific deployed contract.
func NewUserActivatorCaller(address common.Address, caller bind.ContractCaller) (*UserActivatorCaller, error) {
	contract, err := bindUserActivator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UserActivatorCaller{contract: contract}, nil
}

// NewUserActivatorTransactor creates a new write-only instance of UserActivator, bound to a specific deployed contract.
func NewUserActivatorTransactor(address common.Address, transactor bind.ContractTransactor) (*UserActivatorTransactor, error) {
	contract, err := bindUserActivator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UserActivatorTransactor{contract: contract}, nil
}

// NewUserActivatorFilterer creates a new log filterer instance of UserActivator, bound to a specific deployed contract.
func NewUserActivatorFilterer(address common.Address, filterer bind.ContractFilterer) (*UserActivatorFilterer, error) {
	contract, err := bindUserActivator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UserActivatorFilterer{contract: contract}, nil
}

// bindUserActivator binds a generic wrapper to an already deployed contract.
func bindUserActivator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := UserActivatorMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UserActivator *UserActivatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UserActivator.Contract.UserActivatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UserActivator *UserActivatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserActivator.Contract.UserActivatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UserActivator *UserActivatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UserActivator.Contract.UserActivatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UserActivator *UserActivatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UserActivator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UserActivator *UserActivatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserActivator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UserActivator *UserActivatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UserActivator.Contract.contract.Transact(opts, method, params...)
}

// ActivatedAddresses is a free data retrieval call binding the contract method 0x0b68f450.
//
// Solidity: function activatedAddresses(address ) view returns(bool)
func (_UserActivator *UserActivatorCaller) ActivatedAddresses(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "activatedAddresses", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ActivatedAddresses is a free data retrieval call binding the contract method 0x0b68f450.
//
// Solidity: function activatedAddresses(address ) view returns(bool)
func (_UserActivator *UserActivatorSession) ActivatedAddresses(arg0 common.Address) (bool, error) {
	return _UserActivator.Contract.ActivatedAddresses(&_UserActivator.CallOpts, arg0)
}

// ActivatedAddresses is a free data retrieval call binding the contract method 0x0b68f450.
//
// Solidity: function activatedAddresses(address ) view returns(bool)
func (_UserActivator *UserActivatorCallerSession) ActivatedAddresses(arg0 common.Address) (bool, error) {
	return _UserActivator.Contract.ActivatedAddresses(&_UserActivator.CallOpts, arg0)
}

// BtcAddr1 is a free data retrieval call binding the contract method 0xad427415.
//
// Solidity: function btcAddr1() view returns(string)
func (_UserActivator *UserActivatorCaller) BtcAddr1(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "btcAddr1")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// BtcAddr1 is a free data retrieval call binding the contract method 0xad427415.
//
// Solidity: function btcAddr1() view returns(string)
func (_UserActivator *UserActivatorSession) BtcAddr1() (string, error) {
	return _UserActivator.Contract.BtcAddr1(&_UserActivator.CallOpts)
}

// BtcAddr1 is a free data retrieval call binding the contract method 0xad427415.
//
// Solidity: function btcAddr1() view returns(string)
func (_UserActivator *UserActivatorCallerSession) BtcAddr1() (string, error) {
	return _UserActivator.Contract.BtcAddr1(&_UserActivator.CallOpts)
}

// BtcAddr2 is a free data retrieval call binding the contract method 0x2fbb7ab6.
//
// Solidity: function btcAddr2() view returns(string)
func (_UserActivator *UserActivatorCaller) BtcAddr2(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "btcAddr2")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// BtcAddr2 is a free data retrieval call binding the contract method 0x2fbb7ab6.
//
// Solidity: function btcAddr2() view returns(string)
func (_UserActivator *UserActivatorSession) BtcAddr2() (string, error) {
	return _UserActivator.Contract.BtcAddr2(&_UserActivator.CallOpts)
}

// BtcAddr2 is a free data retrieval call binding the contract method 0x2fbb7ab6.
//
// Solidity: function btcAddr2() view returns(string)
func (_UserActivator *UserActivatorCallerSession) BtcAddr2() (string, error) {
	return _UserActivator.Contract.BtcAddr2(&_UserActivator.CallOpts)
}

// GetBTCDepositAddress is a free data retrieval call binding the contract method 0xa0ddd62f.
//
// Solidity: function getBTCDepositAddress(address ethAddr) view returns(string)
func (_UserActivator *UserActivatorCaller) GetBTCDepositAddress(opts *bind.CallOpts, ethAddr common.Address) (string, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "getBTCDepositAddress", ethAddr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetBTCDepositAddress is a free data retrieval call binding the contract method 0xa0ddd62f.
//
// Solidity: function getBTCDepositAddress(address ethAddr) view returns(string)
func (_UserActivator *UserActivatorSession) GetBTCDepositAddress(ethAddr common.Address) (string, error) {
	return _UserActivator.Contract.GetBTCDepositAddress(&_UserActivator.CallOpts, ethAddr)
}

// GetBTCDepositAddress is a free data retrieval call binding the contract method 0xa0ddd62f.
//
// Solidity: function getBTCDepositAddress(address ethAddr) view returns(string)
func (_UserActivator *UserActivatorCallerSession) GetBTCDepositAddress(ethAddr common.Address) (string, error) {
	return _UserActivator.Contract.GetBTCDepositAddress(&_UserActivator.CallOpts, ethAddr)
}

// NetworkHrp is a free data retrieval call binding the contract method 0x4edac789.
//
// Solidity: function networkHrp() view returns(string)
func (_UserActivator *UserActivatorCaller) NetworkHrp(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "networkHrp")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NetworkHrp is a free data retrieval call binding the contract method 0x4edac789.
//
// Solidity: function networkHrp() view returns(string)
func (_UserActivator *UserActivatorSession) NetworkHrp() (string, error) {
	return _UserActivator.Contract.NetworkHrp(&_UserActivator.CallOpts)
}

// NetworkHrp is a free data retrieval call binding the contract method 0x4edac789.
//
// Solidity: function networkHrp() view returns(string)
func (_UserActivator *UserActivatorCallerSession) NetworkHrp() (string, error) {
	return _UserActivator.Contract.NetworkHrp(&_UserActivator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_UserActivator *UserActivatorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_UserActivator *UserActivatorSession) Owner() (common.Address, error) {
	return _UserActivator.Contract.Owner(&_UserActivator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_UserActivator *UserActivatorCallerSession) Owner() (common.Address, error) {
	return _UserActivator.Contract.Owner(&_UserActivator.CallOpts)
}

// P1x is a free data retrieval call binding the contract method 0xb1185919.
//
// Solidity: function p1x() view returns(uint256)
func (_UserActivator *UserActivatorCaller) P1x(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "p1x")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// P1x is a free data retrieval call binding the contract method 0xb1185919.
//
// Solidity: function p1x() view returns(uint256)
func (_UserActivator *UserActivatorSession) P1x() (*big.Int, error) {
	return _UserActivator.Contract.P1x(&_UserActivator.CallOpts)
}

// P1x is a free data retrieval call binding the contract method 0xb1185919.
//
// Solidity: function p1x() view returns(uint256)
func (_UserActivator *UserActivatorCallerSession) P1x() (*big.Int, error) {
	return _UserActivator.Contract.P1x(&_UserActivator.CallOpts)
}

// P1y is a free data retrieval call binding the contract method 0xad38cb0b.
//
// Solidity: function p1y() view returns(uint256)
func (_UserActivator *UserActivatorCaller) P1y(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "p1y")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// P1y is a free data retrieval call binding the contract method 0xad38cb0b.
//
// Solidity: function p1y() view returns(uint256)
func (_UserActivator *UserActivatorSession) P1y() (*big.Int, error) {
	return _UserActivator.Contract.P1y(&_UserActivator.CallOpts)
}

// P1y is a free data retrieval call binding the contract method 0xad38cb0b.
//
// Solidity: function p1y() view returns(uint256)
func (_UserActivator *UserActivatorCallerSession) P1y() (*big.Int, error) {
	return _UserActivator.Contract.P1y(&_UserActivator.CallOpts)
}

// P2x is a free data retrieval call binding the contract method 0xcca03acb.
//
// Solidity: function p2x() view returns(uint256)
func (_UserActivator *UserActivatorCaller) P2x(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "p2x")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// P2x is a free data retrieval call binding the contract method 0xcca03acb.
//
// Solidity: function p2x() view returns(uint256)
func (_UserActivator *UserActivatorSession) P2x() (*big.Int, error) {
	return _UserActivator.Contract.P2x(&_UserActivator.CallOpts)
}

// P2x is a free data retrieval call binding the contract method 0xcca03acb.
//
// Solidity: function p2x() view returns(uint256)
func (_UserActivator *UserActivatorCallerSession) P2x() (*big.Int, error) {
	return _UserActivator.Contract.P2x(&_UserActivator.CallOpts)
}

// P2y is a free data retrieval call binding the contract method 0xa62ef073.
//
// Solidity: function p2y() view returns(uint256)
func (_UserActivator *UserActivatorCaller) P2y(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "p2y")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// P2y is a free data retrieval call binding the contract method 0xa62ef073.
//
// Solidity: function p2y() view returns(uint256)
func (_UserActivator *UserActivatorSession) P2y() (*big.Int, error) {
	return _UserActivator.Contract.P2y(&_UserActivator.CallOpts)
}

// P2y is a free data retrieval call binding the contract method 0xa62ef073.
//
// Solidity: function p2y() view returns(uint256)
func (_UserActivator *UserActivatorCallerSession) P2y() (*big.Int, error) {
	return _UserActivator.Contract.P2y(&_UserActivator.CallOpts)
}

// ParseBTCTaprootAddress is a free data retrieval call binding the contract method 0xc1d643b1.
//
// Solidity: function parseBTCTaprootAddress(string _hrp, string _bitcoinAddress) pure returns(uint256, uint256)
func (_UserActivator *UserActivatorCaller) ParseBTCTaprootAddress(opts *bind.CallOpts, _hrp string, _bitcoinAddress string) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "parseBTCTaprootAddress", _hrp, _bitcoinAddress)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// ParseBTCTaprootAddress is a free data retrieval call binding the contract method 0xc1d643b1.
//
// Solidity: function parseBTCTaprootAddress(string _hrp, string _bitcoinAddress) pure returns(uint256, uint256)
func (_UserActivator *UserActivatorSession) ParseBTCTaprootAddress(_hrp string, _bitcoinAddress string) (*big.Int, *big.Int, error) {
	return _UserActivator.Contract.ParseBTCTaprootAddress(&_UserActivator.CallOpts, _hrp, _bitcoinAddress)
}

// ParseBTCTaprootAddress is a free data retrieval call binding the contract method 0xc1d643b1.
//
// Solidity: function parseBTCTaprootAddress(string _hrp, string _bitcoinAddress) pure returns(uint256, uint256)
func (_UserActivator *UserActivatorCallerSession) ParseBTCTaprootAddress(_hrp string, _bitcoinAddress string) (*big.Int, *big.Int, error) {
	return _UserActivator.Contract.ParseBTCTaprootAddress(&_UserActivator.CallOpts, _hrp, _bitcoinAddress)
}

// WasSeedSet is a free data retrieval call binding the contract method 0x9fa4989c.
//
// Solidity: function wasSeedSet() view returns(bool)
func (_UserActivator *UserActivatorCaller) WasSeedSet(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "wasSeedSet")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// WasSeedSet is a free data retrieval call binding the contract method 0x9fa4989c.
//
// Solidity: function wasSeedSet() view returns(bool)
func (_UserActivator *UserActivatorSession) WasSeedSet() (bool, error) {
	return _UserActivator.Contract.WasSeedSet(&_UserActivator.CallOpts)
}

// WasSeedSet is a free data retrieval call binding the contract method 0x9fa4989c.
//
// Solidity: function wasSeedSet() view returns(bool)
func (_UserActivator *UserActivatorCallerSession) WasSeedSet() (bool, error) {
	return _UserActivator.Contract.WasSeedSet(&_UserActivator.CallOpts)
}

// ActivateUser is a paid mutator transaction binding the contract method 0xb4acfe1c.
//
// Solidity: function activateUser(address _userAddress) returns()
func (_UserActivator *UserActivatorTransactor) ActivateUser(opts *bind.TransactOpts, _userAddress common.Address) (*types.Transaction, error) {
	return _UserActivator.contract.Transact(opts, "activateUser", _userAddress)
}

// ActivateUser is a paid mutator transaction binding the contract method 0xb4acfe1c.
//
// Solidity: function activateUser(address _userAddress) returns()
func (_UserActivator *UserActivatorSession) ActivateUser(_userAddress common.Address) (*types.Transaction, error) {
	return _UserActivator.Contract.ActivateUser(&_UserActivator.TransactOpts, _userAddress)
}

// ActivateUser is a paid mutator transaction binding the contract method 0xb4acfe1c.
//
// Solidity: function activateUser(address _userAddress) returns()
func (_UserActivator *UserActivatorTransactorSession) ActivateUser(_userAddress common.Address) (*types.Transaction, error) {
	return _UserActivator.Contract.ActivateUser(&_UserActivator.TransactOpts, _userAddress)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_UserActivator *UserActivatorTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserActivator.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_UserActivator *UserActivatorSession) RenounceOwnership() (*types.Transaction, error) {
	return _UserActivator.Contract.RenounceOwnership(&_UserActivator.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_UserActivator *UserActivatorTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _UserActivator.Contract.RenounceOwnership(&_UserActivator.TransactOpts)
}

// SetSeed is a paid mutator transaction binding the contract method 0xe5451bc8.
//
// Solidity: function setSeed(string _btcAddr1, string _btcAddr2, uint8 _network) returns()
func (_UserActivator *UserActivatorTransactor) SetSeed(opts *bind.TransactOpts, _btcAddr1 string, _btcAddr2 string, _network uint8) (*types.Transaction, error) {
	return _UserActivator.contract.Transact(opts, "setSeed", _btcAddr1, _btcAddr2, _network)
}

// SetSeed is a paid mutator transaction binding the contract method 0xe5451bc8.
//
// Solidity: function setSeed(string _btcAddr1, string _btcAddr2, uint8 _network) returns()
func (_UserActivator *UserActivatorSession) SetSeed(_btcAddr1 string, _btcAddr2 string, _network uint8) (*types.Transaction, error) {
	return _UserActivator.Contract.SetSeed(&_UserActivator.TransactOpts, _btcAddr1, _btcAddr2, _network)
}

// SetSeed is a paid mutator transaction binding the contract method 0xe5451bc8.
//
// Solidity: function setSeed(string _btcAddr1, string _btcAddr2, uint8 _network) returns()
func (_UserActivator *UserActivatorTransactorSession) SetSeed(_btcAddr1 string, _btcAddr2 string, _network uint8) (*types.Transaction, error) {
	return _UserActivator.Contract.SetSeed(&_UserActivator.TransactOpts, _btcAddr1, _btcAddr2, _network)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_UserActivator *UserActivatorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _UserActivator.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_UserActivator *UserActivatorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _UserActivator.Contract.TransferOwnership(&_UserActivator.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_UserActivator *UserActivatorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _UserActivator.Contract.TransferOwnership(&_UserActivator.TransactOpts, newOwner)
}

// UserActivatorOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the UserActivator contract.
type UserActivatorOwnershipTransferredIterator struct {
	Event *UserActivatorOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UserActivatorOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UserActivatorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UserActivatorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UserActivatorOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UserActivatorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UserActivatorOwnershipTransferred represents a OwnershipTransferred event raised by the UserActivator contract.
type UserActivatorOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_UserActivator *UserActivatorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*UserActivatorOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _UserActivator.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &UserActivatorOwnershipTransferredIterator{contract: _UserActivator.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_UserActivator *UserActivatorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *UserActivatorOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _UserActivator.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UserActivatorOwnershipTransferred)
				if err := _UserActivator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_UserActivator *UserActivatorFilterer) ParseOwnershipTransferred(log types.Log) (*UserActivatorOwnershipTransferred, error) {
	event := new(UserActivatorOwnershipTransferred)
	if err := _UserActivator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UserActivatorSeedChangedIterator is returned from FilterSeedChanged and is used to iterate over the raw logs and unpacked data for SeedChanged events raised by the UserActivator contract.
type UserActivatorSeedChangedIterator struct {
	Event *UserActivatorSeedChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UserActivatorSeedChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UserActivatorSeedChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UserActivatorSeedChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UserActivatorSeedChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UserActivatorSeedChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UserActivatorSeedChanged represents a SeedChanged event raised by the UserActivator contract.
type UserActivatorSeedChanged struct {
	BtcAddr1 string
	BtcAddr2 string
	Hrp      string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSeedChanged is a free log retrieval operation binding the contract event 0x123278a680a966680eaa7dc7f03997fbccbc36d6666b5b6f3388eb15fccf001f.
//
// Solidity: event SeedChanged(string btcAddr1, string btcAddr2, string hrp)
func (_UserActivator *UserActivatorFilterer) FilterSeedChanged(opts *bind.FilterOpts) (*UserActivatorSeedChangedIterator, error) {

	logs, sub, err := _UserActivator.contract.FilterLogs(opts, "SeedChanged")
	if err != nil {
		return nil, err
	}
	return &UserActivatorSeedChangedIterator{contract: _UserActivator.contract, event: "SeedChanged", logs: logs, sub: sub}, nil
}

// WatchSeedChanged is a free log subscription operation binding the contract event 0x123278a680a966680eaa7dc7f03997fbccbc36d6666b5b6f3388eb15fccf001f.
//
// Solidity: event SeedChanged(string btcAddr1, string btcAddr2, string hrp)
func (_UserActivator *UserActivatorFilterer) WatchSeedChanged(opts *bind.WatchOpts, sink chan<- *UserActivatorSeedChanged) (event.Subscription, error) {

	logs, sub, err := _UserActivator.contract.WatchLogs(opts, "SeedChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UserActivatorSeedChanged)
				if err := _UserActivator.contract.UnpackLog(event, "SeedChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSeedChanged is a log parse operation binding the contract event 0x123278a680a966680eaa7dc7f03997fbccbc36d6666b5b6f3388eb15fccf001f.
//
// Solidity: event SeedChanged(string btcAddr1, string btcAddr2, string hrp)
func (_UserActivator *UserActivatorFilterer) ParseSeedChanged(log types.Log) (*UserActivatorSeedChanged, error) {
	event := new(UserActivatorSeedChanged)
	if err := _UserActivator.contract.UnpackLog(event, "SeedChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UserActivatorUserAddressActivatedIterator is returned from FilterUserAddressActivated and is used to iterate over the raw logs and unpacked data for UserAddressActivated events raised by the UserActivator contract.
type UserActivatorUserAddressActivatedIterator struct {
	Event *UserActivatorUserAddressActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UserActivatorUserAddressActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UserActivatorUserAddressActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UserActivatorUserAddressActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UserActivatorUserAddressActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UserActivatorUserAddressActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UserActivatorUserAddressActivated represents a UserAddressActivated event raised by the UserActivator contract.
type UserActivatorUserAddressActivated struct {
	UserETHAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserAddressActivated is a free log retrieval operation binding the contract event 0xa80bfdc57bf882738a124b225520a84f1796f14d85d45b99687f5577ebe22512.
//
// Solidity: event UserAddressActivated(address userETHAddress)
func (_UserActivator *UserActivatorFilterer) FilterUserAddressActivated(opts *bind.FilterOpts) (*UserActivatorUserAddressActivatedIterator, error) {

	logs, sub, err := _UserActivator.contract.FilterLogs(opts, "UserAddressActivated")
	if err != nil {
		return nil, err
	}
	return &UserActivatorUserAddressActivatedIterator{contract: _UserActivator.contract, event: "UserAddressActivated", logs: logs, sub: sub}, nil
}

// WatchUserAddressActivated is a free log subscription operation binding the contract event 0xa80bfdc57bf882738a124b225520a84f1796f14d85d45b99687f5577ebe22512.
//
// Solidity: event UserAddressActivated(address userETHAddress)
func (_UserActivator *UserActivatorFilterer) WatchUserAddressActivated(opts *bind.WatchOpts, sink chan<- *UserActivatorUserAddressActivated) (event.Subscription, error) {

	logs, sub, err := _UserActivator.contract.WatchLogs(opts, "UserAddressActivated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UserActivatorUserAddressActivated)
				if err := _UserActivator.contract.UnpackLog(event, "UserAddressActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserAddressActivated is a log parse operation binding the contract event 0xa80bfdc57bf882738a124b225520a84f1796f14d85d45b99687f5577ebe22512.
//
// Solidity: event UserAddressActivated(address userETHAddress)
func (_UserActivator *UserActivatorFilterer) ParseUserAddressActivated(log types.Log) (*UserActivatorUserAddressActivated, error) {
	event := new(UserActivatorUserAddressActivated)
	if err := _UserActivator.contract.UnpackLog(event, "UserAddressActivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
