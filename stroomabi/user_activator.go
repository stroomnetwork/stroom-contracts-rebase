// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package stroomabi

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// UserActivatorMetaData contains all meta data concerning the UserActivator contract.
var UserActivatorMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"activateUser\",\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"activatedAddresses\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"btcAddr1\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"btcAddr2\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getBTCDepositAddress\",\"inputs\":[{\"name\":\"ethAddr\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"networkHrp\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"p1x\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"p1y\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"p2x\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"p2y\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"parseBTCTaprootAddress\",\"inputs\":[{\"name\":\"_hrp\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"_bitcoinAddress\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setSeed\",\"inputs\":[{\"name\":\"_btcAddr1\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"_btcAddr2\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"_network\",\"type\":\"uint8\",\"internalType\":\"enumBitcoinNetworkEncoder.Network\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"wasSeedSet\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SeedChanged\",\"inputs\":[{\"name\":\"btcAddr1\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"btcAddr2\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"hrp\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"UserAddressActivated\",\"inputs\":[{\"name\":\"userETHAddress\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"CannotParseBtcAddress\",\"inputs\":[{\"name\":\"btcAddress\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"hrp\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"err\",\"type\":\"uint8\",\"internalType\":\"enumBech32m.DecodeError\"}]},{\"type\":\"error\",\"name\":\"EncodingIsUnknown\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OwnableInvalidOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OwnableUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"SeedWasNotSetYet\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"UnsupportedBtcAddress\",\"inputs\":[{\"name\":\"btcAddress\",\"type\":\"string\",\"internalType\":\"string\"}]}]",
	Bin: "0x60808060405234607d5760ff1960005416600055331560675760088054336001600160a01b0319821681179092556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a361394490816100838239f35b631e4fbdf760e01b600052600060045260246000fd5b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c9081630b68f4501461157f575080632fbb7ab6146114d85780634edac78914611443578063715018a6146113e65780638da5cb5b146113bd5780639fa4989c1461139b578063a0ddd62f1461090d578063a62ef073146108ef578063ad38cb0b146108d1578063ad427415146107e9578063b1185919146107cb578063b4acfe1c14610707578063c1d643b11461068d578063cca03acb1461066f578063e5451bc8146101635763f2fde38b146100d157600080fd5b34610160576020366003190112610160576004356001600160a01b0381169081900361015e576100ff6118b7565b801561014a57600880546001600160a01b0319811683179091556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b631e4fbdf760e01b82526004829052602482fd5b505b80fd5b5034610160576060366003190112610160576004356001600160401b03811161015e576101949036906004016116e9565b91906024356001600160401b03811161066b576101b59036906004016116e9565b93906044356004811015610667576101d4906101cf6118b7565b61298b565b9485516001600160401b038111610653576101f06003546115be565b601f8111610600575b506020601f8211600114610590579080610228928891610585575b508160011b916000199060031b1c19161790565b6003555b610237838588611737565b600555600455610248818388611737565b6007556006556001600160401b03831161047f576102676001546115be565b601f8111610520575b508483601f811160011461049e578061029d92889161049357508160011b916000199060031b1c19161790565b6001555b6001600160401b03811161047f576102ba6002546115be565b601f811161041a575b5084601f821160011461036e5761035d928261031b81899a9561034f957f123278a680a966680eaa7dc7f03997fbccbc36d6666b5b6f3388eb15fccf001f9b9161036357508160011b916000199060031b1c19161790565b6002555b600160ff198a5416178955610341604051978897606089526060890191611716565b918683036020880152611716565b90838203604085015261166d565b0390a180f35b905084013538610214565b600286527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90601f198316875b81811061040257509261034f9261035d9592827f123278a680a966680eaa7dc7f03997fbccbc36d6666b5b6f3388eb15fccf001f9a9b96106103e8575b5050600181811b0160025561031f565b830135600019600384901b60f8161c1916905538806103d8565b9192602060018192868901358155019401920161039b565b60026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace601f830160051c81019160208410610475575b601f0160051c01905b81811061046957506102c3565b6000815560010161045c565b9091508190610453565b634e487b7160e01b85526041600452602485fd5b905086013538610214565b50600186527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69084601f198116885b8181106105055750106104eb575b5050600183811b016001556102a1565b850135600019600386901b60f8161c1916905538806104db565b888401358555600190940193602093840193889350016104cd565b60016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6601f850160051c8101916020861061057b575b601f0160051c01905b81811061056f5750610270565b60008155600101610562565b9091508190610559565b905088015138610214565b600387526000805160206138ef83398151915290601f198316885b8a8282106105e857505090836001949392106105cf575b5050811b0160035561022c565b89015160001960f88460031b161c1916905538806105c2565b600184956020939584930151815501940192016105ab565b60036000526000805160206138ef833981519152601f830160051c81019160208410610649575b601f0160051c01905b81811061063d57506101f9565b60008155600101610630565b9091508190610627565b634e487b7160e01b86526041600452602486fd5b8480fd5b8280fd5b50346101605780600319360112610160576020600654604051908152f35b5034610160576040366003190112610160576004356001600160401b03811161015e573660238201121561015e576106cf9036906024816004013591016116ad565b90602435906001600160401b0382116101605760406106fb846106f536600487016116e9565b91611737565b82519182526020820152f35b5034610160576020366003190112610160576004356001600160a01b0381169081900361015e57808252600960205260ff604083205416610786576020817fa80bfdc57bf882738a124b225520a84f1796f14d85d45b99687f5577ebe225129284526009825260408420600160ff19825416179055604051908152a180f35b60405162461bcd60e51b815260206004820152601960248201527f5573657220697320616c726561647920616374697661746564000000000000006044820152606490fd5b50346101605780600319360112610160576020600454604051908152f35b50346101605780600319360112610160576040516001546000908161080d826115be565b80855291600181169081156108aa575060011461084d575b6108498461083581860382611629565b60405191829160208352602083019061166d565b0390f35b600181527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6939250905b8082106108905750909150810160200161083582610825565b919260018160209254838588010152019101909291610877565b60ff191660208087019190915292151560051b850190920192506108359150839050610825565b50346101605780600319360112610160576020600554604051908152f35b50346101605780600319360112610160576020600754604051908152f35b5034610160576020366003190112610160576004356001600160a01b038116810361015e5760ff8254161561138c57600454906005549060065490600754604051938695856003549761095f896115be565b80835260208301998a600182169182600014611371575050600114611328575b506109bc6109ca946109bc946109a06109d29a9998956109c295038c611629565b6109b66109ae898484612a79565b98868b612a79565b976132aa565b916133ee565b9590946132aa565b929091612f70565b9290836001808216146112f5575b50602085610a5d604051838101907fe80fe1639c9ca050e3af1b39c143c63e429cbceb15d940fbb5c5a1f4af57c5e982527fe80fe1639c9ca050e3af1b39c143c63e429cbceb15d940fbb5c5a1f4af57c5e9604082015285606082015260608152610a4c608082611629565b60405192839283925192839161164a565b8101039060025afa156112ea57610a748551613331565b95909186151587816112d9575b50806112d1575b1561129b5787928760016401000003d0198b9a5b61121457505050610ad3959697506401000003d01984800991826401000003d0199109936401000003d01992839109900992612f70565b509060405191602083015260208252610aed604083611629565b8151849060058082049183919006600181036111d55750509050600290815b8160031b918015918184046008148317159283610f1c57610b35610b308787611930565b6118ed565b978a5b848110610f75575086610e7b575b5050505050505060405193610b876021866020810195600160f81b8752610b76815180926020868601910161164a565b81010301601f198101875286611629565b50632bc830a3610b9684613124565b610ba38151875190611930565b60068101809111610d7d57610bb790612d9e565b90805160005b818110610e4057505086519060005b828110610dfb57505050610bdf906131de565b1891604094855192610bf18785611629565b600684526020840194601f198801368737845115610de55760df81901b601f60f81b1660001a8653845160011015610de55760e481901b601f60f81b1660001a6021860153845160021015610de55760e981901b601f60f81b1660001a6022860153845160031015610de55760ee81901b601f60f81b1660001a6023860153845160041015610de55760f381901b601f60f81b1660001a6024860153845160051015610de55760f81b601f60f81b1660001a6025850153815160005b818110610d9357505060005b60068110610d3657610849610cec89610d248a60018b8b610d1460208d8d610d058e8b519c8d9a518092878d019061164a565b890191603160f81b85840152518093602184019061164a565b0101915180938584019061164a565b010103601f198101845283611629565b5191829160208352602083019061166d565b610d3e6130e9565b6001600160f81b031990610d6090610d56848961191f565b5160f81c9061191f565b511660001a610d6f828761191f565b536001810180911115610cb9575b634e487b7160e01b600052601160045260246000fd5b610d9b6130e9565b6001600160f81b031990610db390610d56848861191f565b511660001a610dc2828661191f565b536001810180911115610cad57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b610e05818a61191f565b5160f81c610e1d610e17845184611930565b86612dc6565b526001810180911115610bcc57634e487b7160e01b600052601160045260246000fd5b610e4a818461191f565b5160f81c610e588286612dc6565b526001810180911115610bbd57634e487b7160e01b600052601160045260246000fd5b8a93815192600582029182046005141715610f615791905b818310610f30575050501b91875b848110610eaf578080610b46565b610eb981866118e0565b6000198101908111610f1c5780600502906005820403610f1c5783610f1c57610efb610ee58385611930565b9186901c60f81b601f60f81b168b1a918961191f565b536001810180911115610ea157634e487b7160e01b89526011600452602489fd5b634e487b7160e01b8a52601160045260248afd5b909193610f4e90610f41868461191f565b5160f81c9060081b611930565b9360018101809111610f61579190610e93565b634e487b7160e01b8c52601160045260248cfd5b600581028115908281046005148217156111c1578260031b9183830460081417156111c157610fa4818561191f565b5160d81c64ff0000000016600182018083116111ac57610fc4908661191f565b5160e01c63ff000000169064ff0000000063ff000000610fe693169116611930565b600282018083116111ac57610ffb908661191f565b5160e81c62ff0000169062ff0000611014921690611930565b600382018083116111ac57611029908661191f565b5160f01c61ff00169061ff00611040921690611930565b9060048101809111611198579061105a611064928661191f565b5160f81c90611930565b600782018083116111985760f882901b601f60f81b168f1a90611087908e61191f565b53600682018083116111985760f382901b601f60f81b168f1a906110ab908e61191f565b53600582018083116111985760ee82901b601f60f81b168f1a906110cf908e61191f565b53600482018083116111985760e982901b601f60f81b168f1a906110f3908e61191f565b53600382018083116111985760e482901b601f60f81b168f1a90611117908e61191f565b53600282018083116111985760df82901b601f60f81b168f1a9061113b908e61191f565b536001820180831161119857611177918f916111648f91601f60f81b8460da1b16851a9261191f565b5360d51b601f60f81b16901a918c61191f565b536001810180911115610b3857634e487b7160e01b8c52601160045260248cfd5b634e487b7160e01b8f52601160045260248ffd5b50634e487b7160e01b8f52601160045260248ffd5b634e487b7160e01b8e52601160045260248efd5b600281036111eb5750509050600490815b610b0c565b6003810361120157505090506005906001610b0c565b6004036111e65750600791506003610b0c565b61122183829894986121da565b91809b611287576401000003d0199083096401000003d01903926401000003d0198411611273579061126461126a928e956401000003d01991089c9880946121fa565b906118e0565b91999082610a9c565b634e487b7160e01b8d52601160045260248dfd5b634e487b7160e01b8d52601260045260248dfd5b60405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210373ab6b132b960911b6044820152606490fd5b506001610a88565b6401000003d0191415905038610a81565b6040513d86823e3d90fd5b9093506401000003d019036401000003d01981116113145792386109e0565b634e487b7160e01b85526011600452602485fd5b60038b528a91506000805160206138ef8339815191525b81831061135557505081016020016109bc61097f565b6020919350806001915483858d0101520191019091889261133f565b60ff1916905250151560051b820160200190506109bc61097f565b63da4bbb2960e01b8252600482fd5b503461016057806003193601126101605760ff60209154166040519015158152f35b50346101605780600319360112610160576008546040516001600160a01b039091168152602090f35b50346101605780600319360112610160576113ff6118b7565b600880546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5034610160578060031936011261016057604051908060035490611466826115be565b80855291600181169081156108aa575060011461148d576108498461083581860382611629565b600381526000805160206138ef833981519152939250905b8082106114be5750909150810160200161083582610825565b9192600181602092548385880101520191019092916114a5565b50346101605780600319360112610160576040519080600254906114fb826115be565b80855291600181169081156108aa5750600114611522576108498461083581860382611629565b600281527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace939250905b8082106115655750909150810160200161083582610825565b91926001816020925483858801015201910190929161154c565b90503461015e57602036600319011261015e576004356001600160a01b0381169081900361066b5760408360ff92602095526009855220541615158152f35b90600182811c921680156115ee575b60208310146115d857565b634e487b7160e01b600052602260045260246000fd5b91607f16916115cd565b608081019081106001600160401b0382111761161357604052565b634e487b7160e01b600052604160045260246000fd5b90601f801991011681019081106001600160401b0382111761161357604052565b60005b83811061165d5750506000910152565b818101518382015260200161164d565b906020916116868151809281855285808601910161164a565b601f01601f1916010190565b6001600160401b03811161161357601f01601f191660200190565b9291926116b982611692565b916116c76040519384611629565b8294818452818301116116e4578281602093846000960137010152565b600080fd5b9181601f840112156116e4578235916001600160401b0383116116e457602083818601950101116116e457565b908060209392818452848401376000828201840152601f01601f1916010190565b92919060009161175161174b3683856116ad565b8661193d565b909660138210156118a3578161185b57505060ff1660011480159061184f575b61180157602085519501519460208110611839575b5084158015611829575b61180157506117bf91506401000003d01990508060078160008709086401000003d01980868009860908612ec1565b60028101808211610d7d576000906001166117d8575090565b6401000003d0199182039182116117ed575090565b634e487b7160e01b81526011600452602490fd5b61182560405192839263198b15b960e31b8452602060048501526024840191611716565b0390fd5b506401000003d019851015611790565b6000959195199060200360031b1b169338611786565b50602085511415611771565b8592506118989061188660405196879663356b2f0d60e01b8852606060048901526064880191611716565b8581036003190160248701529061166d565b915060448301520390fd5b634e487b7160e01b86526021600452602486fd5b6008546001600160a01b031633036118cb57565b63118cdaa760e01b6000523360045260246000fd5b91908203918211610d7d57565b906118f782611692565b6119046040519182611629565b8281528092611915601f1991611692565b0190602036910137565b908151811015610de5570160200190565b91908201809211610d7d57565b919061194890611c7f565b6013819692969493941015611a7c5780611b7057509061196791612158565b15611c4357805115611c1957805115610de55760208101906010825160f81c11611bee5780516000198101908111610d7d576119a2906118ed565b805160005b818110611b9d5750506119b99061220d565b6013819692961015611a7c5780611b7057506002855110611b43576028855111611b1657815115610de557825160f81c1580611b0a575b80611afe575b611ad157815115610de557825160f81c1580611abf575b611a9257815115610de557825160f81c15159081611a67575b50611a3c575115610de5575160f81c9190600090565b505060405191506020611a4f8184611629565b60008352601f19810190369084013760009190601290565b90506003811015611a7c576001141538611a26565b634e487b7160e01b600052602160045260246000fd5b5050604051925060209050611aa78184611629565b60008352601f19810190369084013760009190601190565b506003811015611a7c57801515611a0d565b5050604051925060209050611ae68184611629565b60008352601f19810190369084013760009190601090565b506020855114156119f6565b506014855114156119f0565b5050604051925060209050611b2b8184611629565b60008352601f19810190369084013760009190600e90565b5050604051925060209050611b588184611629565b60008352601f19810190369084013760009190600d90565b93945050505060209160405192611b878185611629565b60008452601f1981019036908501376000929190565b60018101808211610d7d576001600160f81b031990611bbc908661191f565b511660001a611bcb828561191f565b5360018101809111156119a757634e487b7160e01b600052601160045260246000fd5b505060405191506020611c018184611629565b60008352601f19810190369084013760009190600f90565b5060405191506020611c2b8184611629565b60008352601f19810190369084013760009190600c90565b5060405191506020611c558184611629565b60008352601f19810190369084013760009190600b90565b906000198201918213600116610d7d57565b605a81511161211757611c9181612acd565b156120d657611c9f81612b38565b61209557611cad81516118ed565b9080519060005b828110611fe157505050611cc88151611c6d565b508051600281119081611fbc575b5015611f32576002905b60018212611ef0576000821290811560078481019081128281169015851617610d7d57825112611eac57611d13846118ed565b9360005b818110611e675750600101926001841290811516911617610d7d57611d3e91815191612c99565b6013819492941015611a7c5780611e255750611d5a8383612dda565b916003831015611a7c5760028314611de15783516005198101908111610d7d57611d83906118ed565b9384519060005b828110611d9c57505050929190600090565b6001600160f81b0319611daf828461191f565b511660001a611dbe828961191f565b536001810180911115611d8a57634e487b7160e01b600052601160045260246000fd5b50915050602090604051611df58382611629565b60008152601f19830180368584013760405193611e128186611629565b6000855236908501379190600290600590565b92509050602091604051611e398482611629565b60008152601f19840180368684013760405194611e568187611629565b600086523690860137929160029190565b6001600160f81b0319611e7a828661191f565b511660001a611e89828861191f565b536001810180911115611d1757634e487b7160e01b600052601160045260246000fd5b50505050602090604051611ec08382611629565b60008152601f19830180368584013760405193611edd8186611629565b6000855236908501379190600290600690565b5050602090604051611f028382611629565b60008152601f19830180368584013760405193611f1f8186611629565b6000855236908501379190600290600990565b611f44611f3f8251611c6d565b611c6d565b60008112611f7a57603160f81b6001600160f81b0319611f64838561191f565b511614611f7457611f4490611c6d565b90611ce0565b5050602090604051611f8c8382611629565b60008152601f19830180368584013760405193611fa98186611629565b6000855236908501379190600290600a90565b905060021015610de55760228101516001600160f81b031916603160f81b1438611cd6565b6041611fed828461191f565b5160f81c10158061207d575b1561205557602061200a828461191f565b5160f81c0160ff8111610d7d5760f81b6001600160f81b03191660001a612031828661191f565b535b6001810180911115611cb457634e487b7160e01b600052601160045260246000fd5b6001600160f81b0319612068828461191f565b511660001a612077828661191f565b53612033565b50605a61208a828461191f565b5160f81c1115611ff9565b506020906040516120a68382611629565b60008152601f198301803685840137604051936120c38186611629565b6000855236908501379190600290600490565b506020906040516120e78382611629565b60008152601f198301803685840137604051936121048186611629565b6000855236908501379190600290600390565b506020906040516121288382611629565b60008152601f198301803685840137604051936121458186611629565b6000855236908501379190600290600790565b9190825192815184036121d25760005b8481106121785750600193505050565b6001600160f81b031961218b828461191f565b51166001600160f81b03196121a0838661191f565b5116036121c957600181018091111561216857634e487b7160e01b600052601160045260246000fd5b50600093505050565b506000925050565b81156121e4570490565b634e487b7160e01b600052601260045260246000fd5b81810292918115918404141715610d7d57565b90600091600781511660008251948560031c956007191691861593878404600814851715610d7d5760058802948886046005141715610d7d576001810361227b5750505050505090506020604051906122668183611629565b60008252601f19810190369083013790600290565b600281036126e25750508351600019810191508111610d7d576122a06003918561191f565b5160f81c166126b857611fe0806122b7838661191f565b5160f31c161660018201809211610d7d5761105a6122d5928561191f565b60021c60015b6000956122eb610b308386611930565b94875b8281106124855750505060018103612320575060f81b6001600160f81b031916841a9061231b908361191f565b539190565b6002810361236a575060f081901b6001600160f81b031916851a612344838561191f565b53600182018092116113145760f81b6001600160f81b031916841a9061231b908361191f565b600381036123ea575060e881901b6001600160f81b031916851a61238e838561191f565b53600182018083116123d6576123b060ff60f81b8360f01b16871a918561191f565b53600282018092116113145760f81b6001600160f81b031916841a9061231b908361191f565b634e487b7160e01b86526011600452602486fd5b6004146123f8575b50509190565b60e081901b6001600160f81b031916851a612413838561191f565b53600182018083116123d65761243560ff60f81b8360e81b16871a918561191f565b53600282018083116123d65761245760ff60f81b8360f01b16871a918561191f565b53600382018092116113145760f81b6001600160f81b031916841a9061247d908361191f565b5338806123f2565b8060031b8115908281046008148217156126a457600583029183830460051417156126a4576507f800000000806124bc838761191f565b5160d51c1616600182018083116112735790643fc0000000806124e26124ee948961191f565b5160da1c161690611930565b6002820180831161127357906401fe0000008061250e61251a948961191f565b5160df1c161690611930565b600382018083116112735790630ff0000080612539612545948961191f565b5160e41c161690611930565b600482018083116112735790627f80008061256361256f948961191f565b5160e91c161690611930565b6005820180831161127357906203fc008061258d612599948961191f565b5160ee1c161690611930565b600682018083116112735790611fe0806125b66125c2948961191f565b5160f31c161690611930565b9060078101809111610f61579061105a6125dc928661191f565b60d881901b6001600160f81b0319168b1a6125f7838b61191f565b5360018201808311610f615761261960ff60f81b8360e01b168d1a918b61191f565b5360028201808311610f615761263b60ff60f81b8360e81b168d1a918b61191f565b5360038201808311610f615761265d60ff60f81b8360f01b168d1a918b61191f565b53600482018092116126a45760f81b6001600160f81b0319168a1a90612683908961191f565b5360018101809111156122ee57634e487b7160e01b89526011600452602489fd5b634e487b7160e01b8b52601160045260248bfd5b50505090506020604051906126cd8183611629565b60008252601f19810190369083013790600190565b600381036127025750505050505090506020604051906122668183611629565b600481036127a25750508351600019810191508111610d7d57612727600f918561191f565b5160f81c166126b857627f80008061273f838661191f565b5160e91c16166001820190818311610d7d576203fc008061258d612763948861191f565b6002820190818311610d7d57611fe0806125b6612780948861191f565b60038201809211610d7d5761105a612798928561191f565b60041c60026122db565b600581036128615750508351600019810191508111610d7d576127c76001918561191f565b5160f81c166126b857630ff00000806127e0838661191f565b5160e41c16166001820190818311610d7d57627f800080612563612804948861191f565b6002820190818311610d7d576203fc008061258d612822948861191f565b6003820190818311610d7d57611fe0806125b661283f948861191f565b60048201809211610d7d5761105a612857928561191f565b60011c60036122db565b91929091600681036128855750505050505090506020604051906122668183611629565b600714612893575b506122db565b91505082516000198101908111610d7d576128b06007918561191f565b5160f81c166126b857643fc0000000806128ca838661191f565b5160da1c16166001820190818311610d7d576401fe0000008061250e6128f0948861191f565b6002820190818311610d7d57630ff000008061253961290f948861191f565b6003820190818311610d7d57627f80008061256361292d948861191f565b6004820190818311610d7d576203fc008061258d61294b948861191f565b6005820190818311610d7d57611fe0806125b6612968948861191f565b60068201809211610d7d5761105a612980928561191f565b60031c60043861288d565b6004811015611a7c57806129ba57506040516129a8604082611629565b6002815261626360f01b602082015290565b6000600182036129e65750506040516129d4604082611629565b60028152613a3160f11b602082015290565b5060028103612a1257506040516129fe604082611629565b60048152631898dc9d60e21b602082015290565b600090600303612a3d5750604051612a2b604082611629565b600281526139b160f11b602082015290565b60405162461bcd60e51b8152602060048201526014602482015273556e6b6e6f776e206e6574776f726b207479706560601b6044820152606490fd5b612aae9060009260209460405191868301938452604083015260018060a01b0316606082015260608152610a4c608082611629565b8101039060025afa15612ac15760005190565b6040513d6000823e3d90fd5b9081519160005b838110612ae357506001925050565b6021612aef828461191f565b5160f81c108015612b21575b6121d2576001810180911115612ad457634e487b7160e01b600052601160045260246000fd5b50607e612b2e828461191f565b5160f81c11612afb565b90600080805b84518310156121c9576061612b53848761191f565b5160f81c101580612bd4575b15612b9557506001915b8280612b8e575b612b855760018101809111610d7d5791612b3e565b50600193505050565b5081612b70565b916041612ba2828761191f565b5160f81c101580612bbc575b15612b695760019150612b69565b50605a612bc9828761191f565b5160f81c1115612bae565b50607a612be1848761191f565b5160f81c1115612b5f565b60405190612bfb60a083611629565b608082527f7f1d7f180d190908177f12161f1b137f010003100b1c0c0e0604027f7f7f7f7f6080837f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f60208201527f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f0f7f0a1115141a1e07057f7f7f7f7f7f60408201527f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f60608201520152565b9190612ca8610b3082846118e0565b92815b838110612cbc575050505090600090565b612cc6818361191f565b5160f81c612cd2612bec565b518110801590612d64575b612d39576001600160f81b031990612cfc90612cf7612bec565b61191f565b5116612d16612d0b85846118e0565b9160001a918761191f565b536001810180911115612cab57634e487b7160e01b600052601160045260246000fd5b505050505050602060405190612d4f8183611629565b60008252601f19810190369083013790600890565b50607f60f81b6001600160f81b0319612d7f83612cf7612bec565b511614612cdd565b6001600160401b0381116116135760051b60200190565b90612da882612d87565b612db56040519182611629565b8281528092611915601f1991612d87565b8051821015610de55760209160051b010190565b612de690929192613124565b612dfb612df68251855190611930565b612d9e565b90805160005b818110612e8657505083519360005b858110612e4757505050612e259192506131de565b60018114612e4157632bc830a314612e3c57600290565b600190565b50600090565b612e51818361191f565b5160f81c612e63610e17855184611930565b526001810180911115612e1057634e487b7160e01b600052601160045260246000fd5b612e90818461191f565b5160f81c612e9e8286612dc6565b526001810180911115612e0157634e487b7160e01b600052601160045260246000fd5b8015612e4157600190600160ff1b90815b612edb57505090565b90916401000003d0199063400000f4600160fe1b0384161515830a9082908009096401000003d0199063400000f4600160fe1b03600185901c161515830a9082908009096401000003d0199063400000f4600160fe1b03600285901c161515830a9082908009096401000003d0199063400000f4600160fe1b03600385901c161515830a9082908009099160041c9081612ed2565b90939290918083036130cf57506401000003d019908408612f945750600091508190565b6000906401000003d0199081809181808080808b80099481808080600180099c8180808c88096004099e80099009928009600309088180808b8008612fd990826118e0565b818480090899612fe98b836118e0565b90089009928009600809612ffd90836118e0565b90089460019009600209925b6401000003d0199160008515158487826130c4575b5050806130bb575b1561129b5794859084159081600187835b61306957505050506130555750829081808780098092099509900990565b634e487b7160e01b81526012600452602490fd5b61307784829c94959c6121da565b9180946130a757906112648a6130938161309f958709826118e0565b899608959c80946121fa565b929083613037565b634e487b7160e01b87526012600452602487fd5b50831515613026565b14159050843861301e565b6130e193946401000003d019936134ce565b929190613009565b604051906130f8604083611629565b602082527f71707a7279397838676632747664773073336a6e35346b686365366d7561376c6020830152565b61312f815180611930565b60018101809111610d7d57613143906118ed565b90805160005b81811061316357505061315f600091518361191f565b5390565b600760f81b613172828561191f565b5160051c1660001a613184828661191f565b53601f60f81b613194828561191f565b51166131a1845183611930565b9060018201809211610d7d576131bb9060001a918661191f565b53600181018091111561314957634e487b7160e01b600052601160045260246000fd5b60405160a081018181106001600160401b03821117611613576040908152633b6a57b282526326508e6d6020830152631ea119fa90820152633d4233dd6060820152632a1462b360808201528151600192600092905b828410613242575050505090565b84601995929394951c91633fffffe061325b8784612dc6565b519160051b16189360005b600581101561329b5760018085831c1614613284575b600101613266565b600581901b85015163ffffffff169095189461327c565b50939460010193929150613234565b92909192600190801561332757600094600194869392805b6132cf5750505050929190565b600181166132fb575b9060006132f29260011c9485946401000003d01993613855565b929092936132c2565b936133189084848460009a6132f2969c6401000003d019956136b0565b909890975090949091506132d8565b5050909190600190565b7f483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8917f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179891600190801561332757600094600194869392805b6133965750505050929190565b600181166133c2575b9060006133b99260011c9485946401000003d01993613855565b92909293613389565b936133df9084848460009a6133b9969c6401000003d019956136b0565b9098909750909490915061339f565b91929190600084151585816134bd575b50806134b5575b1561129b579384908160016401000003d019835b6134485750505050506401000003d01984800991826401000003d0199109936401000003d01992839109900990565b61345684829a94959a6121da565b9180946134a1576401000003d0199083096401000003d01903926401000003d01984116123d657906112646134999287956401000003d0199108959a80946121fa565b929083613419565b634e487b7160e01b86526012600452602486fd5b506001613405565b6401000003d01914159050386133fe565b9492918515806136a8575b61369c57801580613694575b61368a576040516080916134f98383611629565b8236833786156121e45786948580928180600180098087529781896001099c602088019d8e5282604089019d8e8c8152516001099160608a019283526040519e8f613543906115f8565b5190098d525190099460208b019586525190099860408901998a5251900960608701908152865188511480159061367e575b1561363957849283808093816040519c856135918f9788611629565b368737518c516135a190836118e0565b900884525185516135b290836118e0565b90089860208301998a5281808b8180808089518a5190099360408a019485528185518b5190096060909a01998a5251800988516135ef90836118e0565b9008818087518551900960020961360690836118e0565b90089c5193519051900961361a8c836118e0565b9008900992519051900961362e90836118e0565b900894510991929190565b60405162461bcd60e51b815260206004820152601e60248201527f557365206a6163446f75626c652066756e6374696f6e20696e737465616400006044820152606490fd5b50815181511415613575565b5092506001919050565b5082156134e5565b94509092506001919050565b5081156134d9565b969490929593919587158061384d575b6138425780158061383a575b61383057608090604051936136e18386611629565b8236863786156121e4578680928161372998818d8009808a5282908e099d60208a019e8f528260408b0191818b800983528183518c099260608d019384526040519d8e6115f8565b5190098b52519009966020890197885251900999604087019a8b5251900992606085019384528451895114801590613824575b15613639578580949281808095816040519e8f9561377a8188611629565b368737518b5161378a90836118e0565b9008845251855161379b90836118e0565b9008976020830198895281808a8180808089518a5190099360408a019485528185518b5190096060909a01998a5251800988516137d890836118e0565b900881808751855190096002096137ef90836118e0565b90089b519351905190096138038b836118e0565b9008900992519051900961381790836118e0565b9008965192969509900990565b5080518451141561375c565b5091949392505050565b5082156136cc565b965090945092915050565b5083156136c0565b949290939180156138e85782156121e45782808781806138a8818b81808080809d818e818082800991800909900981808b80096003090897818080808780098409600409948009900960040908826118e0565b81848009089981806138ba8d826118e0565b92818d800990096004090890096138de8280808a8009818b800909600809836118e0565b9008940960020990565b9291505056fec2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85ba26469706673582212200d8a85d473341cd7cf971cb397acb7ce8fa4615a356e0befb5fc3effc3aef5e264736f6c634300081b0033",
}

// UserActivatorABI is the input ABI used to generate the binding from.
// Deprecated: Use UserActivatorMetaData.ABI instead.
var UserActivatorABI = UserActivatorMetaData.ABI

// UserActivatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use UserActivatorMetaData.Bin instead.
var UserActivatorBin = UserActivatorMetaData.Bin

// DeployUserActivator deploys a new Ethereum contract, binding an instance of UserActivator to it.
func DeployUserActivator(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *UserActivator, error) {
	parsed, err := UserActivatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(UserActivatorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UserActivator{UserActivatorCaller: UserActivatorCaller{contract: contract}, UserActivatorTransactor: UserActivatorTransactor{contract: contract}, UserActivatorFilterer: UserActivatorFilterer{contract: contract}}, nil
}

// UserActivator is an auto generated Go binding around an Ethereum contract.
type UserActivator struct {
	UserActivatorCaller     // Read-only binding to the contract
	UserActivatorTransactor // Write-only binding to the contract
	UserActivatorFilterer   // Log filterer for contract events
}

// UserActivatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type UserActivatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserActivatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UserActivatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserActivatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UserActivatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserActivatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UserActivatorSession struct {
	Contract     *UserActivator    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// UserActivatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UserActivatorCallerSession struct {
	Contract *UserActivatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// UserActivatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UserActivatorTransactorSession struct {
	Contract     *UserActivatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// UserActivatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type UserActivatorRaw struct {
	Contract *UserActivator // Generic contract binding to access the raw methods on
}

// UserActivatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UserActivatorCallerRaw struct {
	Contract *UserActivatorCaller // Generic read-only contract binding to access the raw methods on
}

// UserActivatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UserActivatorTransactorRaw struct {
	Contract *UserActivatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUserActivator creates a new instance of UserActivator, bound to a specific deployed contract.
func NewUserActivator(address common.Address, backend bind.ContractBackend) (*UserActivator, error) {
	contract, err := bindUserActivator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UserActivator{UserActivatorCaller: UserActivatorCaller{contract: contract}, UserActivatorTransactor: UserActivatorTransactor{contract: contract}, UserActivatorFilterer: UserActivatorFilterer{contract: contract}}, nil
}

// NewUserActivatorCaller creates a new read-only instance of UserActivator, bound to a specific deployed contract.
func NewUserActivatorCaller(address common.Address, caller bind.ContractCaller) (*UserActivatorCaller, error) {
	contract, err := bindUserActivator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UserActivatorCaller{contract: contract}, nil
}

// NewUserActivatorTransactor creates a new write-only instance of UserActivator, bound to a specific deployed contract.
func NewUserActivatorTransactor(address common.Address, transactor bind.ContractTransactor) (*UserActivatorTransactor, error) {
	contract, err := bindUserActivator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UserActivatorTransactor{contract: contract}, nil
}

// NewUserActivatorFilterer creates a new log filterer instance of UserActivator, bound to a specific deployed contract.
func NewUserActivatorFilterer(address common.Address, filterer bind.ContractFilterer) (*UserActivatorFilterer, error) {
	contract, err := bindUserActivator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UserActivatorFilterer{contract: contract}, nil
}

// bindUserActivator binds a generic wrapper to an already deployed contract.
func bindUserActivator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := UserActivatorMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UserActivator *UserActivatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UserActivator.Contract.UserActivatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UserActivator *UserActivatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserActivator.Contract.UserActivatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UserActivator *UserActivatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UserActivator.Contract.UserActivatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UserActivator *UserActivatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UserActivator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UserActivator *UserActivatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserActivator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UserActivator *UserActivatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UserActivator.Contract.contract.Transact(opts, method, params...)
}

// ActivatedAddresses is a free data retrieval call binding the contract method 0x0b68f450.
//
// Solidity: function activatedAddresses(address ) view returns(bool)
func (_UserActivator *UserActivatorCaller) ActivatedAddresses(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "activatedAddresses", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ActivatedAddresses is a free data retrieval call binding the contract method 0x0b68f450.
//
// Solidity: function activatedAddresses(address ) view returns(bool)
func (_UserActivator *UserActivatorSession) ActivatedAddresses(arg0 common.Address) (bool, error) {
	return _UserActivator.Contract.ActivatedAddresses(&_UserActivator.CallOpts, arg0)
}

// ActivatedAddresses is a free data retrieval call binding the contract method 0x0b68f450.
//
// Solidity: function activatedAddresses(address ) view returns(bool)
func (_UserActivator *UserActivatorCallerSession) ActivatedAddresses(arg0 common.Address) (bool, error) {
	return _UserActivator.Contract.ActivatedAddresses(&_UserActivator.CallOpts, arg0)
}

// BtcAddr1 is a free data retrieval call binding the contract method 0xad427415.
//
// Solidity: function btcAddr1() view returns(string)
func (_UserActivator *UserActivatorCaller) BtcAddr1(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "btcAddr1")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// BtcAddr1 is a free data retrieval call binding the contract method 0xad427415.
//
// Solidity: function btcAddr1() view returns(string)
func (_UserActivator *UserActivatorSession) BtcAddr1() (string, error) {
	return _UserActivator.Contract.BtcAddr1(&_UserActivator.CallOpts)
}

// BtcAddr1 is a free data retrieval call binding the contract method 0xad427415.
//
// Solidity: function btcAddr1() view returns(string)
func (_UserActivator *UserActivatorCallerSession) BtcAddr1() (string, error) {
	return _UserActivator.Contract.BtcAddr1(&_UserActivator.CallOpts)
}

// BtcAddr2 is a free data retrieval call binding the contract method 0x2fbb7ab6.
//
// Solidity: function btcAddr2() view returns(string)
func (_UserActivator *UserActivatorCaller) BtcAddr2(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "btcAddr2")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// BtcAddr2 is a free data retrieval call binding the contract method 0x2fbb7ab6.
//
// Solidity: function btcAddr2() view returns(string)
func (_UserActivator *UserActivatorSession) BtcAddr2() (string, error) {
	return _UserActivator.Contract.BtcAddr2(&_UserActivator.CallOpts)
}

// BtcAddr2 is a free data retrieval call binding the contract method 0x2fbb7ab6.
//
// Solidity: function btcAddr2() view returns(string)
func (_UserActivator *UserActivatorCallerSession) BtcAddr2() (string, error) {
	return _UserActivator.Contract.BtcAddr2(&_UserActivator.CallOpts)
}

// GetBTCDepositAddress is a free data retrieval call binding the contract method 0xa0ddd62f.
//
// Solidity: function getBTCDepositAddress(address ethAddr) view returns(string)
func (_UserActivator *UserActivatorCaller) GetBTCDepositAddress(opts *bind.CallOpts, ethAddr common.Address) (string, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "getBTCDepositAddress", ethAddr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetBTCDepositAddress is a free data retrieval call binding the contract method 0xa0ddd62f.
//
// Solidity: function getBTCDepositAddress(address ethAddr) view returns(string)
func (_UserActivator *UserActivatorSession) GetBTCDepositAddress(ethAddr common.Address) (string, error) {
	return _UserActivator.Contract.GetBTCDepositAddress(&_UserActivator.CallOpts, ethAddr)
}

// GetBTCDepositAddress is a free data retrieval call binding the contract method 0xa0ddd62f.
//
// Solidity: function getBTCDepositAddress(address ethAddr) view returns(string)
func (_UserActivator *UserActivatorCallerSession) GetBTCDepositAddress(ethAddr common.Address) (string, error) {
	return _UserActivator.Contract.GetBTCDepositAddress(&_UserActivator.CallOpts, ethAddr)
}

// NetworkHrp is a free data retrieval call binding the contract method 0x4edac789.
//
// Solidity: function networkHrp() view returns(string)
func (_UserActivator *UserActivatorCaller) NetworkHrp(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "networkHrp")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NetworkHrp is a free data retrieval call binding the contract method 0x4edac789.
//
// Solidity: function networkHrp() view returns(string)
func (_UserActivator *UserActivatorSession) NetworkHrp() (string, error) {
	return _UserActivator.Contract.NetworkHrp(&_UserActivator.CallOpts)
}

// NetworkHrp is a free data retrieval call binding the contract method 0x4edac789.
//
// Solidity: function networkHrp() view returns(string)
func (_UserActivator *UserActivatorCallerSession) NetworkHrp() (string, error) {
	return _UserActivator.Contract.NetworkHrp(&_UserActivator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_UserActivator *UserActivatorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_UserActivator *UserActivatorSession) Owner() (common.Address, error) {
	return _UserActivator.Contract.Owner(&_UserActivator.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_UserActivator *UserActivatorCallerSession) Owner() (common.Address, error) {
	return _UserActivator.Contract.Owner(&_UserActivator.CallOpts)
}

// P1x is a free data retrieval call binding the contract method 0xb1185919.
//
// Solidity: function p1x() view returns(uint256)
func (_UserActivator *UserActivatorCaller) P1x(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "p1x")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// P1x is a free data retrieval call binding the contract method 0xb1185919.
//
// Solidity: function p1x() view returns(uint256)
func (_UserActivator *UserActivatorSession) P1x() (*big.Int, error) {
	return _UserActivator.Contract.P1x(&_UserActivator.CallOpts)
}

// P1x is a free data retrieval call binding the contract method 0xb1185919.
//
// Solidity: function p1x() view returns(uint256)
func (_UserActivator *UserActivatorCallerSession) P1x() (*big.Int, error) {
	return _UserActivator.Contract.P1x(&_UserActivator.CallOpts)
}

// P1y is a free data retrieval call binding the contract method 0xad38cb0b.
//
// Solidity: function p1y() view returns(uint256)
func (_UserActivator *UserActivatorCaller) P1y(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "p1y")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// P1y is a free data retrieval call binding the contract method 0xad38cb0b.
//
// Solidity: function p1y() view returns(uint256)
func (_UserActivator *UserActivatorSession) P1y() (*big.Int, error) {
	return _UserActivator.Contract.P1y(&_UserActivator.CallOpts)
}

// P1y is a free data retrieval call binding the contract method 0xad38cb0b.
//
// Solidity: function p1y() view returns(uint256)
func (_UserActivator *UserActivatorCallerSession) P1y() (*big.Int, error) {
	return _UserActivator.Contract.P1y(&_UserActivator.CallOpts)
}

// P2x is a free data retrieval call binding the contract method 0xcca03acb.
//
// Solidity: function p2x() view returns(uint256)
func (_UserActivator *UserActivatorCaller) P2x(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "p2x")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// P2x is a free data retrieval call binding the contract method 0xcca03acb.
//
// Solidity: function p2x() view returns(uint256)
func (_UserActivator *UserActivatorSession) P2x() (*big.Int, error) {
	return _UserActivator.Contract.P2x(&_UserActivator.CallOpts)
}

// P2x is a free data retrieval call binding the contract method 0xcca03acb.
//
// Solidity: function p2x() view returns(uint256)
func (_UserActivator *UserActivatorCallerSession) P2x() (*big.Int, error) {
	return _UserActivator.Contract.P2x(&_UserActivator.CallOpts)
}

// P2y is a free data retrieval call binding the contract method 0xa62ef073.
//
// Solidity: function p2y() view returns(uint256)
func (_UserActivator *UserActivatorCaller) P2y(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "p2y")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// P2y is a free data retrieval call binding the contract method 0xa62ef073.
//
// Solidity: function p2y() view returns(uint256)
func (_UserActivator *UserActivatorSession) P2y() (*big.Int, error) {
	return _UserActivator.Contract.P2y(&_UserActivator.CallOpts)
}

// P2y is a free data retrieval call binding the contract method 0xa62ef073.
//
// Solidity: function p2y() view returns(uint256)
func (_UserActivator *UserActivatorCallerSession) P2y() (*big.Int, error) {
	return _UserActivator.Contract.P2y(&_UserActivator.CallOpts)
}

// ParseBTCTaprootAddress is a free data retrieval call binding the contract method 0xc1d643b1.
//
// Solidity: function parseBTCTaprootAddress(string _hrp, string _bitcoinAddress) pure returns(uint256, uint256)
func (_UserActivator *UserActivatorCaller) ParseBTCTaprootAddress(opts *bind.CallOpts, _hrp string, _bitcoinAddress string) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "parseBTCTaprootAddress", _hrp, _bitcoinAddress)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// ParseBTCTaprootAddress is a free data retrieval call binding the contract method 0xc1d643b1.
//
// Solidity: function parseBTCTaprootAddress(string _hrp, string _bitcoinAddress) pure returns(uint256, uint256)
func (_UserActivator *UserActivatorSession) ParseBTCTaprootAddress(_hrp string, _bitcoinAddress string) (*big.Int, *big.Int, error) {
	return _UserActivator.Contract.ParseBTCTaprootAddress(&_UserActivator.CallOpts, _hrp, _bitcoinAddress)
}

// ParseBTCTaprootAddress is a free data retrieval call binding the contract method 0xc1d643b1.
//
// Solidity: function parseBTCTaprootAddress(string _hrp, string _bitcoinAddress) pure returns(uint256, uint256)
func (_UserActivator *UserActivatorCallerSession) ParseBTCTaprootAddress(_hrp string, _bitcoinAddress string) (*big.Int, *big.Int, error) {
	return _UserActivator.Contract.ParseBTCTaprootAddress(&_UserActivator.CallOpts, _hrp, _bitcoinAddress)
}

// WasSeedSet is a free data retrieval call binding the contract method 0x9fa4989c.
//
// Solidity: function wasSeedSet() view returns(bool)
func (_UserActivator *UserActivatorCaller) WasSeedSet(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _UserActivator.contract.Call(opts, &out, "wasSeedSet")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// WasSeedSet is a free data retrieval call binding the contract method 0x9fa4989c.
//
// Solidity: function wasSeedSet() view returns(bool)
func (_UserActivator *UserActivatorSession) WasSeedSet() (bool, error) {
	return _UserActivator.Contract.WasSeedSet(&_UserActivator.CallOpts)
}

// WasSeedSet is a free data retrieval call binding the contract method 0x9fa4989c.
//
// Solidity: function wasSeedSet() view returns(bool)
func (_UserActivator *UserActivatorCallerSession) WasSeedSet() (bool, error) {
	return _UserActivator.Contract.WasSeedSet(&_UserActivator.CallOpts)
}

// ActivateUser is a paid mutator transaction binding the contract method 0xb4acfe1c.
//
// Solidity: function activateUser(address _userAddress) returns()
func (_UserActivator *UserActivatorTransactor) ActivateUser(opts *bind.TransactOpts, _userAddress common.Address) (*types.Transaction, error) {
	return _UserActivator.contract.Transact(opts, "activateUser", _userAddress)
}

// ActivateUser is a paid mutator transaction binding the contract method 0xb4acfe1c.
//
// Solidity: function activateUser(address _userAddress) returns()
func (_UserActivator *UserActivatorSession) ActivateUser(_userAddress common.Address) (*types.Transaction, error) {
	return _UserActivator.Contract.ActivateUser(&_UserActivator.TransactOpts, _userAddress)
}

// ActivateUser is a paid mutator transaction binding the contract method 0xb4acfe1c.
//
// Solidity: function activateUser(address _userAddress) returns()
func (_UserActivator *UserActivatorTransactorSession) ActivateUser(_userAddress common.Address) (*types.Transaction, error) {
	return _UserActivator.Contract.ActivateUser(&_UserActivator.TransactOpts, _userAddress)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_UserActivator *UserActivatorTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserActivator.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_UserActivator *UserActivatorSession) RenounceOwnership() (*types.Transaction, error) {
	return _UserActivator.Contract.RenounceOwnership(&_UserActivator.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_UserActivator *UserActivatorTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _UserActivator.Contract.RenounceOwnership(&_UserActivator.TransactOpts)
}

// SetSeed is a paid mutator transaction binding the contract method 0xe5451bc8.
//
// Solidity: function setSeed(string _btcAddr1, string _btcAddr2, uint8 _network) returns()
func (_UserActivator *UserActivatorTransactor) SetSeed(opts *bind.TransactOpts, _btcAddr1 string, _btcAddr2 string, _network uint8) (*types.Transaction, error) {
	return _UserActivator.contract.Transact(opts, "setSeed", _btcAddr1, _btcAddr2, _network)
}

// SetSeed is a paid mutator transaction binding the contract method 0xe5451bc8.
//
// Solidity: function setSeed(string _btcAddr1, string _btcAddr2, uint8 _network) returns()
func (_UserActivator *UserActivatorSession) SetSeed(_btcAddr1 string, _btcAddr2 string, _network uint8) (*types.Transaction, error) {
	return _UserActivator.Contract.SetSeed(&_UserActivator.TransactOpts, _btcAddr1, _btcAddr2, _network)
}

// SetSeed is a paid mutator transaction binding the contract method 0xe5451bc8.
//
// Solidity: function setSeed(string _btcAddr1, string _btcAddr2, uint8 _network) returns()
func (_UserActivator *UserActivatorTransactorSession) SetSeed(_btcAddr1 string, _btcAddr2 string, _network uint8) (*types.Transaction, error) {
	return _UserActivator.Contract.SetSeed(&_UserActivator.TransactOpts, _btcAddr1, _btcAddr2, _network)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_UserActivator *UserActivatorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _UserActivator.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_UserActivator *UserActivatorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _UserActivator.Contract.TransferOwnership(&_UserActivator.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_UserActivator *UserActivatorTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _UserActivator.Contract.TransferOwnership(&_UserActivator.TransactOpts, newOwner)
}

// UserActivatorOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the UserActivator contract.
type UserActivatorOwnershipTransferredIterator struct {
	Event *UserActivatorOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UserActivatorOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UserActivatorOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UserActivatorOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UserActivatorOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UserActivatorOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UserActivatorOwnershipTransferred represents a OwnershipTransferred event raised by the UserActivator contract.
type UserActivatorOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_UserActivator *UserActivatorFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*UserActivatorOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _UserActivator.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &UserActivatorOwnershipTransferredIterator{contract: _UserActivator.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_UserActivator *UserActivatorFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *UserActivatorOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _UserActivator.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UserActivatorOwnershipTransferred)
				if err := _UserActivator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_UserActivator *UserActivatorFilterer) ParseOwnershipTransferred(log types.Log) (*UserActivatorOwnershipTransferred, error) {
	event := new(UserActivatorOwnershipTransferred)
	if err := _UserActivator.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UserActivatorSeedChangedIterator is returned from FilterSeedChanged and is used to iterate over the raw logs and unpacked data for SeedChanged events raised by the UserActivator contract.
type UserActivatorSeedChangedIterator struct {
	Event *UserActivatorSeedChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UserActivatorSeedChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UserActivatorSeedChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UserActivatorSeedChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UserActivatorSeedChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UserActivatorSeedChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UserActivatorSeedChanged represents a SeedChanged event raised by the UserActivator contract.
type UserActivatorSeedChanged struct {
	BtcAddr1 string
	BtcAddr2 string
	Hrp      string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSeedChanged is a free log retrieval operation binding the contract event 0x123278a680a966680eaa7dc7f03997fbccbc36d6666b5b6f3388eb15fccf001f.
//
// Solidity: event SeedChanged(string btcAddr1, string btcAddr2, string hrp)
func (_UserActivator *UserActivatorFilterer) FilterSeedChanged(opts *bind.FilterOpts) (*UserActivatorSeedChangedIterator, error) {

	logs, sub, err := _UserActivator.contract.FilterLogs(opts, "SeedChanged")
	if err != nil {
		return nil, err
	}
	return &UserActivatorSeedChangedIterator{contract: _UserActivator.contract, event: "SeedChanged", logs: logs, sub: sub}, nil
}

// WatchSeedChanged is a free log subscription operation binding the contract event 0x123278a680a966680eaa7dc7f03997fbccbc36d6666b5b6f3388eb15fccf001f.
//
// Solidity: event SeedChanged(string btcAddr1, string btcAddr2, string hrp)
func (_UserActivator *UserActivatorFilterer) WatchSeedChanged(opts *bind.WatchOpts, sink chan<- *UserActivatorSeedChanged) (event.Subscription, error) {

	logs, sub, err := _UserActivator.contract.WatchLogs(opts, "SeedChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UserActivatorSeedChanged)
				if err := _UserActivator.contract.UnpackLog(event, "SeedChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSeedChanged is a log parse operation binding the contract event 0x123278a680a966680eaa7dc7f03997fbccbc36d6666b5b6f3388eb15fccf001f.
//
// Solidity: event SeedChanged(string btcAddr1, string btcAddr2, string hrp)
func (_UserActivator *UserActivatorFilterer) ParseSeedChanged(log types.Log) (*UserActivatorSeedChanged, error) {
	event := new(UserActivatorSeedChanged)
	if err := _UserActivator.contract.UnpackLog(event, "SeedChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UserActivatorUserAddressActivatedIterator is returned from FilterUserAddressActivated and is used to iterate over the raw logs and unpacked data for UserAddressActivated events raised by the UserActivator contract.
type UserActivatorUserAddressActivatedIterator struct {
	Event *UserActivatorUserAddressActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UserActivatorUserAddressActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UserActivatorUserAddressActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UserActivatorUserAddressActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UserActivatorUserAddressActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UserActivatorUserAddressActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UserActivatorUserAddressActivated represents a UserAddressActivated event raised by the UserActivator contract.
type UserActivatorUserAddressActivated struct {
	UserETHAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUserAddressActivated is a free log retrieval operation binding the contract event 0xa80bfdc57bf882738a124b225520a84f1796f14d85d45b99687f5577ebe22512.
//
// Solidity: event UserAddressActivated(address userETHAddress)
func (_UserActivator *UserActivatorFilterer) FilterUserAddressActivated(opts *bind.FilterOpts) (*UserActivatorUserAddressActivatedIterator, error) {

	logs, sub, err := _UserActivator.contract.FilterLogs(opts, "UserAddressActivated")
	if err != nil {
		return nil, err
	}
	return &UserActivatorUserAddressActivatedIterator{contract: _UserActivator.contract, event: "UserAddressActivated", logs: logs, sub: sub}, nil
}

// WatchUserAddressActivated is a free log subscription operation binding the contract event 0xa80bfdc57bf882738a124b225520a84f1796f14d85d45b99687f5577ebe22512.
//
// Solidity: event UserAddressActivated(address userETHAddress)
func (_UserActivator *UserActivatorFilterer) WatchUserAddressActivated(opts *bind.WatchOpts, sink chan<- *UserActivatorUserAddressActivated) (event.Subscription, error) {

	logs, sub, err := _UserActivator.contract.WatchLogs(opts, "UserAddressActivated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UserActivatorUserAddressActivated)
				if err := _UserActivator.contract.UnpackLog(event, "UserAddressActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUserAddressActivated is a log parse operation binding the contract event 0xa80bfdc57bf882738a124b225520a84f1796f14d85d45b99687f5577ebe22512.
//
// Solidity: event UserAddressActivated(address userETHAddress)
func (_UserActivator *UserActivatorFilterer) ParseUserAddressActivated(log types.Log) (*UserActivatorUserAddressActivated, error) {
	event := new(UserActivatorUserAddressActivated)
	if err := _UserActivator.contract.UnpackLog(event, "UserAddressActivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
